CLASS /rb4r/cl_mm_gmmc_reqhead DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES /rb4r/if_mm_gmmc_reqhead.
    INTERFACES if_oo_adt_classrun.
    INTERFACES if_abap_behv_message.

    CONSTANTS ms           LIKE if_abap_behv_message=>severity VALUE if_abap_behv_message=>severity.

    CONSTANTS gc_createmat TYPE /rb4r/mm_req_type              VALUE 'C'.
    CONSTANTS gc_createir  TYPE /rb4r/mm_req_type              VALUE 'N'.
    CONSTANTS gc_updateir  TYPE /rb4r/mm_req_type              VALUE 'U'.
    CONSTANTS gc_createwop TYPE /rb4r/mm_req_type              VALUE 'W'.

    CLASS-DATA gt_requestheader     TYPE TABLE OF /rb4r/mm_request.
    CLASS-DATA gt_requestheader_del TYPE TABLE OF /rb4r/mm_request.
    CLASS-DATA gt_requestitem       TYPE TABLE OF /rb4r/mm_rqitem.
    CLASS-DATA gt_requestitem_del   TYPE TABLE OF /rb4r/mm_rqitem.
    CLASS-DATA gt_comment           TYPE TABLE OF /rb4r/mm_cmmnt.
    CLASS-DATA gt_comment_del       TYPE TABLE OF /rb4r/mm_cmmnt.
    CLASS-DATA gt_matsclprice       TYPE TABLE OF /rb4r/mm_rqscl.
    CLASS-DATA gt_potext            TYPE TABLE OF /rb4r/mm_potxt.
    CLASS-DATA gt_potext_del        TYPE TABLE OF /rb4r/mm_potxt.
    CLASS-DATA gt_documentlist      TYPE TABLE OF /rb4r/mm_docls.
    CLASS-DATA gt_matsclprice_del   TYPE TABLE OF /rb4r/mm_rqscl.
    CLASS-DATA gt_equipmentbom      TYPE TABLE OF /rb4r/mm_eq_bm.
    CLASS-DATA gt_equipmentbom_del  TYPE TABLE OF /rb4r/mm_eq_bm.
    CLASS-DATA gt_schedulingag      TYPE TABLE OF /rb4r/mm_sag.
    CLASS-DATA gt_schedulingag_del  TYPE TABLE OF /rb4r/mm_sag.
    CLASS-DATA gt_sourcelist        TYPE TABLE OF /rb4r/mm_srcls.
    CLASS-DATA gt_sourcelist_del    TYPE TABLE OF /rb4r/mm_srcls.
    CLASS-DATA gs_requestitem       TYPE /rb4r/mm_rqitem.
    CLASS-DATA gt_reqvalerr         TYPE TABLE OF /rb4r/mm_logs.
    CLASS-DATA gt_useractlog        TYPE TABLE OF /rb4r/mm_actlog.
    CLASS-DATA gt_useractlog_del    TYPE TABLE OF /rb4r/mm_actlog.

    TYPES tt_exceldata       TYPE TABLE OF /rb4r/mm_s_gmmc_excel_upload.
    TYPES tt_exceldata_a2    TYPE TABLE OF /rb4r/mm_s_gmmc_excel_upl_ap2.
    TYPES tt_exceldata_a2up  TYPE TABLE OF /rb4r/mm_s_gmmc_excel_ap2_upd.
    TYPES tt_exceldata_a3    TYPE TABLE OF /rb4r/mm_s_gmmc_excel_upl_ap3.
    TYPES tt_exceldata_pur   TYPE TABLE OF /rb4r/mm_s_gmmc_excel_pur_up.
    TYPES tt_exceldata_scale TYPE TABLE OF /rb4r/mm_s_gmmc_excel_scales.

    TYPES tt_exceldata_ext  TYPE TABLE OF /rb4r/mm_s_gmmc_excel_up_ext.

    DATA mo_package TYPE REF TO cl_openxml_package.
    DATA mo_parts   TYPE REF TO cl_openxml_partcollection.

    CLASS-METHODS get_instance
      RETURNING VALUE(ro_instance) TYPE REF TO /rb4r/cl_mm_gmmc_reqhead.

    CLASS-METHODS read_request
      IMPORTING iv_requestnumber TYPE /rb4r/mm_requestno
      EXPORTING et_requestheader TYPE /rb4r/if_mm_gmmc_reqhead~tt_resultheader
                et_requestitem   TYPE /rb4r/if_mm_gmmc_reqhead~tt_resulttem.

  PROTECTED SECTION.

  PRIVATE SECTION.
    TYPES: BEGIN OF gty_exceldata.
             INCLUDE  TYPE /rb4r/mm_s_gmmc_excel_ap2_upd.
    TYPES:   isexistingsourcelist   TYPE flag,
             isexistingsa           TYPE flag,
             schedulingagreementno  TYPE evrtn,
             preconsumflag          TYPE flag,
             srclstno               TYPE char5,
             baseuom                TYPE meins,
             priceuom               TYPE kmein,
             preconsum              TYPE vbwrt,
             materialtype           TYPE mtart,
             baseuomunit            TYPE umbsz,
             orderuomunit           TYPE umbsn,
             blockingflag           TYPE flag,
             linecomment            TYPE /rb4r/mm_comments,
             partnumber             TYPE /rb4r/mm_partnumber,
             purchaseorderno        TYPE ebeln,
             contract               TYPE urzzt,
             externalproductid      TYPE /rb4r/mm_external_prod_id,
             confirmationcontrolkey TYPE bstae,
           END OF gty_exceldata,

           BEGIN OF gty_matnrvh,
             materialnumber  TYPE /rb4r/mm_i_gmmc_material_vh-materialnumber,
             materialtype    TYPE /rb4r/mm_i_gmmc_material_vh-materialtype,
             materialgroup   TYPE /rb4r/mm_i_gmmc_material_vh-materialgroup,
             plant           TYPE werks_d,
             materialbaseuom TYPE /rb4r/mm_i_gmmc_material_vh-materialbaseuom,
             consumption     TYPE /rb4r/mm_i_gmmc_material_vh-consumption,
             preconsumflag   TYPE /rb4r/mm_i_gmmc_material_vh-preconsumflag,
           END OF gty_matnrvh,

           BEGIN OF gty_vendorvh,
             creditornumber TYPE lifnr,
             creditorname   TYPE name1,
             purchorg       TYPE ekorg,
             plant          TYPE werks_d,
             region         TYPE regio,
             sortfield      TYPE sortl,
             street         TYPE stras_gp,
             city           TYPE ort01_gp,
             postal_code    TYPE pstlz,
             land1          TYPE land1,
           END OF gty_vendorvh,

           BEGIN OF gty_stxh,
             tdobject             TYPE tdobject,
             tdname               TYPE tdobname, "tdname,
             tdid                 TYPE tdid,
             tdspras              TYPE tdspras,
             purchasinginforecord TYPE infnr,
           END OF gty_stxh,

           gty_selection TYPE /rb4r/mm_s_schedagree_range,
           gtt_matnrvh   TYPE TABLE OF gty_matnrvh,
           gtt_vendorvh  TYPE TABLE OF gty_vendorvh,
           gtt_exceldata TYPE TABLE OF gty_exceldata,
           gtt_potxt     TYPE TABLE OF /rb4r/mm_i_gmmc_potext,
           gtt_stxh      TYPE TABLE OF gty_stxh.

    CLASS-DATA mo_instance TYPE REF TO /rb4r/cl_mm_gmmc_reqhead.
    CLASS-DATA mo_bo_instance TYPE REF TO /rb4r/cl_mm_gmmc_reqhead.
    CLASS-DATA mo_key_store TYPE REF TO /rb4r/if_mm_gmmc_key_store.

    DATA mv_requestno TYPE  /rb4r/mm_requestno.
    DATA mv_exists  TYPE abap_bool.
    METHODS _req_exists
      IMPORTING !iv_requestno    TYPE /rb4r/mm_requestno
      RETURNING VALUE(rv_exists) TYPE abap_bool.

    METHODS new_message
      IMPORTING
        !id        TYPE symsgid
        !number    TYPE symsgno
        !severity  TYPE if_abap_behv_message=>t_severity
        !v1        TYPE simple OPTIONAL
        !v2        TYPE simple OPTIONAL
        !v3        TYPE simple OPTIONAL
        !v4        TYPE simple OPTIONAL
      RETURNING
        VALUE(obj) TYPE REF TO if_abap_behv_message.

    METHODS new_message_with_text
      IMPORTING
        !severity  TYPE if_abap_behv_message=>t_severity DEFAULT if_abap_behv_message=>severity-error
        !text      TYPE csequence OPTIONAL
      RETURNING
        VALUE(obj) TYPE REF TO if_abap_behv_message.
    METHODS load_package IMPORTING VALUE(iv_file_data)  TYPE xstring.

    METHODS load_xml_data IMPORTING VALUE(iv_xml_index) TYPE i
                          RETURNING VALUE(rv_xml_data)  TYPE xstring.
    METHODS transform_xml_to_abap  IMPORTING VALUE(iv_sheet_data)  TYPE xstring
                                             VALUE(iv_shared_data) TYPE xstring
                                             VALUE(iv_requesttype) TYPE /rb4r/mm_req_type
                                             VALUE(iv_purchase)    TYPE char1 OPTIONAL
                                   EXPORTING VALUE(et_data)        TYPE  tt_exceldata
                                             VALUE(et_data2)       TYPE  tt_exceldata_a2
                                             VALUE(et_data2up)     TYPE  tt_exceldata_a2up
                                             VALUE(et_data3)       TYPE  tt_exceldata_a3
                                             VALUE(et_datapur)     TYPE  tt_exceldata_pur
                                             VALUE(et_scales)      TYPE  tt_exceldata_scale.

    METHODS reset_item_before_upload IMPORTING VALUE(iv_is_draft)      TYPE abp_behv_flag OPTIONAL
                                               VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                               VALUE(it_requestitem)   TYPE /rb4r/if_mm_gmmc_reqhead~tt_resulttem OPTIONAL
                                               VALUE(iv_up_import)     TYPE char1 OPTIONAL.

    METHODS store_the_data_to_entities_a1 IMPORTING VALUE(it_data)          TYPE  tt_exceldata
                                                    VALUE(it_scales)        TYPE  tt_exceldata_scale
                                                    VALUE(iv_is_draft)      TYPE abp_behv_flag
                                                    VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                                    VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                          CHANGING
                                                    ct_reportrp             TYPE  /rb4r/if_mm_gmmc_reqhead~ty_reqhead-tt_reported_late.
    METHODS store_the_data_to_entities_a2 IMPORTING VALUE(it_data)          TYPE  tt_exceldata_a2
                                                    VALUE(it_scales)        TYPE  tt_exceldata_scale
                                                    VALUE(iv_is_draft)      TYPE abp_behv_flag
                                                    VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                                    VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                          CHANGING
                                                    ct_reportrp             TYPE  /rb4r/if_mm_gmmc_reqhead~ty_reqhead-tt_reported_late.
    METHODS store_the_data_to_entities_a2u IMPORTING VALUE(it_data)          TYPE  tt_exceldata_a2up
                                                     VALUE(it_scales)        TYPE  tt_exceldata_scale
                                                     VALUE(iv_is_draft)      TYPE abp_behv_flag
                                                     VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                                     VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                           CHANGING
                                                     ct_reportrp             TYPE  /rb4r/if_mm_gmmc_reqhead~ty_reqhead-tt_reported_late.
    METHODS store_the_data_to_entities_a3 IMPORTING VALUE(it_data)          TYPE  tt_exceldata_a3
                                                    VALUE(iv_is_draft)      TYPE abp_behv_flag
                                                    VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                                    VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                          CHANGING
                                                    ct_reportrp             TYPE  /rb4r/if_mm_gmmc_reqhead~ty_reqhead-tt_reported_late.
    METHODS store_the_data_to_update_pur IMPORTING VALUE(it_data)          TYPE tt_exceldata_pur
                                                   VALUE(it_scales)        TYPE  tt_exceldata_scale
                                                   VALUE(iv_is_draft)      TYPE abp_behv_flag
                                                   VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                                   VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                         CHANGING
                                                   ct_reportrp             TYPE  /rb4r/if_mm_gmmc_reqhead~ty_reqhead-tt_reported_late.
    METHODS calc_upload_yearvalue   IMPORTING "VALUE(it_data)          TYPE tt_exceldata_a2up
                                              VALUE(iv_is_draft)      TYPE abp_behv_flag
                                              VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                              VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                    CHANGING  VALUE(ct_data)          TYPE gtt_exceldata
                                              VALUE(ct_matnrvh)       TYPE gtt_matnrvh OPTIONAL
                                              VALUE(ct_vendorvh)      TYPE gtt_vendorvh OPTIONAL
                                              VALUE(ct_selc)          TYPE gty_selection OPTIONAL
                                              VALUE(ct_ir)            TYPE /rb4r/cl_mm_gmmc_model=>tt_ir OPTIONAL
                                              VALUE(ct_stxh)          TYPE gtt_stxh OPTIONAL
                                              VALUE(ct_sag)           TYPE /rb4r/cl_mm_gmmc_model=>tt_sag OPTIONAL
                                              VALUE(ct_konm)          TYPE /rb4r/cl_mm_gmmc_model=>tt_konm OPTIONAL
                                              VALUE(ct_srclst)        TYPE /rb4r/cl_mm_gmmc_model=>tt_scrlist OPTIONAL.

    METHODS upl_create_rq   IMPORTING VALUE(is_header)        TYPE /rb4r/mm_i_gmmc_requestheader
                                      VALUE(it_scales)        TYPE  tt_exceldata_scale
                                      VALUE(iv_is_draft)      TYPE abp_behv_flag
                                      VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                      VALUE(ct_selc)          TYPE gty_selection
                            CHANGING  VALUE(ct_data)          TYPE gtt_exceldata
                                      VALUE(ct_po)            TYPE gtt_potxt.
    METHODS validate_excel IMPORTING VALUE(iv_requestnumber) TYPE /rb4r/mm_requestno
                                     VALUE(iv_is_draft)      TYPE abp_behv_flag OPTIONAL
                           CHANGING  VALUE(ct_data)          TYPE gtt_exceldata OPTIONAL
                                     VALUE(ct_pur_data)      TYPE tt_exceldata_pur OPTIONAL.
ENDCLASS.



CLASS /RB4R/CL_MM_GMMC_REQHEAD IMPLEMENTATION.


  METHOD /rb4r/if_mm_gmmc_reqhead~additional_save.
    DATA(lv_req_number) = gt_requestheader[ 1 ]-requestno. " Test API only
    DATA(lv_plantid) = gt_requestheader[ 1 ]-plant.         " Test API only
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~cba_comment.
    gt_comment = VALUE #(
                               FOR ls_entities_cba IN it_entities_cba
                               FOR ls_item_cba IN ls_entities_cba-%target
                               LET
                               ls_rap_item = CORRESPONDING /rb4r/mm_cmmnt( ls_item_cba MAPPING FROM ENTITY )
                               IN
                        (
                        ls_rap_item
                        )
                        ).
    LOOP AT gt_comment ASSIGNING FIELD-SYMBOL(<ls_comment>).
      <ls_comment>-createdby = sy-uname.
    ENDLOOP.
    ct_mapped = VALUE #(
                comment = VALUE #(
                                   FOR i            = 1 WHILE i <= lines( it_entities_cba )
                                   LET
                                       lt_items     = VALUE #( it_entities_cba[ i ]-%target OPTIONAL )
                                   IN
                                   FOR j            = 1 WHILE j <= lines( lt_items )
                                   LET
                                       ls_curr_item = VALUE #( lt_items[ j ] OPTIONAL )
                                   IN
                       (
                       %cid          = ls_curr_item-%cid
                       %key          = ls_curr_item-%key
                       requestnumber = ls_curr_item-requestnumber
                       )
                       )
                       ).
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~cba_requestitem.

    gt_requestitem = VALUE #(
                              FOR ls_entities_cba IN it_entities_cba
                              FOR ls_item_cba IN ls_entities_cba-%target
                              LET
                              ls_rap_item = CORRESPONDING /rb4r/mm_rqitem( ls_item_cba MAPPING FROM ENTITY )
                              IN
                            (
                            ls_rap_item
                            )
                            ).
    ct_mapped = VALUE #(
                requestitem = VALUE #(
                                       FOR i            = 1 WHILE i <= lines( it_entities_cba )
                                       LET
                                           lt_items     = VALUE #( it_entities_cba[ i ]-%target OPTIONAL )
                                       IN
                                       FOR j            = 1 WHILE j <= lines( lt_items )
                                       LET
                                           ls_curr_item = VALUE #( lt_items[ j ] OPTIONAL )
                                       IN
                       (
                       %cid          = ls_curr_item-%cid
                       %key          = ls_curr_item-%key
                       requestnumber = ls_curr_item-requestnumber
                       requestitem   = ls_curr_item-requestitem

                       )
                       )

                       ).
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~check_before_save.
*    TYPES:
*      BEGIN OF lty_uom,
*        meins TYPE t006-msehi,
*      END OF lty_uom.
*
*    DATA lt_uom           TYPE SORTED TABLE OF lty_uom WITH UNIQUE KEY meins.
*    DATA lt_termc_rnge    TYPE /rb9x/rb0m_t_ind_string_range.
*    DATA ls_src_selection TYPE /rb9x/rb0m_s_ind_prefl_srchsel.
*    DATA lo_ind_mat_appl  TYPE REF TO /rb9x/rb0m_cl_ind_mat_appl.
*    " TODO: variable is assigned but never used (ABAP cleaner)
*    DATA lt_reflist_res   TYPE /rb9x/rb0m_t_ind_preflist.
*
*    IF gt_requestheader IS INITIAL OR gt_requestitem IS INITIAL.
*      RETURN.
*    ENDIF.
*
*    LOOP AT gt_requestitem ASSIGNING FIELD-SYMBOL(<ls_requestitem>).
*      " Collect all UoM
*
*      IF line_exists( lt_uom[ meins = <ls_requestitem>-baseuom ] ).
*      ELSE.
*        APPEND VALUE #( meins = <ls_requestitem>-baseuom ) TO lt_uom.
*      ENDIF.
*
*      IF line_exists( lt_uom[ meins = <ls_requestitem>-orderuom ] ).
*      ELSE.
*        APPEND VALUE #( meins = <ls_requestitem>-orderuom ) TO lt_uom.
*      ENDIF.
*
*      IF line_exists( lt_uom[ meins = <ls_requestitem>-priceuom ] ).
*      ELSE.
*        APPEND VALUE #( meins = <ls_requestitem>-priceuom ) TO lt_uom.
*      ENDIF.
*
*      " Collect term code
*      IF line_exists( lt_termc_rnge[ low = <ls_requestitem>-termcode ] ).
*      ELSE.
*        APPEND VALUE #( sign   = 'I'
*                      option = 'EQ'
*                      low    = <ls_requestitem>-termcode  ) TO lt_termc_rnge.
*      ENDIF.
*
*
*    ENDLOOP.
*
*    " ----------------------------------------------------------------------
*    " UOM validation
*    " ----------------------------------------------------------------------
*    DELETE ADJACENT DUPLICATES FROM lt_uom COMPARING meins.
*    IF lt_uom IS NOT INITIAL.
*      SELECT msehi AS meins,
*             mseh3 AS meins_ex
*        FROM t006a
*        FOR ALL ENTRIES IN @lt_uom
*        WHERE msehi = @lt_uom-meins
*        " TODO: variable is assigned but never used (ABAP cleaner)
*        INTO TABLE @DATA(lt_uom_valid).
*      SELECT msehi AS meins,
*             mseh3 AS meins_ex
*        FROM t006a
*        FOR ALL ENTRIES IN @lt_uom
*        WHERE mseh3 = @lt_uom-meins
*        APPENDING TABLE @lt_uom_valid.
*
*      SORT lt_uom_valid BY meins_ex ASCENDING.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Creditor validation
*    " ----------------------------------------------------------------------
*    SELECT lifnr AS creditornumber,
*           sperm AS lfa1_block,
*           loevm AS lfa1_delete
*      FROM lfa1
*      INTO TABLE @DATA(lt_creditor)
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE lifnr = @gt_requestitem-creditornumber
*         OR lifnr = @gt_requestitem-mfrnumber.
*
*    IF sy-subrc = 0.
*      SORT lt_creditor BY creditornumber ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_creditor COMPARING creditornumber.
*
*      SELECT lifnr AS creditornumber,
*             ekorg AS purchorg,
*             sperm AS lfm1_block,
*             loevm AS lfm1_delete
*        FROM lfm1
*        INTO TABLE @DATA(lt_lfm1)
*        FOR ALL ENTRIES IN @lt_creditor
*        WHERE lifnr = @lt_creditor-creditornumber.
*
*      IF sy-subrc = 0.
*        SORT lt_lfm1 BY creditornumber ASCENDING
*                        purchorg ASCENDING.
*        DELETE ADJACENT DUPLICATES FROM lt_lfm1 COMPARING creditornumber
*                                                          purchorg.
*
*        SELECT lifnr AS creditornumber,
*               ekorg AS purchorg,
*               werks AS plant,
*               sperm AS lfm2_block,
*               loevm AS lfm2_delete
*          FROM lfm2
*          INTO TABLE @DATA(lt_lfm2)
*          FOR ALL ENTRIES IN @lt_creditor
*          WHERE lifnr = @lt_creditor-creditornumber.
*        IF sy-subrc = 0.
*          SORT lt_lfm2 BY creditornumber ASCENDING
*                          purchorg ASCENDING
*                          plant ASCENDING.
*          DELETE ADJACENT DUPLICATES FROM lt_lfm2 COMPARING creditornumber
*                                                            purchorg
*                                                            plant.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Inforecord validation
*    " ----------------------------------------------------------------------
*    SELECT infnr AS inforecord,
*           loekz AS eina_delete
*      FROM eina
*      INTO TABLE @DATA(lt_eina)
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE infnr = @gt_requestitem-inforecord.
*
*    IF sy-subrc = 0.
*      SORT lt_eina BY inforecord ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_eina COMPARING inforecord.
*
*      SELECT a~infnr         AS inforecord,
*             a~ekorg         AS purchorg,
*             a~werks         AS plant,
*             a~loekz         AS eine_delete,
*             b~ext_productid AS extid
*        FROM eine AS a
*               LEFT JOIN
*                 /rb4r/mm_pir_add AS b ON  a~infnr = b~infnr
*                                       AND a~ekorg = b~ekorg
*                                       AND a~esokz = b~esokz
*                                       AND a~werks = b~werks
*        " TODO: variable is assigned but never used (ABAP cleaner)
*        INTO TABLE @DATA(lt_eine)
*        FOR ALL ENTRIES IN @lt_eina
*        WHERE a~infnr = @lt_eina-inforecord.
*
*      IF sy-subrc = 0.
*        SORT lt_eine BY inforecord ASCENDING
*                        purchorg ASCENDING
*                        plant ASCENDING.
*        DELETE ADJACENT DUPLICATES FROM lt_eine COMPARING inforecord
*                                                          purchorg
*                                                          plant.
*      ENDIF.
*    ENDIF.
*
*    " Get duplicate inforecord
*    SELECT t1~infnr AS inforecord,
*           t1~matnr AS materialno,    " Material
*           t1~lifnr AS creditornumber, " Supplier/Manufacture Number
*           t1~meins AS orderuom,      " Order UOM
*           t2~ekorg AS purchorg,      " Purchasing org
*           t2~werks AS plant,         " Plant
*           t1~loekz AS eina_delete,
*           t2~loekz AS eine_delete
*      FROM eina AS t1
*             INNER JOIN
*               eine AS t2 ON t1~infnr = t2~infnr
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE t1~lifnr = @gt_requestitem-creditornumber
*        AND t1~matnr = @gt_requestitem-materialno
*        AND t2~werks = @gt_requestitem-werks
*      " TODO: variable is assigned but never used (ABAP cleaner)
*      INTO TABLE @DATA(lt_infor_dup).
*
*    IF sy-subrc = 0.
*      SORT lt_infor_dup BY materialno ASCENDING
*                           creditornumber ASCENDING
*                           plant ASCENDING
*                           purchorg ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_infor_dup COMPARING materialno
*                                                             creditornumber
*                                                             plant
*                                                             purchorg.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Material data
*    " ----------------------------------------------------------------------
*    SELECT t1~matnr AS materialno,    " Material
*           t2~werks AS plant,         " Plant
*           t2~lvorm AS marc_delete,
*           t2~mmsta AS mat_plant_status,
*           t1~mtart AS materialtype
*      FROM mara AS t1
*             INNER JOIN
*               marc AS t2 ON t1~matnr = t2~matnr
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE t1~matnr = @gt_requestitem-materialno
*        AND t2~werks = @gt_requestitem-werks
*      " TODO: variable is assigned but never used (ABAP cleaner)
*      INTO TABLE @DATA(lt_mara).
*
*    IF sy-subrc = 0.
*      SORT lt_mara BY materialno ASCENDING
*                      plant ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_mara COMPARING materialno plant.
*    ENDIF.
*    " ----------------------------------------------------------------------
*    " Equipment validation
*    " ----------------------------------------------------------------------
*    SELECT equnr,
*           spras,
*           eqktx,
*           kostl AS costcenter,
*           objnr  " GINA-942++
*      FROM v_equi
*      " TODO: variable is assigned but never used (ABAP cleaner)
*      INTO TABLE @DATA(lt_equi)
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE equnr  = @gt_requestitem-equnr
*        AND datbi >= @sy-datum
*        AND datab <= @sy-datum.
*
*    IF sy-subrc = 0.
*      SORT lt_equi BY equnr ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_equi COMPARING equnr.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Currency validation
*    " ----------------------------------------------------------------------
*    SELECT waers FROM tcurc
*      " TODO: variable is assigned but never used (ABAP cleaner)
*      INTO TABLE @DATA(lt_curr)
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE waers = @gt_requestitem-currency.
*
*    IF sy-subrc = 0.
*      SORT lt_curr BY waers ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_curr COMPARING waers.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Purchasing View existence validation
*    " ----------------------------------------------------------------------
*    SELECT matnr, statm, zhler, werks, ersda, ernam, laeda, aenam
*      FROM msta
*      " TODO: variable is assigned but never used (ABAP cleaner)
*      INTO TABLE @DATA(lt_msta)
*      FOR ALL ENTRIES IN @gt_requestitem
*      WHERE matnr = @gt_requestitem-materialno
*        AND statm = 'E'.
*
*    IF sy-subrc = 0.
*      SORT lt_msta BY matnr
*                      werks ASCENDING.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Termcode validation
*    " ----------------------------------------------------------------------
*
*    IF lt_termc_rnge IS NOT INITIAL.
*      ls_src_selection-termc = lt_termc_rnge.
*
*      /rb9x/rb0m_cl_ind_mat_appl=>get_instance( IMPORTING eo_instance = lo_ind_mat_appl ).
*
*      TRY.
*          lt_reflist_res = lo_ind_mat_appl->get_preflist_4_trmc_matgr_clas( is_preflist_searchsel = ls_src_selection ).
*        CATCH /rb9x/cx_rb0m_ind_ex_system.
*          CLEAR lt_reflist_res. " VF CP
*      ENDTRY.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Material status & Material type validation
*    " ----------------------------------------------------------------------
*    " Get material status
*    " TODO: variable is assigned but never used (ABAP cleaner)
*    DATA lrt_mat_stat TYPE RANGE OF marc-mmsta.
*    CLEAR lrt_mat_stat.
*
*    DATA(lv_plant) = gt_requestheader[ 1 ]-plant.
*    DATA(lv_product_type) = gt_requestheader[ 1 ]-product_type.
*    DATA(lv_request_type) = gt_requestheader[ 1 ]-req_type.
*    DATA(lv_longvl) = |%{ lv_plant }%|.
*    SELECT 'I'   AS sign,
*           'EQ'  AS option,
*           value AS low
*      FROM /rb4r/mm_bscst
*      INTO CORRESPONDING FIELDS OF TABLE @lrt_mat_stat
*      WHERE vari = 'GINA_MAT_STATUS'
*        AND ( longvalue LIKE @lv_longvl OR longvalue = @space ).
*
*    " Get material type
*    " TODO: variable is assigned but never used (ABAP cleaner)
*    DATA lrt_mat_type TYPE RANGE OF mara-mtart.
*    CLEAR lrt_mat_type.
*    SELECT 'I'   AS sign,
*           'EQ'  AS option,
*           value AS low
*      FROM /rb4r/mm_bscst
*      INTO CORRESPONDING FIELDS OF TABLE @lrt_mat_type
*      WHERE vari = 'GINA_MAT_TYPE'.
*
*    " Get material type WP2
*    " TODO: variable is assigned but never used (ABAP cleaner)
*    DATA lrt_mat_type_wp2 TYPE RANGE OF mara-mtart.
*    CLEAR lrt_mat_type.
*    SELECT 'I'   AS sign,
*           'EQ'  AS option,
*           value AS low
*      FROM /rb4r/mm_bscst
*      INTO CORRESPONDING FIELDS OF TABLE @lrt_mat_type_wp2
*      WHERE vari = 'GINA_MAT_TYPE_WP2'.
*
*    IF lv_request_type = 'C'.  " Only mode Create will create material view
*      SELECT plant,
*             product_type,
*             material_type
*        FROM /rb4r/mm_hview
*        " TODO: variable is assigned but never used (ABAP cleaner)
*        INTO TABLE @DATA(lt_hview)
*        WHERE plant        = @lv_plant
*          AND product_type = @lv_product_type.
*    ENDIF.
*
*    " ----------------------------------------------------------------------
*    " Start validation
*    " ----------------------------------------------------------------------
*    DATA(lt_requestitem_tmp) = gt_requestitem. " For duplicated record check
*    LOOP AT gt_requestitem ASSIGNING FIELD-SYMBOL(<ls_materialvalidation>).
*      " ----------------------------------------------------------------------
*      " Check if the same record is entered
*      " ----------------------------------------------------------------------
*      LOOP AT lt_requestitem_tmp INTO DATA(ls_validmaterial)
*           WHERE requestitem <> <ls_materialvalidation>-requestitem.
*        IF NOT (     ls_validmaterial-materialno     = <ls_materialvalidation>-materialno
*                 AND ls_validmaterial-creditornumber = <ls_materialvalidation>-creditornumber
*                 AND ls_validmaterial-purchorg       = <ls_materialvalidation>-purchorg ).
*          CONTINUE.
*        ENDIF.
*
*        APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*
*        APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                        %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                            number   = '023'
*                                            v1       = ls_validmaterial-requestitem
*                                            severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                        %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                            number   = '011'
*                                            v1       = ls_validmaterial-materialno
*                                            v2       = ls_validmaterial-creditornumber
*                                            v3       = ls_validmaterial-purchorg
*                                            v4       = ls_validmaterial-werks
*                                            severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*      ENDLOOP.
*
*      " ----------------------------------------------------------------------
*      " Creditor validation
*      " ----------------------------------------------------------------------
*      READ TABLE lt_creditor INTO DATA(ls_creditor) BINARY SEARCH
*           WITH KEY creditornumber = <ls_materialvalidation>-creditornumber.
*      IF sy-subrc = 0.
*        IF ls_creditor-lfa1_block IS NOT INITIAL.
*          "<ls_materialvalidation>-creditornumber_s = abap_false.
*          " Supplier is blocked at purchasing level'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '002'
*                                              v1       = <ls_materialvalidation>-creditornumber
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ENDIF.
*
*        IF ls_creditor-lfa1_delete IS NOT INITIAL.
*          "<ls_materialvalidation>-creditornumber_s = abap_false.
*          " Supplier is marked as deleted'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '003'
*                                              v1       = <ls_materialvalidation>-creditornumber
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ENDIF.
*
*        READ TABLE lt_lfm1 INTO DATA(ls_lfm1) BINARY SEARCH
*             WITH KEY creditornumber = <ls_materialvalidation>-creditornumber
*                      purchorg       = <ls_materialvalidation>-purchorg.
*        IF sy-subrc = 0.
*          IF ls_lfm1-lfm1_block IS NOT INITIAL.
*            "<ls_materialvalidation>-creditornumber_s = abap_false.
*            " Supplier is blocked at purchasing organization level'.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                            %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                                number   = '004'
*                                                v1       = <ls_materialvalidation>-creditornumber
*                                                severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*          ENDIF.
*
*          IF ls_lfm1-lfm1_delete IS NOT INITIAL.
*            " <ls_materialvalidation>-creditornumber_s = abap_false.
*            " Supplier is marked as deleted at purchasing level'.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                            %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                                number   = '005'
*                                                v1       = <ls_materialvalidation>-purchorg
*                                                severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*          ENDIF.
*        ELSE.
*          "<ls_materialvalidation>-creditornumber_s = abap_false.
*          " Vendor &1 is not assigned to purchasing org. &2'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '031'
*                                              v1       = <ls_materialvalidation>-purchorg
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ENDIF.
*
*        READ TABLE lt_lfm2 INTO DATA(ls_lfm2) BINARY SEARCH
*             WITH KEY creditornumber = <ls_materialvalidation>-creditornumber
*                      purchorg       = <ls_materialvalidation>-purchorg
*                      plant          = <ls_materialvalidation>-werks.
*        IF sy-subrc = 0.
*          IF ls_lfm2-lfm2_block IS NOT INITIAL.
*            "<ls_materialvalidation>-creditornumber_s = abap_false.
*            " Supplier is blocked at purchasing organization level'.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                            %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                                number   = '006'
*                                                v1       = <ls_materialvalidation>-creditornumber
*                                                v2       = <ls_materialvalidation>-purchorg
*                                                v3       = <ls_materialvalidation>-werks
*                                                severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*          ENDIF.
*
*          IF ls_lfm2-lfm2_delete IS NOT INITIAL.
*            "<ls_materialvalidation>-creditornumber_s = abap_false.
*            " Supplier is marked as deleted at purchasing level'.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                            %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                                number   = '007'
*                                                v1       = <ls_materialvalidation>-creditornumber
*                                                v2       = <ls_materialvalidation>-purchorg
*                                                v3       = <ls_materialvalidation>-werks
*                                                severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*          ENDIF.
*        ENDIF.
*      ELSE.
*        " Supplier does not exist'.
*        APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*        APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                        %element-creditornumber = if_abap_behv=>mk-on
*                        %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                            number   = '001'
*                                            v1       = <ls_materialvalidation>-creditornumber
*                                            severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*      ENDIF.
*
************************************************************************
** Inforecord validation
************************************************************************
*      READ TABLE lt_eina INTO DATA(ls_eina) BINARY SEARCH
*                          WITH KEY inforecord = <ls_materialvalidation>-inforecord.
*      IF sy-subrc = 0.
*        IF ls_eina-eina_delete IS NOT INITIAL.
*          "<ls_materialvalidation>-inforecord_s = abap_false.
**             Inforecord is marked as deleted'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '008'
*                                              v1       = <ls_materialvalidation>-inforecord
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ENDIF.
*
*        READ TABLE lt_eine INTO DATA(ls_eine) BINARY SEARCH
*                            WITH KEY inforecord = <ls_materialvalidation>-inforecord
*                                     purchorg = <ls_materialvalidation>-purchorg
*                                     plant = <ls_materialvalidation>-werks.
*        IF sy-subrc = 0.
*          IF ls_eine-eine_delete IS NOT INITIAL.
*            "<ls_materialvalidation>-inforecord_s = abap_false.
**               Inforecord is marked as deleted at purchasing level'.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*            APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                            %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                                number   = '009'
*                                                v1       = <ls_materialvalidation>-inforecord
*                                                v2 = <ls_materialvalidation>-purchorg
*                                                v3 = <ls_materialvalidation>-werks
*                                                severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*          ENDIF.
*        ENDIF.
*      ELSE.
*        IF lv_request_type = 'U' AND <ls_materialvalidation>-inforecord IS NOT INITIAL.
*          "<ls_materialvalidation>-inforecord_s = abap_false.
**             Inforecord &1 does not exist'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '017'
*                                              v1       = <ls_materialvalidation>-inforecord
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ENDIF.
*      ENDIF.
*
**     Check duplicate inforecord
*      READ TABLE lt_infor_dup INTO DATA(ls_infor_dup) BINARY SEARCH
*                               WITH KEY materialno = <ls_materialvalidation>-materialno
*                                        creditornumber = <ls_materialvalidation>-creditornumber
*                                        plant = <ls_materialvalidation>-werks
*                                        purchorg = <ls_materialvalidation>-purchorg.
*      IF sy-subrc = 0.
*        "<ls_materialvalidation>-inforecorddup_s = abap_false.
*
*        IF ls_infor_dup-eina_delete = abap_true OR "Inforecord exists but marked as deleted
*          ls_infor_dup-eine_delete = abap_true.
**           Inforecord &1 is existing and blocked/set for deletion'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '013'
*                                              v1       = <ls_materialvalidation>-inforecord
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ELSE.
**           Inforecord is duplicate with'.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '010'
*                                              v1       = <ls_materialvalidation>-inforecord
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*          APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                          %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                              number   = '011'
*                                              v1       = <ls_materialvalidation>-materialno
*                                              v2 = <ls_materialvalidation>-creditornumber
*                                              v3 = <ls_materialvalidation>-purchorg
*                                              v4 = <ls_materialvalidation>-werks
*                                              severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*        ENDIF.
*      ENDIF.
*
**     Check inforecord existed -> Order UOM should be the same
*      LOOP AT lt_infor_dup INTO ls_infor_dup WHERE materialno = <ls_materialvalidation>-materialno
*                                               AND creditornumber = <ls_materialvalidation>-creditornumber
*                                               AND plant = <ls_materialvalidation>-werks.
*        IF ls_infor_dup-eina_delete = abap_true OR "Inforecord exists but marked as deleted
*          ls_infor_dup-eine_delete = abap_true.
*        ELSE.
*          IF ls_infor_dup-orderuom IS NOT INITIAL AND
*             ls_infor_dup-orderuom <> <ls_materialvalidation>-orderuom.
*            "<ls_materialvalidation>-orderuom_s = abap_false.
*
*            DATA lv_meins_char TYPE char5.
*            DATA lv_meins TYPE meins.
**           <ls_materialvalidation>-orderuom_m = 'Order UoM should be &1 the same with IR &2 &3 &4'.
*            CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
*              EXPORTING
*                input          = ls_infor_dup-orderuom
*              IMPORTING
*                output         = lv_meins
*              EXCEPTIONS
*                unit_not_found = 1
*                OTHERS         = 2.
*            IF sy-subrc = 0.
*              lv_meins_char = lv_meins.
*              CONDENSE lv_meins_char.
*              CLEAR lv_meins.
*
*              APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }| ) TO ct_failed-requestitem.
*              APPEND VALUE #( %key = |{ ls_validmaterial-requestno }{ ls_validmaterial-requestitem }|
*                              %msg = new_message( id       = '/RB4R/MM_GMMC_MSGS'
*                                                  number   = '014'
*                                                  v1       = lv_meins_char
*                                                  v2 = ls_infor_dup-inforecord
*                                                  v3 =    ls_infor_dup-plant
*                                                  v4 =    ls_infor_dup-purchorg
*                                                  severity = if_abap_behv_message=>severity-error ) ) TO ct_reported-requestitem.
*
*              EXIT. " Exit from this loop as error already occured
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDLOOP.
*    ENDLOOP.




**********************************************************************

*Hoa End

**********************************************************************
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~create.

    gt_requestheader = VALUE #( FOR ls_entities IN it_entities ( requestno             = ls_entities-requestnumber
                                                                 createdby             = COND sww_objid( WHEN ls_entities-createdby IS NOT INITIAL
                                                                                                         THEN ls_entities-createdby
                                                                                                         ELSE sy-uname )
                                                                 createddate           = COND sydats( WHEN ls_entities-createdon IS NOT INITIAL
                                                                                                         THEN ls_entities-createdon
                                                                                                         ELSE sy-datum )
                                                                 plant                 = ls_entities-plant
                                                                 status                = ls_entities-status
                                                                 description           = ls_entities-description
                                                                 systemid              = sy-sysid "ls_entities-SystemID
                                                                 workitemid            = ls_entities-workitemid
                                                                 product_type          = ls_entities-producttype
                                                                 req_type              = ls_entities-requesttype
                                                                 action                = ls_entities-action
                                                                 local_last_changed_at = sy-datum
                                                                 local_last_changed_on = sy-uzeit
                              ) ).

    LOOP AT it_entities ASSIGNING FIELD-SYMBOL(<ls_entities>).
      ct_mapped = VALUE #( ( %cid      = <ls_entities>-%cid
                             %key      = <ls_entities>-%key
                             %is_draft = <ls_entities>-%is_draft
                           )
                         ).

    ENDLOOP.
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~delete.



**********************************************************************
*Hoa Comment for Indira check

**********************************************************************


*    DATA: lt_request_del TYPE STANDARD TABLE OF /rb4r/mm_request.
*
*    SELECT  mandt ,
*          requestno ,
*          systemid    ,
*          plant        ,
*          createdby           ,
*          createddate         ,
*          status           ,
*          workitemid        ,
*          req_type           ,
*          description          ,
*          action          ,
*          product_type          ,
*          attachment           ,
*          mimetype             ,
*          filename              ,
*          local_last_changed_at ,
*          local_last_changed_on
*  FROM  /rb4r/mm_request
*    INTO TABLE @DATA(lt_requesthead)
*     FOR ALL ENTRIES IN @it_keys
*    WHERE requestno = @it_keys-RequestNumber.
*    IF sy-subrc = 0.
*      gt_requestheader_del = lt_requesthead.
*    ENDIF.

  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~duplicatecheck.

  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~earlynumbering_cba_comment.

    DATA: lv_timestamp TYPE timestamp.
*   Generate timesttamp from system
    GET TIME STAMP FIELD lv_timestamp.
*    Update timestamp into entity
    LOOP AT it_entities ASSIGNING FIELD-SYMBOL(<ls_header_entity>) .
      LOOP AT <ls_header_entity>-%target ASSIGNING FIELD-SYMBOL(<ls_item_entity>).
        ct_mapped-comment = VALUE #( ( %cid          = <ls_item_entity>-%cid
                                       %is_draft     = <ls_item_entity>-%is_draft
                                       %key          = <ls_item_entity>-%key
                                       requestnumber = <ls_header_entity>-requestnumber
                                       createdon     = lv_timestamp
                                       createdby     = sy-uname

                                     ) ).
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~earlynumbering_cba_requestitem.
    DATA: lv_max_requestitem TYPE /rb4r/mm_requestitem,
          lv_new_requestitem TYPE /rb4r/mm_requestitem.

    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestheader BY \_requestitem
    FROM CORRESPONDING #( it_entities )
    LINK DATA(lt_requestitem).


    LOOP AT it_entities ASSIGNING FIELD-SYMBOL(<ls_group_entity>) GROUP BY <ls_group_entity>-requestnumber.
      lv_max_requestitem = REDUCE #( INIT lv_max = lv_max_requestitem
                                  FOR ls_entity IN lt_requestitem USING KEY entity
                                      WHERE (  source-requestnumber = <ls_group_entity>-requestnumber  )
                                      NEXT lv_max = COND /rb4r/mm_requestitem(  WHEN lv_max < ls_entity-target-requestitem
                                                                                THEN  ls_entity-target-requestitem
                                                                                ELSE  lv_max )
                                    ).
      CONDENSE lv_max_requestitem.

    ENDLOOP.

    lv_new_requestitem = lv_max_requestitem + 1.
    SHIFT lv_new_requestitem LEFT DELETING LEADING space.
    DATA: lt_itemmap  LIKE ct_mapped-requestitem.

    LOOP AT it_entities ASSIGNING FIELD-SYMBOL(<ls_header_entity>) .
      LOOP AT <ls_header_entity>-%target ASSIGNING FIELD-SYMBOL(<ls_item_entity>).
        lt_itemmap = VALUE #( ( %cid          = <ls_item_entity>-%cid
                                %is_draft     = <ls_item_entity>-%is_draft
                                %key          = <ls_item_entity>-%key
                                requestnumber = <ls_header_entity>-requestnumber
                                requestitem   = lv_new_requestitem
                              ) ).
        APPEND LINES OF lt_itemmap TO ct_mapped-requestitem .
        ADD 1 TO lv_new_requestitem.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~early_numbering_create.
    TRY.
        cl_numberrange_runtime=>number_get(
          EXPORTING
            nr_range_nr       = '01'
            object            = '/RB4R/YREQ'
          IMPORTING
            number            = DATA(lv_key)
            returncode        = DATA(lv_return_code)
            returned_quantity = DATA(lv_)
        ).
      CATCH cx_number_ranges INTO DATA(lx_number_ranges).
        ASSERT 1 = 2.
    ENDTRY.

    ct_mapped = VALUE #(
                        FOR ls_entities IN it_entities
                        (
                        %cid          = ls_entities-%cid
                        %is_draft     = ls_entities-%is_draft
                        requestnumber = lv_key + 1

                        )
    ).
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~rba_requestitem.

    DATA:
      lt_rqhead  TYPE TABLE OF /rb4r/mm_i_gmmc_requestheader,
      ls_rqhead  LIKE LINE OF lt_rqhead,
      lt_item    TYPE TABLE OF /rb4r/mm_i_gmmc_requestitem,
      ls_item    LIKE LINE OF lt_item,
      ls_asslink LIKE LINE OF ct_association_links.

    IF it_keys_rba IS NOT INITIAL.

      SELECT * FROM /rb4r/mm_rqitem           "#EC CI_ALL_FIELDS_NEEDED
      INTO TABLE @DATA(lt_reqitem)
      FOR ALL ENTRIES IN @it_keys_rba
      WHERE requestno = @it_keys_rba-requestnumber.
      IF sy-subrc = 0.
        SORT lt_reqitem BY requestno ASCENDING.
      ENDIF.

    ENDIF.

    LOOP AT it_keys_rba ASSIGNING FIELD-SYMBOL(<ls_keys>) GROUP BY <ls_keys>-requestnumber.

      LOOP AT lt_reqitem ASSIGNING FIELD-SYMBOL(<ls_item>) WHERE requestno = <ls_keys>-requestnumber.

*        Fill Link table with key fields
        ls_asslink-source-%tky = <ls_keys>-%tky.
        ls_asslink-target-requestnumber = <ls_item>-requestno.
        ls_asslink-target-requestitem   = <ls_item>-requestitem.
        INSERT ls_asslink INTO TABLE ct_association_links.

        IF iv_result_requested = abap_true.
          APPEND CORRESPONDING #( <ls_item> MAPPING TO ENTITY  ) TO ct_result.
        ENDIF.

      ENDLOOP.

    ENDLOOP.

    SORT ct_association_links BY target ASCENDING.
    DELETE ADJACENT DUPLICATES FROM ct_association_links COMPARING ALL FIELDS.

    SORT ct_result BY %tky ASCENDING.
    DELETE ADJACENT DUPLICATES FROM ct_result COMPARING ALL FIELDS.
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~read.
    IF it_keys IS NOT INITIAL.
      SELECT requestnumber,
             systemid,
             plant,
             createdby,
             createdon,
             status,
             workitemid,
             description,
             requesttype,
             action,
             producttype,
             lastchangedat
      FROM /rb4r/mm_i_gmmc_requestheader
      INTO  TABLE @DATA(lt_requesthead)
      FOR ALL ENTRIES IN @it_keys
       WHERE requestnumber = @it_keys-requestnumber.

      IF sy-subrc = 0.
        ct_result = CORRESPONDING #( lt_requesthead ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~save.
    TYPES: ty_actlog  TYPE /rb4r/mm_actlog,
           zty_actlog TYPE STANDARD TABLE OF ty_actlog WITH EMPTY KEY.
    DATA: lt_actlog TYPE STANDARD TABLE OF /rb4r/mm_actlog.

    IF gt_requestheader_del IS NOT INITIAL.
      DELETE /rb4r/mm_request FROM TABLE gt_requestheader_del. "#EC CI_SUBRC
    ENDIF.
    IF gt_requestheader IS NOT INITIAL.
      MODIFY /rb4r/mm_request FROM TABLE @gt_requestheader. "#EC CI_SUBRC
      " Update User Action Log

      DATA(lt_requestheader) = VALUE #( BASE gt_requestheader FOR <fs_reqhead> IN gt_requestheader
                                        ( CORRESPONDING #( <fs_reqhead> ) ) ).
      GET TIME STAMP FIELD DATA(lv_time).
      DATA(lt_actlog0) = VALUE zty_actlog( FOR ls_req IN lt_requestheader
                                           ( mandt         = sy-mandt
                                             requestno     = ls_req-requestno
                                             requestitem   = '0'
                                             timestamp     = lv_time
                                             step          = COND /rb4r/mm_step( WHEN                                               ls_req-status = '006'
                                                                                 THEN '5'
                                                                                 ELSE '0' )
                                             actiontype    = COND /rb4r/mm_actiontype( WHEN                                         ls_req-status = '006'
                                                                                 THEN '7'
                                                                                 ELSE '0' )
                                             actionby      = COND uname( WHEN line_exists( gt_requestheader[ requestno = ls_req-requestno ] )
                                                                                 AND gt_requestheader[                              requestno     = ls_req-requestno ]-createdby = sy-uname
                                                                                 THEN sy-uname
                                                                                 ELSE '' )
                                             actionbyproxy = COND uname( WHEN line_exists( gt_requestheader[ requestno = ls_req-requestno ] )
                                                                                 AND gt_requestheader[                              requestno     = ls_req-requestno ]-createdby = sy-uname
                                                                                 THEN ''
                                                                                 ELSE sy-uname )
                                             forwardto     = ''
                            ) ).
      lt_actlog = VALUE #( FOR ls_actlog IN lt_actlog0 WHERE ( step <> '0' AND actiontype <> '0' )
                         ( CORRESPONDING #( ls_actlog ) ) ).
      IF lines( lt_actlog ) > 0.
        MODIFY /rb4r/mm_actlog FROM TABLE lt_actlog .     "#EC CI_SUBRC
      ENDIF.


    ENDIF.
    IF gt_requestitem_del IS NOT INITIAL.
      DELETE /rb4r/mm_rqitem FROM TABLE gt_requestitem_del. "#EC CI_SUBRC
    ENDIF.
    IF  gt_requestitem IS NOT INITIAL.
      MODIFY /rb4r/mm_rqitem FROM TABLE @gt_requestitem.  "#EC CI_SUBRC

    ENDIF.
    IF gt_comment_del IS NOT INITIAL.
      DELETE /rb4r/mm_cmmnt FROM TABLE gt_comment_del.    "#EC CI_SUBRC
    ENDIF.
    IF gt_comment IS NOT INITIAL.
      MODIFY /rb4r/mm_cmmnt FROM TABLE @gt_comment.       "#EC CI_SUBRC
    ENDIF.
    " This table can be handle from Request Item
    IF gt_matsclprice_del IS NOT INITIAL.
      DELETE /rb4r/mm_rqscl FROM TABLE gt_matsclprice_del. "#EC CI_SUBRC
    ENDIF.
    IF  gt_matsclprice IS NOT INITIAL.
      MODIFY /rb4r/mm_rqscl FROM TABLE @gt_matsclprice.   "#EC CI_SUBRC
    ENDIF.

    IF gt_potext IS NOT INITIAL.
      MODIFY /rb4r/mm_potxt FROM TABLE gt_potext.         "#EC CI_SUBRC
    ENDIF.

    IF gt_potext_del IS NOT INITIAL.
      DELETE /rb4r/mm_potxt FROM TABLE gt_potext_del.     "#EC CI_SUBRC
    ENDIF.

    IF gt_equipmentbom_del IS NOT INITIAL.
      DELETE /rb4r/mm_eq_bm FROM TABLE gt_equipmentbom_del. "#EC CI_SUBRC
    ENDIF.
    IF gt_documentlist IS NOT INITIAL.
      MODIFY /rb4r/mm_docls FROM TABLE gt_documentlist.   "#EC CI_SUBRC
    ENDIF.

    IF gt_equipmentbom IS NOT INITIAL.
      MODIFY /rb4r/mm_eq_bm FROM TABLE gt_equipmentbom.   "#EC CI_SUBRC
    ENDIF.

    IF gt_schedulingag_del IS NOT INITIAL.
      DELETE /rb4r/mm_sag FROM TABLE gt_schedulingag_del. "#EC CI_SUBRC
    ENDIF.
    IF gt_schedulingag IS NOT INITIAL.
      MODIFY /rb4r/mm_sag FROM TABLE gt_schedulingag.     "#EC CI_SUBRC
    ENDIF.

    IF gt_sourcelist IS NOT INITIAL.
      MODIFY /rb4r/mm_srcls FROM TABLE gt_sourcelist.     "#EC CI_SUBRC
    ENDIF.

    IF gt_sourcelist_del IS NOT INITIAL.
      DELETE /rb4r/mm_srcls FROM TABLE gt_sourcelist_del. "#EC CI_SUBRC
    ENDIF.

    IF gt_useractlog IS NOT INITIAL.
      IF 1 = 2.
        MODIFY /rb4r/mm_actlog FROM TABLE gt_useractlog.  "#EC CI_SUBRC
      ENDIF.
    ENDIF.

    IF gt_useractlog_del IS NOT INITIAL.
      DELETE /rb4r/mm_actlog FROM TABLE gt_useractlog_del. "#EC CI_SUBRC
    ENDIF.

  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~update.
    DATA: lt_request_up TYPE STANDARD TABLE OF /rb4r/mm_request.
    DATA: lt_request_up_x TYPE STANDARD TABLE OF /rb4r/mm_s_gmmc_requestheader.

*    lt_request_up = CORRESPONDING #( entities MAPPING FROM ENTITY USING CONTROL  ).
    lt_request_up = VALUE #( FOR ls_entities IN entities ( requestno    = ls_entities-requestnumber
                                                           systemid     = ls_entities-systemid
                                                           plant        = ls_entities-plant
                                                           createdby    = ls_entities-createdby
                                                           createddate  = ls_entities-createdon
                                                           status       = ls_entities-status
                                                           workitemid   = ls_entities-workitemid
                                                           description  = ls_entities-description
                                                           req_type     = ls_entities-requesttype
                                                           action       = ls_entities-action
                                                           product_type = ls_entities-producttype

                             ) ).
    lt_request_up_x = CORRESPONDING #( entities MAPPING FROM ENTITY USING CONTROL   ).

    IF NOT lt_request_up IS INITIAL.
      SELECT * FROM /rb4r/mm_request
       FOR ALL ENTRIES IN @lt_request_up
       WHERE requestno = @lt_request_up-requestno
       INTO TABLE @DATA(lt_request_old).
      IF sy-subrc = 0.
        SORT lt_request_old BY requestno ASCENDING.
      ENDIF.
    ENDIF.

    gt_requestheader = VALUE #(

                                FOR x               = 1 WHILE x <= lines( lt_request_up )
                                LET
                                    ls_control_flag = VALUE #( lt_request_up_x[ x ] OPTIONAL )
                                    ls_request_new  = VALUE #( lt_request_up[ x ] OPTIONAL )
                                    ls_request_old  = VALUE #( lt_request_old[ requestno             = ls_request_new-requestno ] OPTIONAL )
                                IN
     (
                                                                               requestno             = ls_request_new-requestno
                                                                               systemid              = COND #( WHEN ls_control_flag-systemid IS NOT INITIAL THEN ls_request_new-systemid ELSE ls_request_old-systemid )
                                                                               plant                 = COND #( WHEN ls_control_flag-plant IS NOT INITIAL THEN ls_request_new-plant ELSE ls_request_old-plant )
                                                                               createdby             = COND #( WHEN ls_control_flag-createdby IS NOT INITIAL THEN ls_request_new-createdby ELSE ls_request_old-createdby )
                                                                               createddate           = COND #( WHEN ls_control_flag-createddate IS NOT INITIAL THEN ls_request_new-createddate ELSE ls_request_old-createddate )
                                                                               status                = COND /rb4r/mm_de_req_status( WHEN ls_control_flag-status IS NOT INITIAL AND ls_request_new-status <> '014'
                                                                                                               THEN ls_request_new-status
                                                                                                               WHEN ls_control_flag-status IS NOT INITIAL AND ls_request_new-status = '014'
                                                                                                               THEN '006'
                                                                                                               ELSE ls_request_old-status )
                                                                               workitemid            = COND #( WHEN ls_control_flag-workitemid IS NOT INITIAL THEN ls_request_new-workitemid ELSE ls_request_old-workitemid )
                                                                               req_type              = COND #( WHEN ls_control_flag-req_type IS NOT INITIAL THEN ls_request_new-req_type ELSE ls_request_old-req_type )
                                                                               description           = COND #( WHEN ls_control_flag-description IS NOT INITIAL THEN ls_request_new-description ELSE ls_request_old-description )
                                                                               action                = COND #( WHEN ls_control_flag-action IS NOT INITIAL THEN ls_request_new-action ELSE ls_request_old-action )
                                                                               product_type          = COND #( WHEN ls_control_flag-product_type IS NOT INITIAL THEN ls_request_new-product_type ELSE ls_request_old-product_type )
                                                                               local_last_changed_at = sy-datum
                                                                               local_last_changed_on = sy-uzeit
     )
    ).



  ENDMETHOD.


  METHOD /rb4r/if_mm_gmmc_reqhead~uploaditemsbyexcel.

    DATA : lv_xlsx_data TYPE xstring .
    DATA: lt_content TYPE STANDARD TABLE OF  char2048,
          lv_len     TYPE i.
    DATA: ls_header TYPE /rb4r/mm_i_gmmc_requestheader.

    DATA lv_sheet_data TYPE xstring.
    DATA lv_shared_data TYPE xstring.
    CONSTANTS co_sheet_xml TYPE i VALUE 2.
    CONSTANTS co_shared_str_xml TYPE i VALUE 3.

* 1 Read header to get attachement from excel upload file

    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestheader
    ALL FIELDS WITH VALUE #( ( %key-requestnumber = iv_requestnumber %is_draft = if_abap_behv=>mk-on ) )
    RESULT DATA(lt_header).

    DATA(lv_attachment) = lt_header[ 1 ]-attachment.
    IF lv_attachment = space.
      RETURN.
    ENDIF.

    ls_header = CORRESPONDING #( lt_header[ 1 ] ).

* 2. Get content from excel upload file with Binary table format

    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        buffer          = lv_attachment
        append_to_table = abap_true
      IMPORTING
        output_length   = lv_len
      TABLES
        binary_tab      = lt_content.



* 3. Get XString value from  Binary table content
    CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
      EXPORTING
        input_length = lv_len
      IMPORTING
        buffer       = lv_xlsx_data
      TABLES
        binary_tab   = lt_content
      EXCEPTIONS
        failed       = 1
        OTHERS       = 2.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    load_package( iv_file_data = lv_xlsx_data ).

    "Read the sheet XML
    lv_sheet_data = load_xml_data( co_sheet_xml ).

    "Read the shared string XML
    lv_shared_data = load_xml_data( co_shared_str_xml ).

    IF ls_header-status <> '006'.

      transform_xml_to_abap(
        EXPORTING
          iv_sheet_data  = lv_sheet_data
          iv_shared_data = lv_shared_data
          iv_requesttype = lt_header[ 1 ]-requesttype
        IMPORTING
          et_data        = DATA(lt_excel_data)
          et_data2       = DATA(lt_excel_data2)
          et_data2up     = DATA(lt_excel_data2up)
          et_data3       = DATA(lt_excel_data3)
          et_scales      = DATA(lt_excel_scales)
      ).

      reset_item_before_upload(
        iv_is_draft      = iv_is_draft
        iv_requestnumber = iv_requestnumber
      ).

      CASE lt_header[ 1 ]-requesttype.
        WHEN  gc_createmat. " Type 'C'
          store_the_data_to_entities_a1(
            EXPORTING
              it_data          = lt_excel_data
              it_scales        = lt_excel_scales
              iv_is_draft      = iv_is_draft
              iv_requestnumber = iv_requestnumber
              is_header        = ls_header
            CHANGING
              ct_reportrp      = ct_reported
          ).
        WHEN gc_createir. " Type 'N'
          store_the_data_to_entities_a2(
            EXPORTING
              it_data          = lt_excel_data2
              it_scales        = lt_excel_scales
              iv_is_draft      = iv_is_draft
              iv_requestnumber = iv_requestnumber
              is_header        = ls_header
            CHANGING
              ct_reportrp      = ct_reported
          ).
        WHEN gc_updateir. " Type 'U'
          store_the_data_to_entities_a2u(
            EXPORTING
              it_data          = lt_excel_data2up
              it_scales        = lt_excel_scales
              iv_is_draft      = iv_is_draft
              iv_requestnumber = iv_requestnumber
              is_header        = ls_header
            CHANGING
              ct_reportrp      = ct_reported
          ).
        WHEN gc_createwop. " Type 'W'
          store_the_data_to_entities_a3(
            EXPORTING
              it_data          = lt_excel_data3
              iv_is_draft      = iv_is_draft
              iv_requestnumber = iv_requestnumber
              is_header        = ls_header
            CHANGING
              ct_reportrp      = ct_reported
          ).
      ENDCASE.

    ELSE.
      transform_xml_to_abap(
        EXPORTING
          iv_sheet_data  = lv_sheet_data
          iv_shared_data = lv_shared_data
          iv_requesttype = lt_header[ 1 ]-requesttype
          iv_purchase    = 'X'
        IMPORTING
          et_datapur     = DATA(lt_excel_datapur)
          et_scales      = lt_excel_scales
      ).

      store_the_data_to_update_pur(
        EXPORTING
          it_data          = lt_excel_datapur
          it_scales        = lt_excel_scales
          iv_is_draft      = iv_is_draft
          iv_requestnumber = iv_requestnumber
          is_header        = ls_header
        CHANGING
          ct_reportrp      = ct_reported
      ).
    ENDIF.

  ENDMETHOD.


  METHOD get_instance.
    IF mo_instance IS NOT BOUND.
      mo_instance = NEW /rb4r/cl_mm_gmmc_reqhead(  ).
    ENDIF.
    mo_key_store  = /rb4r/cl_mm_gmmc_key_store=>get_instance(  ).
    ro_instance = mo_instance.


  ENDMETHOD.


  METHOD if_message~get_longtext.

  ENDMETHOD.


  METHOD if_message~get_text.

  ENDMETHOD.


  METHOD if_oo_adt_classrun~main.

*
*    DATA: lv_attachment TYPE  /rb4r/mm_attachment.
*
*    DATA:
*      lv_content TYPE xstring,
*      lo_zip     TYPE REF TO cl_abap_zip.
*
*
*
**  TYPES: BEGIN OF ty_excel,
**             entrysheet TYPE string, "lblni,
**             ebeln      TYPE string, "ebeln,
**             ebelp      TYPE string, "ebelp,
**             ext_number TYPE string, "lblne1,
**             begdate    TYPE string, "lzvon,
**             enddate    TYPE string, "lzbis,
**             quantity   TYPE string, "mengev,
**             fin_entry  TYPE string, "final,
**           END OF ty_excel,
**           tt_row TYPE STANDARD TABLE OF ty_excel.
**
*    DATA: it_soli     TYPE soli_tab,
*          ls_soli     LIKE LINE OF it_soli,
*          iv_codepage TYPE abap_encod,
*          lv_xstring  TYPE xstring,
*          iv_add_bom  TYPE os_boolean.
*    SELECT SINGLE attachment FROM  /rb4r/mm_drequst INTO lv_attachment WHERE requestnumber = '325' .
*
*    ls_soli-line = lv_attachment.
*    APPEND ls_soli TO it_soli.
*    TRY.
*        cl_bcs_convert=>raw_to_xstring(
*          EXPORTING
*            it_soli     = it_soli
*            iv_codepage = 'UTF-8'
**       iv_add_bom  =
*          RECEIVING
*            ev_xstring  = lv_xstring
*        ).
*      CATCH cx_bcs.
*    ENDTRY.
*    lv_content = lv_xstring.
**     Create zip class instance
*    lo_zip = NEW cl_abap_zip(  ).
*
*
**     Search for main document part
*    DATA lv_index TYPE string VALUE 'word/document.xml'.
*
**     Load attachment into zip class object
*    lo_zip->load( zip = lv_content check_header = abap_false ).
*
**     Fetch the binaries of the XML part in the attachment
*    lo_zip->get(
*    EXPORTING
*      name   = lv_index
*    IMPORTING
*      content = lv_content
*    ).
*    DATA(lo_xlsx) = xco_cp_xlsx=>document->for_file_content( iv_file_content = lv_xstring )->read_access( ).
*    DATA(lo_worksheet) = lo_xlsx->get_workbook( )->worksheet->at_position( 1 ).
*
*    DATA(lo_selection_pattern) = xco_cp_xlsx_selection=>pattern_builder->simple_from_to( )->get_pattern( ).
*
*    data(lo_execute) = lo_worksheet->select( lo_selection_pattern
*      )->row_stream(
*      )->operation->write_to( REF #( lt_rows ) ).
*
*     lo_execute->set_value_transformation( xco_cp_xlsx_read_access=>value_transformation->string_value
*                )->if_xco_xlsx_ra_operation~execute( ).
*

*    DATA: file_content TYPE  xstringval.
*    DATA: lv_filesize TYPE i,
*          lt_xls      TYPE solix_tab.
*
*    DATA: gt_content         TYPE STANDARD TABLE OF tdline,
*          len                TYPE i,
*          lt_data            TYPE soli_tab,
*          lv_binary          TYPE xstring,
*          lv_strcomp_counter TYPE i
*          .
*
*    DATA: lv_attachment TYPE  /rb4r/mm_attachment.
*    DATA: lv_xstring   TYPE xstring,
*          lv_length    TYPE i,
*          lv_colcount  TYPE i,
*          lv_string    TYPE string,
*          lt_dref      TYPE REF TO data,
*          lv_tableName TYPE tabname16 VALUE '/RB4R/MM_DREQUST',
*          ls_dref      TYPE REF TO data,
*          li_bin_tab   TYPE STANDARD TABLE OF x255.
*    FIELD-SYMBOLS: <lfs_dyntab>      TYPE STANDARD TABLE,
*                   <lfs_dyntab_line> TYPE any.
*
*    SELECT SINGLE attachment FROM  /rb4r/mm_drequst INTO lv_attachment WHERE requestnumber = '325' .
*    lv_xstring = lv_attachment.
*    DATA: lt_dataxml TYPE srt_xml_data_tab.

* DATA: l_string TYPE string,
*      l_xstring TYPE xstring,
*      lo_conv TYPE REF TO cl_abap_conv_in_ce,
*      lt_line TYPE TABLE OF string.
*
*  DATA: lv_rc TYPE i.
*        DATA: it_files TYPE filetable.
*        DATA: lv_action TYPE i.
*        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
*          EXPORTING
*            buffer        = lv_attachment
*            append_to_table = 'X'
*          IMPORTING
*            output_length = len
*          TABLES
*            binary_tab    = gt_content.
*LOOP AT gt_content INTO data(ls_content).
*
*data: lv_codepage type cpcodepage .
*lo_conv = cl_abap_conv_in_ce=>create( encoding = 'UTF-8' input = lv_xstring ).
*lo_conv->skip_x( n = 2 ). " skip BOM
* cl_bcs_convert=>xstring_to_string(
*   EXPORTING
*     iv_xstr   = lv_xstring
*     iv_cp     = '4110'
*   RECEIVING
*     rv_string = lv_string
* ).
*lo_conv->read( IMPORTING data = lv_string ).
*SPLIT lv_string AT cl_abap_char_utilities=>cr_lf INTO TABLE lt_line.
*lv_xstring = ls_content.
*lo_conv->convert(
*  EXPORTING
*    input           = lv_xstring
**    n               = -1
*   IMPORTING
*     data            = lv_string
**    len             =
**    input_too_short =
*).
*data: lt_content like gt_content.
*      APPEND ls_content to lt_content.
** Binary to String Conversion
*    CALL FUNCTION 'SCMS_BINARY_TO_STRING'
*      EXPORTING
*        input_length = 1024
*        encoding     = '4110'
*      IMPORTING
*        text_buffer  = lv_string
*      TABLES
*        binary_tab   = lt_content
*      EXCEPTIONS
*        failed       = 1
*        OTHERS       = 2.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
*    CLEAR: lt_content, ls_content,lv_string.
*ENDLOOP.
*
**CATCH cx_sy_conversion_codepage.
**CATCH cx_sy_codepage_converter_init.
**CATCH cx_parameter_invalid_type.
*
**    DATA : in_buffer  TYPE xstring,
**           out_buffer TYPE xstring,
**           conv       TYPE REF TO cl_abap_conv_x2x_ce,
**           str1       TYPE string VALUE '?',
**           x          TYPE xstring.
**
**    CONVERT TEXT str1 INTO SORTABLE CODE x.
**    WRITE: x, ' '.
**    CONVERT TEXT '-' INTO SORTABLE CODE x.
**    WRITE x.
**
**    in_buffer = '414220C3B602010000'.
**
**    conv = cl_abap_conv_x2x_ce=>create( in_encoding = 'UTF-8'
**    in_endian = 'L'
**    out_encoding = '4110'
**    out_endian = 'B'
**    input = lv_xstring ).
**
**    CALL METHOD conv->convert_c( n = 5 ).
**    out_buffer = conv->get_out_buffer( ).
**
**    WRITE out_buffer.
*
*
*    CALL FUNCTION 'SRTUTIL_CONVERT_XML_TO_TABLE'
*      EXPORTING
*        xdoc = lv_xstring
*      IMPORTING
*        data = lt_dataxml.
*    DATA: lt_xmltb  TYPE TABLE OF smum_xmltb,
*          lt_return TYPE TABLE OF bapiret2.
*
*    CALL FUNCTION 'SMUM_XML_PARSE'
*      EXPORTING
*        xml_input = lv_attachment
*      TABLES
*        xml_table = lt_xmltb
*        return    = lt_return.
*
** XString to Binary Conversion
*    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
*      EXPORTING
*        buffer        = lv_xstring
*      IMPORTING
*        output_length = lv_length
*      TABLES
*        binary_tab    = li_bin_tab.
*
** Binary to String Conversion
*    CALL FUNCTION 'SCMS_BINARY_TO_STRING'
*      EXPORTING
*        input_length = lv_length
*        encoding     = '4110'
*      IMPORTING
*        text_buffer  = lv_string
*      TABLES
*        binary_tab   = li_bin_tab
*      EXCEPTIONS
*        failed       = 1
*        OTHERS       = 2.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
** Format String to Readable format to Parse in Table
*    REPLACE ALL OCCURRENCES OF '{' IN lv_string WITH ''.
*    REPLACE ALL OCCURRENCES OF '}' IN lv_string WITH ''.
*    REPLACE ALL OCCURRENCES OF ':' IN lv_string WITH ''.
*    REPLACE ALL OCCURRENCES OF '[' IN lv_string WITH ''.
*    REPLACE ALL OCCURRENCES OF ']' IN lv_string WITH ''.
*    REPLACE ALL OCCURRENCES OF '"' IN lv_string WITH ''.
*    REPLACE ALL OCCURRENCES OF 'Content' IN lv_string WITH ''.
*
*    SPLIT lv_string AT ',' INTO TABLE DATA(li_values).
*    CREATE DATA lt_dref TYPE TABLE OF (lv_tableName).
*    CREATE DATA ls_dref TYPE (lv_tableName).
*
** Assign field symbol with table type of DDIC
*    ASSIGN lt_dref->* TO <lfs_dyntab>.
** Assign field symbol with Structure type of DDIC
*    ASSIGN ls_dref->* TO <lfs_dyntab_line>.
*
*
** Initialize Counter
*    lv_strcomp_counter = 1.
*
** Dynamically read the values and build internal table
*    LOOP AT li_values ASSIGNING FIELD-SYMBOL(<lfs_values>).
*
*      ASSIGN COMPONENT lv_strcomp_counter OF STRUCTURE <lfs_dyntab_line> TO FIELD-SYMBOL(<lfs_tgt_data>).
*      <lfs_tgt_data> = <lfs_values>.
*
*      lv_strcomp_counter = lv_strcomp_counter + 1.
*
**   LineBreak Counter for checking column count
*      DATA(lv_linebrk_counter)  = sy-tabix MOD ( lv_colcount ).
*      IF lv_linebrk_counter EQ 0.
*        lv_strcomp_counter = 1.
*        APPEND <lfs_dyntab_line> TO <lfs_dyntab>.
*        CLEAR: <lfs_dyntab_line>.
*      ENDIF.
*
*    ENDLOOP.
*
** Delete the header row of the table
*    DELETE <lfs_dyntab> INDEX 1.
*
** Create Entry to Actual Table
*    MODIFY (lv_tableName) FROM TABLE <lfs_dyntab>.
*    IF sy-subrc <> 0.
*
*    ENDIF.
** CATCH cx_bcs.
** CATCH cx_bcs.
**    cl_demo_output=>display_json( json = lv_attachment ).
*    TRY.
**        DATA: lv_rc TYPE i.
**        DATA: it_files TYPE filetable.
**        DATA: lv_action TYPE i.
**        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
**          EXPORTING
**            buffer        = lv_attachment
**          IMPORTING
**            output_length = len
**          TABLES
**            binary_tab    = gt_content.
**
*** FileOpen-Dialog aufrufen
**        cl_gui_frontend_services=>file_open_dialog( EXPORTING file_filter = |xlsx (*.xlsx)\|*.xlsx\|{ cl_gui_frontend_services=>filetype_all }|
**                                                    CHANGING  file_table  = it_files
**                                                              rc          = lv_rc
**                                                              user_action = lv_action ).
**
**        IF lv_action = cl_gui_frontend_services=>action_ok.
*** wenn Datei ausgewählt wurde
**          IF lines( it_files ) > 0.
*** ersten Tabelleneintrag lesen
**            DATA: lv_filesize TYPE w3param-cont_len.
**            DATA: lv_filetype TYPE w3param-cont_type.
*        DATA: it_bin_data TYPE w3mimetabtype.
*        DATA: ls_bin_data LIKE LINE OF it_bin_data.
*
**
*** Excel-Datei auf Appl. Server hochladen (binary)
**            cl_gui_frontend_services=>gui_upload( EXPORTING filename   = |{ it_files[ 1 ]-filename }|
**                                                            filetype   = 'BIN'
**                                                  IMPORTING filelength = lv_filesize
**                                                  CHANGING  data_tab   = it_bin_data ).
*        LOOP AT gt_content INTO ls_content.
*          ls_bin_data-line = ls_content.
*          APPEND ls_bin_data TO  it_bin_data.
*        ENDLOOP.
*
*        DATA: lt_solix  TYPE solix_tab  .
*        DATA: ls_solix LIKE LINE OF lt_solix.
*        ls_solix-line = lv_attachment.
*        APPEND ls_solix TO lt_solix.
** solix -> xstring
*        DATA lv_bin_data TYPE xstring.
*        lv_bin_data  = cl_bcs_convert=>solix_to_xstring( it_solix = lt_solix ).
*        lv_bin_data = cl_bcs_convert=>txt_to_xstring( it_soli = lt_data iv_codepage = '4110' ).
*
*
*
*        DATA(excel) = NEW cl_fdt_xl_spreadsheet( document_name = 'Gina_Create_Template.xlsx' xdocument     = lv_bin_data ) .
*        excel->if_fdt_doc_spreadsheet~get_worksheet_names( IMPORTING worksheet_names = DATA(worksheets) ).
*        DATA(firstworksheet_data) = excel->if_fdt_doc_spreadsheet~get_itab_from_worksheet( worksheets[ 1 ] ).
*
*
** XLSX Handling: Kapselt cl_xlsx_document
*        DATA:o_excel TYPE REF TO cl_ehfnd_xlsx .
*        o_excel = cl_ehfnd_xlsx=>get_instance( ).
*
** XLSX Workbook (XString --> XML)
*        DATA o_doc  TYPE REF TO if_ehfnd_xlsx_doc .
**        o_doc = o_excel->load_doc( iv_file_data = lv_bin_data ).
*        o_excel->load_doc(
*          EXPORTING
*            iv_file_data =  lv_bin_data
*          RECEIVING
*            ro_doc       = o_doc
*        ).
**        CATCH cx_openxml_format.
**        CATCH cx_openxml_not_allowed.
**        CATCH cx_dynamic_check.
** XLSX Sheets des Workbooks holen
*        DATA(it_sheets) = o_doc->get_sheets( ).
*
*        LOOP AT it_sheets ASSIGNING FIELD-SYMBOL(<sheet>).
*          WRITE: / <sheet>-name, <sheet>-sheet_id, <sheet>-rid.
*        ENDLOOP.
*
*        ULINE.
*
** XLSX Sheet: erste Sheet holen
*        DATA(o_sheet) = o_doc->get_sheet_by_id( iv_sheet_id = 1 ).
** max. Zeilenzahl der Sheet
*        DATA(lv_maxrow) = o_sheet->get_last_row_number( ).
*
*        DATA(lv_row) = 1.
*
*        DO lv_maxrow TIMES.
** max. Spaltenzahl der akt. Zeile
*          DATA(lv_cols_in_row) = o_sheet->get_last_column_number_in_row( lv_row ).
*          DATA(lv_col) = 1.
*
*          DO lv_cols_in_row TIMES.
** Inhalt der akt. Zelle
*            DATA(lv_value) = o_sheet->get_cell_content( EXPORTING iv_row    = lv_row
*                                                                  iv_column = lv_col ).
*
*            WRITE: lv_value.
*
*            lv_col = lv_col + 1.
*          ENDDO.
*
*          lv_row = lv_row + 1.
*
*          WRITE: /.
*        ENDDO.
*
**          ENDIF.
**        ENDIF.
*
*      CATCH cx_root INTO DATA(e_text).
*        DATA(lv_text) =  e_text->get_text( ) .
*    ENDTRY.
*
*

*  .
*if sy-subrc = 0.
*  call function 'GUI_DOWNLOAD'
*    exporting
*      bin_filesize            = len
*      filename                = 'C:\Users\nnr2hc\Desktop\GMMC\'
*      filetype                = 'BIN'
*    tables
*      data_tab                = gt_content
*    exceptions
*      file_write_error        = 1
*      no_batch                = 2
*      gui_refuse_filetransfer = 3
*      invalid_type            = 4
*      no_authority            = 5
*      unknown_error           = 6
*      header_not_allowed      = 7
*      separator_not_allowed   = 8
*      filesize_not_allowed    = 9
*      header_too_long         = 10
*      dp_error_create         = 11
*      dp_error_send           = 12
*      dp_error_write          = 13
*      unknown_dp_error        = 14
*      access_denied           = 15
*      dp_out_of_memory        = 16
*      disk_full               = 17
*      dp_timeout              = 18
*      file_not_found          = 19
*      dataprovider_exception  = 20
*      control_flush_error     = 21
*      others                  = 22.
*  if sy-subrc <> 0.
*    message 'Unable to download file from SAP'
*      type 'E'.
*  endif.
*endif.
*    DATA: lt_updateheader TYPE TABLE FOR UPDATE /RB4R/MM_I_GMMC_RequestHeader,
*          lt_updateitem   TYPE TABLE FOR UPDATE /RB4R/MM_I_GMMC_RequestItem.
*    lt_updateheader = VALUE #( ( RequestNumber = 45  Plant = '6230' ) ).
*    lt_updateitem = VALUE #( ( RequestNumber = 45  RequestItem = '4' Plant = '0001' ) ).
*    MODIFY ENTITIES OF /RB4R/MM_I_GMMC_RequestHeader
*       ENTITY RequestHeader
*       UPDATE FIELDS ( Plant   ) WITH lt_updateheader
*      ENTITY RequestItem
*      UPDATE FIELDS ( Plant ) WITH lt_updateitem
*
*       .
*    COMMIT ENTITIES.
*DATA: ls_variant TYPE /rb4r/mm_filtr.
*      data: lt_flter TYPE TABLE of /rb4r/mm_filtr.
*      MODIFY /rb4r/mm_filtr FROM TABLE lt_flter.
*    ls_variant-userid = 'PUM2HC'.
*    ls_variant-systemid = sy-sysid.
*    ls_variant-Application = 'MYREQUEST'.
*    ls_variant-requestitem = 1.
*    ls_variant-field =  'Status'.
*    ls_variant-value = '004'.
*    APPEND ls_variant to lt_flter.
*
*    ls_variant-userid = 'PUM2HC'.
*    ls_variant-Application = 'MYREQUEST'.
*    ls_variant-systemid = sy-sysid.
*    ls_variant-requestitem = 2.
*    ls_variant-field =  'Status'.
*    ls_variant-value = 'I02'.
*    APPEND ls_variant to lt_flter.
*
*
*    MODIFY /rb4r/mm_filtr FROM TABLE lt_flter.

*    READ ENTITY /RB4R/MM_I_GMMC_
*    BY \_RequestItem  ALL FIELDS
*    WITH VALUE #( ( %key-RequestNumber = 45 ) )
*    RESULT DATA(lt_read_rba)
*    LINK DATA(lt_link_table)
*    FAILED DATA(ls_failed_rba).
**    IF sy-subrc = 0.
*
*    ENDIF.

*    MODIFY ENTITY /RB4R/MM_I_GMMC_RequestHeader
*    CREATE FIELDS (   Plant CreatedBy CreatedOn  )
*    WITH VALUE #( (  %cid = 'CID_REQHEAD'
*                    RequestNumber = '1'
*                    Plant = '0046'
*                  CreatedBy = sy-uname
*                  CreatedOn = sy-datum ) )
*
*      MAPPED DATA(m2)
*      FAILED DATA(f2)
*      REPORTED DATA(r2).





*    DATA: lt_requestheader TYPE TABLE FOR CREATE /RB4R/MM_I_GMMC_RequestHeader.
*    lt_requestheader = VALUE #( ( %cid = 'CID_REQHEAD'
*                                  RequestNumber = '10'
*                                CreatedBy = sy-uname
*                                CreatedOn = sy-datum
*                                %control =
*                                VALUE #(  RequestNumber =   if_abap_behv=>mk-on
*                                            CreatedBy =   if_abap_behv=>mk-on
*                                            CreatedOn  =   if_abap_behv=>mk-on
*                                        )
*                               ) ) .
*
*    MODIFY ENTITIES OF /RB4R/MM_I_GMMC_RequestHeader ENTITY RequestHeader
*    CREATE FROM  lt_requestheader
*    MAPPED DATA(m2)
*    FAILED DATA(f2)
*    REPORTED DATA(r2).
*
*
*    COMMIT ENTITIES.
  ENDMETHOD.


  METHOD load_package.
    TRY.
        mo_package = cl_xlsx_document=>load_document( iv_data = iv_file_data ).
        mo_parts = mo_package->get_parts( ).
      CATCH cx_openxml_format cx_openxml_not_found.
    ENDTRY.
  ENDMETHOD.


  METHOD load_xml_data.
    DATA lo_xml_part TYPE REF TO cl_openxml_part.
    DATA lo_xml_part_uri TYPE REF TO cl_openxml_parturi.
    DATA lx_root TYPE REF TO cx_root.
    DATA lv_uri TYPE string.
    TRY. " iv_xml_index
        lv_uri = mo_parts->get_part( 2 )->get_parts( )->get_part( iv_xml_index )->get_uri( )->get_uri( ).
        lo_xml_part_uri = cl_openxml_parturi=>create_from_partname( lv_uri ).
        lo_xml_part = mo_package->get_part_by_uri( lo_xml_part_uri ).
        rv_xml_data = lo_xml_part->get_data( ).
      CATCH cx_openxml_format cx_openxml_not_found.
    ENDTRY.
  ENDMETHOD.


  METHOD new_message.

    obj = NEW lcl_abap_behv_msg(
      textid = VALUE #(
                 msgid = id
                 msgno = number
                 attr1 = COND #( WHEN v1 IS NOT INITIAL THEN 'IF_T100_DYN_MSG~MSGV1' )
                 attr2 = COND #( WHEN v2 IS NOT INITIAL THEN 'IF_T100_DYN_MSG~MSGV2' )
                 attr3 = COND #( WHEN v3 IS NOT INITIAL THEN 'IF_T100_DYN_MSG~MSGV3' )
                 attr4 = COND #( WHEN v4 IS NOT INITIAL THEN 'IF_T100_DYN_MSG~MSGV4' )
    )
      msgty = SWITCH #( severity
                WHEN ms-error       THEN 'E'
                WHEN ms-warning     THEN 'W'
                WHEN ms-information THEN 'I'
                WHEN ms-success     THEN 'S' )
      msgv1 = |{ v1 }|
      msgv2 = |{ v2 }|
      msgv3 = |{ v3 }|
      msgv4 = |{ v4 }|
    ).

    obj->m_severity = severity.

  ENDMETHOD.


  METHOD new_message_with_text.
    obj = new_message(
      id       = 'SABP_BEHV'
      number   = 100
      severity = severity
      v1       = text
    ).
  ENDMETHOD.


  METHOD read_request.


    READ ENTITY /rb4r/mm_i_gmmc_requestheader
     ALL FIELDS
    WITH VALUE #( ( %key-requestnumber = iv_requestnumber
                    %is_draft          = if_abap_behv=>mk-on ) )
    RESULT DATA(lt_read_header)
    FAILED DATA(ls_failed_hd).
    IF sy-subrc = 0.
      et_requestheader = lt_read_header.
    ENDIF.


    READ ENTITY /rb4r/mm_i_gmmc_requestheader
    BY \_requestitem  ALL FIELDS
    WITH VALUE #( ( %key-requestnumber = iv_requestnumber
                    %is_draft          = if_abap_behv=>mk-on
                  ) )
    RESULT DATA(lt_read_rba)
    LINK DATA(lt_link_table)
    FAILED DATA(ls_failed_rba).
    IF sy-subrc = 0.
      et_requestitem = lt_read_rba.
    ENDIF.


  ENDMETHOD.


  METHOD reset_item_before_upload.
    DATA: lt_requestitem_del TYPE TABLE FOR DELETE /rb4r/mm_i_gmmc_requestheader\\requestitem,
          lt_scaleprice_del  TYPE TABLE FOR DELETE /rb4r/mm_i_gmmc_requestheader\\scaleprice.

    DATA: ld_task   TYPE char32 VALUE 'GMMC_DEL'.

    IF it_requestitem IS INITIAL.
      CALL FUNCTION '/RB4R/MM_GMMC_REMOVE'
        STARTING NEW TASK ld_task
        "DESTINATION 'NONE'
        EXPORTING
          iv_requestnumber = iv_requestnumber.
    ENDIF.
    IF iv_up_import IS NOT INITIAL.
      CALL FUNCTION '/RB4R/MM_GMMC_REMOVE'
        STARTING NEW TASK ld_task
        "DESTINATION 'NONE'
        EXPORTING
          iv_requestnumber = iv_requestnumber
          iv_up_import     = iv_up_import.
    ENDIF.

  ENDMETHOD.


  METHOD store_the_data_to_entities_a1.
    DATA lt_requestitem_create  TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestheader\_requestitem.
    DATA lt_scaleprice_create     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_scaleprice_create_run     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA: lt_data TYPE tt_exceldata.
    DATA: lt_data_ext  TYPE tt_exceldata_ext,
          lt_data_ext1 TYPE gtt_exceldata.
    DATA: lt_data_termcode TYPE tt_exceldata.
    DATA: lt_data_scaleprice TYPE tt_exceldata.
    DATA: ls_src_selection         TYPE /rb9x/rb0m_s_ind_prefl_srchsel.
    DATA: lr_ternc TYPE /rb9x/rb0m_t_ind_string_range.
    DATA: ls_ternc LIKE LINE OF lr_ternc.
    DATA: lv_htype            TYPE dd01v-datatype,
          lt_slot             TYPE RANGE OF /rb4r/mm_sloc-lgort,
          ls_src_selection_eq TYPE /rb4r/mm_s_schedagree_range,
          lt_equipment        TYPE RANGE OF equi-equnr,
          lt_currency         TYPE RANGE OF eine-waers,
          lv_in               TYPE f,
          lv_out              TYPE f,
          lt_uom_range        TYPE RANGE OF t006-msehi,
          lr_matkl            TYPE RANGE OF mara-matkl,
          lr_mtart            TYPE RANGE OF mara-mtart,
          lv_inuom            TYPE t006-msehi,
          lv_outuom           TYPE t006-msehi,
          lv_meins            TYPE meins.

    IF it_data IS NOT INITIAL.
      SELECT *                                "#EC CI_ALL_FIELDS_NEEDED
      FROM /rb4r/mm_tf_gmmc_vendor_vh
      FOR ALL ENTRIES IN @it_data
       WHERE creditornumber = @it_data-creditornumber
       INTO TABLE  @DATA(lt_vendor).
      IF sy-subrc = 0.
        SORT lt_vendor BY creditornumber ASCENDING.
      ENDIF.

      lt_data = it_data.
      MOVE-CORRESPONDING lt_data TO lt_data_ext.

      lt_slot = VALUE #( FOR ls_data IN lt_data_ext
                         WHERE ( storagelocation IS NOT INITIAL )
                     ( sign   = 'I'
                       option = 'EQ'
                       low    = ls_data-storagelocation ) ).
      IF lines( lt_slot ) > 0.

        SELECT *                              "#EC CI_ALL_FIELDS_NEEDED
        FROM /rb4r/mm_sloc
        INTO TABLE @DATA(lt_storageloc)
        WHERE lgort IN @lt_slot
          AND werks = @is_header-plant.
        IF sy-subrc = 0.
          SORT lt_storageloc.
        ENDIF.

      ENDIF.

      lt_currency = VALUE #( FOR ls_data IN lt_data_ext
                             WHERE ( currency IS NOT INITIAL )
                     ( sign   = 'I'
                       option = 'EQ'
                       low    = ls_data-currency ) ).
      IF lines( lt_currency ) > 0.

        SELECT *                              "#EC CI_ALL_FIELDS_NEEDED
        FROM i_currencystdvh
        WHERE currency IN @lt_currency
        INTO TABLE @DATA(lt_curr).
        IF sy-subrc = 0.
          SORT lt_curr.
        ENDIF.
      ENDIF.

      lt_equipment = VALUE #( FOR ls_data IN lt_data_ext
                              WHERE ( equnr IS NOT INITIAL )
                              LET lv_string1 = COND string( WHEN ls_data-equnr IS NOT INITIAL
                                      THEN ls_data-equnr
                                      ELSE '' ) IN
                            ( sign   = 'I'
                              option = 'EQ'
                              low    = COND #( WHEN lv_string1 CO '0123456789'
                                               AND strlen( ls_data-equnr ) < 18
                                               THEN |{ ls_data-equnr PAD = '0' ALIGN = RIGHT WIDTH = 18 }|
                                               ELSE ls_data-equnr ) ) ).

      ls_src_selection_eq-equipment = lt_equipment.
      /rb4r/cl_mm_gmmc_model=>prepare_equipmentsearch(
        EXPORTING
          is_src_selection = ls_src_selection_eq
          iv_skip          = 0
          iv_top           = 1000
        IMPORTING
          et_data          = DATA(lt_equnr)
      ).

      LOOP AT lt_data_ext ASSIGNING FIELD-SYMBOL(<fs_att0>) .
        IF <fs_att0>-baseuom IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
            EXPORTING
              input          = <fs_att0>-baseuom
            IMPORTING
              output         = lv_meins
            EXCEPTIONS
              unit_not_found = 1
              OTHERS         = 2.
          IF sy-subrc = 0.
            <fs_att0>-baseuom = lv_meins.
          ENDIF.
        ENDIF.
        IF <fs_att0>-orderuom IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
            EXPORTING
              input          = <fs_att0>-orderuom
            IMPORTING
              output         = lv_meins
            EXCEPTIONS
              unit_not_found = 1
              OTHERS         = 2.
          IF sy-subrc = 0.
            <fs_att0>-orderuom = lv_meins.
          ENDIF.
        ENDIF.
      ENDLOOP.

      lt_uom_range = VALUE #( FOR ls_data IN lt_data_ext
                              WHERE ( baseuom IS NOT INITIAL OR orderuom IS NOT INITIAL )
                            ( sign   = 'I'
                              option = 'EQ'
                              low    = ls_data-baseuom )
                            ( sign   = 'I'
                              option = 'EQ'
                              low    = ls_data-orderuom )
                            ).
      IF lines( lt_uom_range ) > 0.

        SELECT * FROM t006                    "#EC CI_ALL_FIELDS_NEEDED
        WHERE msehi IN @lt_uom_range
        INTO TABLE @DATA(lt_uom_t).
        IF sy-subrc = 0.
          SORT lt_uom_t.
        ENDIF.

      ENDIF.
* 1      Convert data for flag if excel file = Y then should be X

*Update some fields before fill data

      LOOP AT lt_data_ext ASSIGNING FIELD-SYMBOL(<fs_att>) .

        IF <fs_att>-ismanufactr = 'Y' OR <fs_att>-issupplier = 'Y' OR <fs_att>-nodispo = 'Y' OR <fs_att>-isconfiguration = 'Y'.
          IF <fs_att>-ismanufactr = 'Y'. <fs_att>-ismanufactr = abap_true. ENDIF.
          IF <fs_att>-issupplier = 'Y'. <fs_att>-issupplier = abap_true. ENDIF.
          IF <fs_att>-nodispo = 'Y'. <fs_att>-nodispo = abap_true. ENDIF.
          IF  <fs_att>-isconfiguration = 'Y'.  <fs_att>-isconfiguration = abap_true. ENDIF.

        ENDIF.
        IF <fs_att>-ismanufactr = 'N' OR <fs_att>-issupplier = 'N' OR   <fs_att>-nodispo = 'N' OR <fs_att>-isconfiguration = 'N'.
          IF <fs_att>-ismanufactr = 'N'. <fs_att>-ismanufactr = abap_false. ENDIF.
          IF <fs_att>-issupplier =  'N'. <fs_att>-issupplier = abap_false. ENDIF.
          IF <fs_att>-nodispo = 'N'. <fs_att>-nodispo = abap_false. ENDIF.
          IF  <fs_att>-isconfiguration = 'N'.  <fs_att>-isconfiguration = abap_false. ENDIF.
        ENDIF.

        IF line_exists( lt_vendor[ creditornumber = <fs_att>-creditornumber purchorg = <fs_att>-purchorg ] ).
          <fs_att>-creditorname = lt_vendor[ creditornumber  = <fs_att>-creditornumber purchorg = <fs_att>-purchorg ]-creditorname.
        ELSE.
          CLEAR: <fs_att>-creditorname, <fs_att>-creditornumber.
        ENDIF.
* 2 Prepare data for Request Item before creating or updating
* Get Term code information
        IF  <fs_att>-termcode IS NOT INITIAL.
          lr_ternc = VALUE #(
                  ( sign   = 'I'
                    option = 'EQ'
                    low    = <fs_att>-termcode )
          ).

          lr_matkl = VALUE #( ( sign   = 'I'
                                option = 'EQ'
                                low    = <fs_att>-materialgroup ) ).

          lr_mtart = VALUE #( ( sign   = 'I'
                                option = 'EQ'
                                low    = <fs_att>-materialtype ) ).

          ls_src_selection-termc = lr_ternc.
          ls_src_selection-matkl = lr_matkl.
          ls_src_selection-mtart = lr_mtart.

          /rb4r/cl_mm_gmmc_model=>prepare_indiraprefer(
            EXPORTING
              is_src_selection = ls_src_selection
              iv_skip          = 0
              iv_top           = 1000
            IMPORTING
              et_data          = DATA(lt_indira)
          ).
          IF lt_indira IS NOT INITIAL AND line_exists( lt_indira[ termcode = <fs_att>-termcode materialtype = <fs_att>-materialtype materialgroup = <fs_att>-materialgroup ] ).
            <fs_att>-classid      = lt_indira[ termcode = <fs_att>-termcode materialtype = <fs_att>-materialtype materialgroup = <fs_att>-materialgroup ]-classid.
            <fs_att>-termcddesc   = lt_indira[ termcode = <fs_att>-termcode materialtype = <fs_att>-materialtype materialgroup = <fs_att>-materialgroup ]-termcodetext.
          ELSE.
            CLEAR: <fs_att>-classid, <fs_att>-termcddesc, <fs_att>-termcode.
          ENDIF.
          CLEAR: lr_ternc, lr_matkl, lr_mtart, ls_src_selection, lt_indira.
        ENDIF.
*Setting field InfoRecordType (RequestItem) = 0 as default
*Validation Store location
        IF <fs_att>-storagelocation IS NOT INITIAL.
          IF NOT line_exists( lt_storageloc[ lgort = <fs_att>-storagelocation ] ).
            CLEAR: <fs_att>-storagelocation.
          ENDIF.
        ENDIF.
*Validation Equiment Number
        IF <fs_att>-equnr IS NOT INITIAL.
          DATA: lv_string2 TYPE string.
          lv_string2 = <fs_att>-equnr.
          IF lv_string2 CO '0123456789'
          AND strlen( <fs_att>-equnr ) < 18.
            <fs_att>-equnr = |{ <fs_att>-equnr PAD = '0' ALIGN = RIGHT WIDTH = 18 }|.
          ENDIF.
          IF NOT line_exists( lt_equnr[ equipmentnumber = <fs_att>-equnr ] ).
            CLEAR: <fs_att>-equnr.
          ELSE.
            <fs_att>-equnr = lv_string2.
          ENDIF.

          CLEAR: lv_string2.

        ENDIF.

*If Material Type in excel = "HIBE" ---> settting field EquipmentNumber = "" (in Request Item)
        IF <fs_att>-materialtype = 'HIBE'.
          CLEAR: <fs_att>-equnr.
        ENDIF.

        CALL FUNCTION 'NUMERIC_CHECK'
          EXPORTING
            string_in = <fs_att>-ean
          IMPORTING
*           string_out =
            htype     = lv_htype.
        IF lv_htype <> 'NUMC'.
          CLEAR: <fs_att>-ean.
        ENDIF.
*If these fields: BaseUomUnit/OrderUomUnit/PriceUnit in Excel file !== number -> setting BaseUomUnit/OrderUomUnit/PriceUnit = 1 in Request Item

        CLEAR: lv_htype.
        DATA: lv_string TYPE char10.
        lv_string = CONV #( <fs_att>-baseuomunit ) .
        CALL FUNCTION 'NUMERIC_CHECK'
          EXPORTING
            string_in = lv_string
          IMPORTING
*           string_out =
            htype     = lv_htype.
        IF lv_htype <> 'NUMC'.
          <fs_att>-baseuomunit = 1.
        ENDIF.
        CLEAR: lv_htype.
        lv_string = <fs_att>-orderuomunit.
        CALL FUNCTION 'NUMERIC_CHECK'
          EXPORTING
            string_in = lv_string
          IMPORTING
*           string_out =
            htype     = lv_htype.
        IF lv_htype <> 'NUMC'.
          <fs_att>-orderuomunit = 1.
        ENDIF.
        CLEAR: lv_htype.
*Validation UOM
        IF <fs_att>-baseuom IS NOT INITIAL.
          IF line_exists( lt_uom_t[ msehi = <fs_att>-baseuom ] ).
            <fs_att>-baseuom = lt_uom_t[ msehi = <fs_att>-baseuom ]-msehi.
            DATA(lv_dimid1) = lt_uom_t[ msehi = <fs_att>-baseuom ]-dimid.
          ELSE.
            CLEAR: <fs_att>-baseuom.
          ENDIF.
        ENDIF.

        IF <fs_att>-orderuom IS NOT INITIAL.
          IF line_exists( lt_uom_t[ msehi = <fs_att>-orderuom ] ).
            <fs_att>-orderuom = lt_uom_t[ msehi = <fs_att>-orderuom ]-msehi.
            DATA(lv_dimid2) = lt_uom_t[ msehi = <fs_att>-orderuom ]-dimid.
          ELSE.
            CLEAR: <fs_att>-orderuom.
          ENDIF.
        ENDIF.

        IF <fs_att>-baseuom IS NOT INITIAL
       AND <fs_att>-orderuom IS NOT INITIAL.
          IF lv_dimid1 = lv_dimid2.
            lv_in = <fs_att>-baseuomunit.
            TRY.
                CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
                  EXPORTING
                    input                = lv_in
                    unit_in              = <fs_att>-baseuom
                    unit_out             = <fs_att>-orderuom
                  IMPORTING
                    output               = lv_out
                  EXCEPTIONS
                    conversion_not_found = 1
                    division_by_zero     = 2
                    input_invalid        = 3
                    output_invalid       = 4
                    overflow             = 5
                    type_invalid         = 6
                    units_missing        = 7
                    unit_in_not_found    = 8
                    unit_out_not_found   = 9
                    OTHERS               = 10.
              CATCH cx_xslt_exception INTO DATA(lx) .
                DATA(lv_lx) = lx->get_text(  ).
            ENDTRY.
            IF sy-subrc = 0.
              <fs_att>-orderuomunit = lv_out.
            ELSE.
              DATA(lv_flag) = 'X'.
              lv_inuom = <fs_att>-baseuom.
              lv_in = <fs_att>-baseuomunit.
              lv_out = <fs_att>-orderuomunit.
              DATA(lv_dimid) = lv_dimid1.
            ENDIF.
          ELSE.
            lv_flag = 'X'.
            lv_inuom = <fs_att>-baseuom.
            lv_in = <fs_att>-baseuomunit.
            lv_out = <fs_att>-orderuomunit.
            lv_dimid = lv_dimid1.
          ENDIF.
        ELSE.
          lv_flag = 'X'.
          lv_inuom = <fs_att>-baseuom.
          lv_outuom = <fs_att>-orderuom.
          lv_in = <fs_att>-baseuomunit.
          lv_out = <fs_att>-orderuomunit.
          lv_dimid = COND dimid( WHEN lv_dimid1 IS NOT INITIAL
                                 THEN lv_dimid1
                                 ELSE lv_dimid2 ).
        ENDIF.

        IF lv_flag IS NOT INITIAL.
          /rb4r/cl_mm_gmmc_auxiliary=>get_uom_baseper(
            EXPORTING
              iv_dimid   = lv_dimid
              iv_inuom   = lv_inuom
              iv_outuom  = lv_outuom
              iv_inunit  = lv_in
              iv_outunit = lv_out
            IMPORTING
              ev_outuom  = DATA(lv_out1) ).
          IF lv_out1 IS NOT INITIAL.
            IF lv_inuom IS INITIAL.
              <fs_att>-baseuom = lv_out1.
            ELSEIF lv_outuom IS INITIAL.
              <fs_att>-orderuom = lv_out1.
            ENDIF.
          ENDIF.
        ENDIF.

        IF <fs_att>-baseuom IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
            EXPORTING
              input          = <fs_att>-baseuom
            IMPORTING
              output         = lv_meins
            EXCEPTIONS
              unit_not_found = 1
              OTHERS         = 2.
          IF sy-subrc = 0.
            <fs_att>-baseuom = lv_meins.
          ENDIF.
        ENDIF.

        IF <fs_att>-orderuom IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
            EXPORTING
              input          = <fs_att>-orderuom
            IMPORTING
              output         = lv_meins
            EXCEPTIONS
              unit_not_found = 1
              OTHERS         = 2.
          IF sy-subrc = 0.
            <fs_att>-orderuom = lv_meins.
          ENDIF.
        ENDIF.

        CLEAR: lv_out1, lv_dimid, lv_dimid1, lv_dimid2, lv_inuom, lv_outuom.

*Validation Currency
        IF <fs_att>-currency IS NOT INITIAL AND line_exists( lt_curr[ currency = <fs_att>-currency ] ).
          <fs_att>-currency = lt_curr[ currency = <fs_att>-currency ]-currency.
        ELSE.
          CLEAR: <fs_att>-currency.
        ENDIF.
*9 Add new field in Request item isExistingScale = true if scale price of this requestItem is maintanced in Excel file
        IF <fs_att>-price1 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price1  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price2 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price2  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price3 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price3 / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price4 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price4  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price5 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price5  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price6 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price6  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price7 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price7  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price8 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price8  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF  <fs_att>-price9 <> 0 .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price9  / <fs_att>-priceunit.
          ENDIF.
        ELSEIF <fs_att>-price10 <> 0  .
          <fs_att>-isexistingscale = abap_true.
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price10  / <fs_att>-priceunit.
          ENDIF.

        ENDIF.

*8   Calculating value for RecordYearlyVol field based on excel input of PricePerItem, ConsumptionValue, PriceUnit
*    If No scale price maintained in excel   RecordYearlyVol = PricePerItem/ PriceUnit* ConsumptionValue
        IF <fs_att>-isexistingscale = abap_false .
          IF <fs_att>-priceunit <> 0.
            <fs_att>-yearlyvolume  = <fs_att>-priceperitem / <fs_att>-priceunit * <fs_att>-estconsumperyear.
          ENDIF.

        ENDIF.

      ENDLOOP.

    DATA: lr_currency TYPE RANGE OF tcurx-currkey.
    lr_currency = VALUE #( FOR ls_curr IN lt_data_ext
                         ( sign = 'I'
                           option = 'EQ'
                           low = ls_curr-currency ) ).
    SELECT *
      FROM tcurx
      INTO TABLE @DATA(lt_currx)
      WHERE currkey IN @lr_currency.
    IF sy-subrc = 0.
      SORT lt_currx.

      LOOP AT lt_data_ext ASSIGNING FIELD-SYMBOL(<fs_curr>).

        DATA(ls_currx) = VALUE #( lt_currx[ currkey = <fs_curr>-currency ] OPTIONAL ).

        IF line_exists( lt_currx[ currkey = <fs_curr>-currency ] ).
          DATA(lv_dec) = 2 - ls_currx-currdec.
          <fs_curr>-priceperitem = COND kbetr_kond( WHEN ls_currx IS NOT INITIAL
                                                     AND ls_currx-currdec < 2
                                                     AND lv_dec = 1
                                                    THEN <fs_curr>-priceperitem / 10
                                                    WHEN ls_currx IS NOT INITIAL
                                                     AND ls_currx-currdec < 2
                                                     AND lv_dec = 2
                                                    THEN <fs_curr>-priceperitem / 100
                                                    ELSE <fs_curr>-priceperitem ).
        ENDIF.

      ENDLOOP.

    ENDIF.

      lt_requestitem_create = VALUE #( ( %is_draft     = iv_is_draft
                                         requestnumber = iv_requestnumber
                                         %target       = VALUE #( FOR ls_data IN lt_data_ext
                                                          ( %is_draft              = iv_is_draft
                                                            materialnumber         = ls_data-materialno
                                                            creditorname           = ls_data-creditorname
                                                            creditornumber         = ls_data-creditornumber
                                                            purchorg               = ls_data-purchorg
                                                            partnumber             = ls_data-partnumber
                                                            isconfiguration        = ls_data-isconfiguration
                                                            "MFRNumber = ls_data-mfrnumber
                                                            "MFRPartNumber = ls_data-mfrpartnumber
                                                            localplantmaterialtext = ls_data-localmattext
                                                            typecode               = ls_data-typecode
                                                            ean                    = ls_data-ean
                                                            baseuom                = ls_data-baseuom
                                                            orderuom               = ls_data-orderuom
                                                            baseuomunit            = ls_data-baseuomunit
                                                            orderuomunit           = ls_data-orderuomunit
                                                            reorderpoint           = ls_data-mb
                                                            maxstocklevel          = ls_data-hb
                                                            termcode               = ls_data-termcode
                                                            materialtype           = ls_data-materialtype
                                                            materialgroup          = ls_data-materialgroup
                                                            storagelocation        = ls_data-storagelocation
                                                            typeshortdescp         = ls_data-typeshortdescription

                                                            equipmentnumber        = COND #( WHEN ls_data-materialtype <> 'HIBE'
                                                                                             THEN ls_data-equnr
                                                                                             ELSE '' ) "Not fill equipment number in case HIBE

                                                            costcenter             = COND #( WHEN ls_data-materialtype <> 'HIBE'
                                                                                             THEN /rb4r/cl_mm_gmmc_auxiliary=>get_cost_center( iv_equipmentno = ls_data-equnr )
                                                                                             ELSE '' ) "Not fill equipment number in case HIBE

                                                            priceperitem           = ls_data-priceperitem
                                                            currency               = ls_data-currency
                                                            priceunit              = ls_data-priceunit
                                                            priceuom               = ls_data-orderuom
                                                            standardquantity       = ls_data-standardquantity
                                                            plandeliverytime       = ls_data-plandeliverytime
                                                            consumptionvalue       = ls_data-estconsumperyear
                                                            ismanufactr            = ls_data-ismanufactr
                                                            issupplier             = ls_data-issupplier
                                                            nodispoflag            = ls_data-nodispo
                                                            "PlantUf1 = ls_data-plantuf1
* Need to fetch data for Plant field (in RequestItem) based on Plant value in request Header
                                                            plant                  = is_header-plant
                                                            classid                = ls_data-classid
                                                            termcodedesc           = ls_data-termcddesc
                                                            inforecordtype         = '0'
                                                            isexistingscale        = ls_data-isexistingscale
                                                            recordyearlyvol        = ls_data-yearlyvolume
*                                                            UserStatus = 'Validation Required'
*                                                            MaterialStatus = 'U'

                                                            %control               = VALUE #( materialnumber         = if_abap_behv=>mk-on
                                                                                              creditorname           = if_abap_behv=>mk-on
                                                                                              creditornumber         = if_abap_behv=>mk-on
                                                                                              purchorg               = if_abap_behv=>mk-on
                                                                                              partnumber             = if_abap_behv=>mk-on
                                                                                              isconfiguration        = if_abap_behv=>mk-on
                                                                                              mfrnumber              = if_abap_behv=>mk-on
                                                                                "MFRPartNumber = if_abap_behv=>mk-on
                                                                                              localplantmaterialtext = if_abap_behv=>mk-on
                                                                                              typecode               = if_abap_behv=>mk-on
                                                                                              ean                    = if_abap_behv=>mk-on
                                                                                              baseuom                = if_abap_behv=>mk-on
                                                                                              orderuom               = if_abap_behv=>mk-on
                                                                                              baseuomunit            = if_abap_behv=>mk-on
                                                                                              orderuomunit           = if_abap_behv=>mk-on
                                                                                              reorderpoint           = if_abap_behv=>mk-on
                                                                                              maxstocklevel          = if_abap_behv=>mk-on
                                                                                              termcode               = if_abap_behv=>mk-on
                                                                                              materialtype           = if_abap_behv=>mk-on
                                                                                              materialgroup          = if_abap_behv=>mk-on
                                                                                              storagelocation        = if_abap_behv=>mk-on
                                                                                              typeshortdescp         = if_abap_behv=>mk-on
                                                                                              equipmentnumber        = if_abap_behv=>mk-on
                                                                                              costcenter             = if_abap_behv=>mk-on
                                                                                              priceperitem           = if_abap_behv=>mk-on
                                                                                              currency               = if_abap_behv=>mk-on
                                                                                              priceunit              = if_abap_behv=>mk-on
                                                                                              standardquantity       = if_abap_behv=>mk-on
                                                                                              plandeliverytime       = if_abap_behv=>mk-on
                                                                                              consumptionvalue       = if_abap_behv=>mk-on
                                                                                              ismanufactr            = if_abap_behv=>mk-on
                                                                                              issupplier             = if_abap_behv=>mk-on
                                                                                              nodispoflag            = if_abap_behv=>mk-on
                                                                                "PlantUf1 = if_abap_behv=>mk-on
                                                                                              plant                  = if_abap_behv=>mk-on
                                                                                              classid                = if_abap_behv=>mk-on
                                                                                              termcodedesc           = if_abap_behv=>mk-on
                                                                                              inforecordtype         = if_abap_behv=>mk-on
                                                                                              isexistingscale        = if_abap_behv=>mk-on
                                                                                              recordyearlyvol        = if_abap_behv=>mk-on
                                                                                              priceuom               = if_abap_behv=>mk-on
                                                                                              userstatus             = if_abap_behv=>mk-on
                                                                                              materialstatus         = if_abap_behv=>mk-on
                                                         ) ) ) ) ).


      MODIFY ENTITY /rb4r/mm_i_gmmc_requestheader
      CREATE BY \_requestitem AUTO FILL CID
      WITH lt_requestitem_create
      FAILED DATA(ls_failed_crt)
      REPORTED DATA(ls_reported_crt)
      MAPPED DATA(ls_mapped_crt) .

* 3 Prepare data for Scale Price before creating or updating base on Request Item
      DATA: lt_scaleprice_excel LIKE lt_data.

      LOOP AT lt_data INTO DATA(ls_data_excel) .
        DATA(ls_mapped_item) = ls_mapped_crt-requestitem[ sy-tabix ].
        ls_data_excel-requestno = ls_mapped_item-requestnumber.
        ls_data_excel-requestitem = ls_mapped_item-requestitem .
        lt_scaleprice_excel = VALUE #( BASE lt_scaleprice_excel
                                       FOR ls_scales IN it_scales
                                       WHERE ( zlineno = |{ sy-tabix PAD = '0' ALIGN = RIGHT WIDTH = 5 }| )
                                       LET ls_currx1 = VALUE #( lt_currx[ currkey = ls_data_excel-currency ] OPTIONAL )
                                           lv_dec1 = 2 - ls_currx1-currdec
                                       IN
                                     ( requestno = ls_mapped_item-requestnumber
                                       requestitem = ls_mapped_item-requestitem
                                       qty1 = ls_scales-qty
                                       price1 = COND kbetr_kond( WHEN ls_currx1 IS NOT INITIAL
                                                                  AND ls_currx1-currdec < 2
                                                                  AND lv_dec1 = 1
                                                                 THEN ls_scales-price / 10
                                                                 WHEN ls_currx1 IS NOT INITIAL
                                                                  AND ls_currx1-currdec < 2
                                                                  AND lv_dec1 = 2
                                                                 THEN ls_scales-price / 100
                                                                 ELSE ls_scales-price )
                                       baseuom = ls_data_excel-baseuom
                                       currency = ls_data_excel-currency
                                       priceunit = ls_data_excel-priceunit ) ).

      ENDLOOP.

      READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
      ENTITY requestheader
      BY \_requestitem
      ALL FIELDS
      WITH CORRESPONDING #( ls_mapped_crt-requestitem )
      RESULT DATA(lt_requestitem)
      FAILED DATA(lt_rs_faild).

      LOOP AT ls_mapped_crt-requestitem INTO DATA(ls_request_item_mapped).

        lt_scaleprice_create_run = VALUE #( ( %is_draft     = ls_request_item_mapped-%is_draft
                                              requestnumber = ls_request_item_mapped-requestnumber
                                              requestitem   = ls_request_item_mapped-requestitem
                                              %target       = VALUE #( FOR ls_data_ext IN lt_scaleprice_excel WHERE ( requestno     = ls_request_item_mapped-requestnumber AND requestitem = ls_request_item_mapped-requestitem )
                                                                                                                    ( %is_draft     = ls_request_item_mapped-%is_draft
                                                                                                                      quantity      = ls_data_ext-qty1
                                                                                                                      amount        = ls_data_ext-price1
                                                                                                                      unitofmeasure = ls_data_ext-baseuom
                                                                                                                      currency      = ls_data_ext-currency
                                                                                                                      priceunit     = ls_data_ext-priceunit


                                                                                                                      %control      = VALUE #( quantity      = if_abap_behv=>mk-on
                                                                                                                                               amount        = if_abap_behv=>mk-on
                                                                                                                                               unitofmeasure = if_abap_behv=>mk-on
                                                                                                                                               currency      = if_abap_behv=>mk-on
                                                                                                                                               priceunit     = if_abap_behv=>mk-on
                                                                                   ) ) ) ) ).

        IF lt_scaleprice_create_run IS NOT INITIAL.
          MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
          ENTITY requestitem CREATE BY \_materialscaleprice
          AUTO FILL CID
          WITH lt_scaleprice_create_run
          FAILED DATA(ls_failed_scp_crt)
          REPORTED DATA(ls_reported_scp_crt)
          MAPPED DATA(ls_mapped_scp_crt) .
        ENDIF.


        CLEAR: lt_scaleprice_create_run.

      ENDLOOP.

    ENDIF.

*** Final remove leading zero in vendor before display UI
    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestheader
    BY \_requestitem
    ALL FIELDS
    WITH CORRESPONDING #( ls_mapped_crt-requestitem )
    RESULT DATA(lt_requestitem1)
    FAILED DATA(lt_rs_faild1).

    IF lines( lt_requestitem1 ) > 0.

      LOOP AT lt_requestitem1 ASSIGNING FIELD-SYMBOL(<fs_reqitem>).
        <fs_reqitem>-creditornumber = |{ <fs_reqitem>-creditornumber ALPHA = OUT }|.
      ENDLOOP.

      MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
      ENTITY requestitem
      UPDATE FIELDS ( creditornumber )
      WITH VALUE #( FOR ls_items IN lt_requestitem1
                    ( %tky                    = ls_items-%tky
                      creditornumber          = ls_items-creditornumber
                      %control-creditornumber = if_abap_behv=>mk-on ) )
      FAILED DATA(ls_failed1)
      REPORTED DATA(ls_reported1).
      IF ls_failed1 IS NOT INITIAL.
        DATA(lv_failed1) = 'X'.
      ENDIF.
    ENDIF.


  ENDMETHOD.


  METHOD store_the_data_to_entities_a2.
    TYPES: BEGIN OF lty_exceldata_a2.
             INCLUDE  TYPE /rb4r/mm_s_gmmc_excel_upl_ap2.
    TYPES:   isexistingsourcelist  TYPE flag,
             isexistingsa          TYPE flag,
             schedulingagreementno TYPE evrtn,
             preconsumflag         TYPE flag,
             srclstno              TYPE char5,
             priceuom              TYPE kmein,
             preconsum             TYPE vbwrt,
             materialtype          TYPE mtart,
             inforecord            TYPE infnr,
           END OF lty_exceldata_a2,

           ltt_exceldata_a2 TYPE TABLE OF lty_exceldata_a2.

    DATA lt_requestitem_create  TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestheader\_requestitem.
    DATA lt_scaleprice_create     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_scaleprice_create_run     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_sourcelist_cre        TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_sourcelist.
    DATA lt_sag_cre                TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_schedulingagreement.
    DATA lt_potext_cre            TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_potext.
    DATA: lt_data TYPE tt_exceldata_a2.
    DATA: lt_data_ext TYPE gtt_exceldata. "ltt_exceldata_a2.
    DATA: lt_data_termcode TYPE tt_exceldata.
    DATA: lt_data_scaleprice TYPE tt_exceldata.
    DATA: ls_src_selection         TYPE /rb9x/rb0m_s_ind_prefl_srchsel.

    DATA: lv_htype TYPE dd01v-datatype.
    DATA lt_scl_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_sourcelist.
    DATA ls_scl_cre               TYPE /rb4r/mm_i_gmmc_sourcelist.
    DATA lt_sca_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_scaleprice.
    DATA ls_sca_cre               TYPE /rb4r/mm_i_gmmc_scaleprice.
    DATA lt_pot_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_potext.
    DATA ls_pot_cre               TYPE /rb4r/mm_i_gmmc_potext.
    DATA lt_sa_cre TYPE TABLE OF /rb4r/mm_i_gmmc_mmsa.
    DATA: ls_scheagree_selection         TYPE /rb4r/mm_s_schedagree_range.

    DATA lv_item                  TYPE i.
    DATA lt_matnrvh TYPE gtt_matnrvh.

    DATA lt_ir TYPE /rb4r/cl_mm_gmmc_model=>tt_ir.
    DATA lt_konm TYPE /rb4r/cl_mm_gmmc_model=>tt_konm.
    DATA lt_sag TYPE /rb4r/cl_mm_gmmc_model=>tt_sag.
    DATA lt_srclst TYPE /rb4r/cl_mm_gmmc_model=>tt_scrlist.
    DATA lt_stxh TYPE gtt_stxh.
    DATA lt_vendor TYPE gtt_vendorvh.
    DATA: lv_item_num TYPE /rb4r/mm_requestitem.

    IF it_data IS INITIAL.
      RETURN.
    ENDIF.

    lt_data = it_data.
    MOVE-CORRESPONDING lt_data TO lt_data_ext.

    DATA lt_lines TYPE TABLE OF tline.


    calc_upload_yearvalue( EXPORTING "it_data       = it_data
                                     iv_is_draft      = iv_is_draft
                                     iv_requestnumber = iv_requestnumber
                                     is_header        = is_header
                           CHANGING  ct_data          = lt_data_ext
                                     ct_matnrvh       = lt_matnrvh
                                     ct_vendorvh      = lt_vendor
                                     ct_selc          = ls_scheagree_selection
                                     ct_ir            = lt_ir
                                     ct_sag           = lt_sag
                                     ct_srclst        = lt_srclst
                                     ct_konm          = lt_konm
                                     ct_stxh          = lt_stxh ).

    LOOP AT lt_data_ext ASSIGNING FIELD-SYMBOL(<fs_att>).

      CLEAR: lv_htype.
      DATA: lv_string TYPE char10.
      lv_string = CONV #( <fs_att>-baseuomunit ).
      CALL FUNCTION 'NUMERIC_CHECK'
        EXPORTING
          string_in = lv_string
        IMPORTING
*         string_out =
          htype     = lv_htype.
      IF lv_htype <> 'NUMC'.
        <fs_att>-baseuomunit = 1.
      ENDIF.
      CLEAR: lv_htype.
      lv_string = <fs_att>-orderuomunit.
      CALL FUNCTION 'NUMERIC_CHECK'
        EXPORTING
          string_in = lv_string
        IMPORTING
*         string_out =
          htype     = lv_htype.
      IF lv_htype <> 'NUMC'.
        <fs_att>-orderuomunit = 1.
      ENDIF.
      CLEAR: lv_htype.
      lv_string = <fs_att>-orderuomunit.
      CALL FUNCTION 'NUMERIC_CHECK'
        EXPORTING
          string_in = lv_string
        IMPORTING
*         string_out =
          htype     = lv_htype.
      IF lv_htype <> 'NUMC'.
        <fs_att>-orderuom = 1.
      ENDIF.

***  Fill request number + request item
      IF lv_item_num IS INITIAL.
        lv_item_num = '0000000001'.
      ELSE.
        lv_item_num = lv_item_num + 1.
      ENDIF.
      <fs_att>-requestno = iv_requestnumber.
      <fs_att>-requestitem = COND /rb4r/mm_requestitem( WHEN lv_item_num IS INITIAL
                                                        THEN '0000000001'
                                                        ELSE lv_item_num
                                                        ).

***  Plant will get from Header
      <fs_att>-plant = is_header-plant.

      DATA(ls_matnrvh) = VALUE #( lt_matnrvh[ materialnumber = <fs_att>-materialno
                                              plant          = is_header-plant ] DEFAULT VALUE #( ) ).

      IF ls_matnrvh-materialnumber IS NOT INITIAL.
        <fs_att>-preconsumflag = ls_matnrvh-preconsumflag.
        <fs_att>-preconsum     = ls_matnrvh-consumption.
        <fs_att>-materialtype  = ls_matnrvh-materialtype.
        <fs_att>-baseuom       = ls_matnrvh-materialbaseuom.
        <fs_att>-priceuom      = ls_matnrvh-materialbaseuom.
        <fs_att>-orderuom      = ls_matnrvh-materialbaseuom.
      ELSE.
        <fs_att>-baseuom       = <fs_att>-orderuom.
        <fs_att>-priceuom      = <fs_att>-orderuom.
      ENDIF.

      DATA(ls_ir) = VALUE #( lt_ir[ materialnumber = <fs_att>-materialno
                                    creditornumber = <fs_att>-creditornumber
                                    purchorg       = <fs_att>-purchorg ]
                             DEFAULT VALUE #( ) ).
      IF ls_ir IS INITIAL.
        CONTINUE.
      ENDIF.

      <fs_att>-inforecord    = ls_ir-purchasinginforecord.
      <fs_att>-preconsumflag = ls_ir-consumptionflag.

      DATA(ls_sag) = VALUE #( lt_sag[ creditornumber = ls_ir-creditornumber
                                      material       = ls_ir-materialnumber
                                      purchorg       = ls_ir-purchorg
                                      plant          = ls_ir-plant ] DEFAULT VALUE #( ) ).
      IF ls_sag-sagnumber IS INITIAL.
        <fs_att>-isexistingsa = abap_false.
      ELSE.
        <fs_att>-isexistingsa          = abap_true.
        <fs_att>-schedulingagreementno = ls_sag-sagnumber.
      ENDIF.

*       "Calculating value for RecordYearlyVol field based on excel input of PricePerItem, ConsumptionValue, PriceUnit
      IF ls_ir-priceunit IS NOT INITIAL.
        <fs_att>-yearlyvolume = ls_ir-priceperitem / ls_ir-priceunit * <fs_att>-estconsumperyear.
      ENDIF.

      " Get IR text: PO text
      LOOP AT lt_stxh INTO DATA(ls_stxh) WHERE purchasinginforecord = ls_ir-purchasinginforecord.
        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = ls_stxh-tdid      "'BT'
            language                = ls_stxh-tdspras   "'E'
            name                    = ls_stxh-tdname
            object                  = ls_stxh-tdobject  "'EINE'
          TABLES
            lines                   = lt_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7
            OTHERS                  = 8.

        IF sy-subrc = 0.
          LOOP AT lt_lines INTO DATA(ls_line_potxt).
            IF ls_line_potxt-tdformat = '*'.
              ls_pot_cre-text = |{ ls_pot_cre-text }{ cl_abap_char_utilities=>newline }|.
            ENDIF.
            ls_pot_cre-text = |{ ls_pot_cre-text }{ ls_line_potxt-tdline }|.
          ENDLOOP.
        ENDIF.

        ls_pot_cre-requestnumber = iv_requestnumber."<fs_att>-inforecord."<fs_att>-RequestNo. " not have rq item or number yet using ir number to sync data when have rq number
        ls_pot_cre-requestitem   = <fs_att>-requestitem.
        ls_pot_cre-language      = ls_stxh-tdspras.
        APPEND ls_pot_cre TO lt_pot_cre.
      ENDLOOP.

    ENDLOOP.
*** validation -> append import log + remove error log from draft/save
    validate_excel(
      EXPORTING
        iv_requestnumber = iv_requestnumber
      CHANGING
        ct_data          = lt_data_ext ).

    IF lines( lt_data_ext ) > 0.
      upl_create_rq( EXPORTING iv_requestnumber = iv_requestnumber
                               it_scales        = it_scales
                               iv_is_draft      = iv_is_draft
                               is_header        = is_header
                               ct_selc          = ls_scheagree_selection
                     CHANGING  ct_data          = lt_data_ext
                               ct_po            = lt_pot_cre ).
    ENDIF.
  ENDMETHOD.


  METHOD store_the_data_to_entities_a2u.

    DATA lt_requestitem_create    TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestheader\_requestitem.
    DATA lt_scaleprice_create_run TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_sourcelist_cre        TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_sourcelist.
    DATA lt_sag_cre               TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_schedulingagreement.
    DATA lt_potext_cre            TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_potext.
    DATA lt_data                  TYPE tt_exceldata_a2up.
    DATA lt_data_ext              TYPE gtt_exceldata. "ltt_exceldata. " tt_exceldata_a2up.
    DATA lt_scl_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_sourcelist.
    DATA ls_scl_cre               TYPE /rb4r/mm_i_gmmc_sourcelist.
    DATA lt_sca_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_scaleprice.
    DATA ls_sca_cre               TYPE /rb4r/mm_i_gmmc_scaleprice.
    DATA lt_pot_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_potext.
    DATA ls_pot_cre               TYPE /rb4r/mm_i_gmmc_potext.
    DATA lt_sa_cre TYPE TABLE OF /rb4r/mm_i_gmmc_mmsa.
    DATA: ls_scheagree_selection  TYPE gty_selection.

    DATA lv_item                  TYPE i.
    DATA lt_matnrvh TYPE gtt_matnrvh.
    DATA lt_vendor TYPE gtt_vendorvh.

    DATA lt_ir TYPE /rb4r/cl_mm_gmmc_model=>tt_ir.
    DATA lt_konm TYPE /rb4r/cl_mm_gmmc_model=>tt_konm.
    DATA lt_sag TYPE /rb4r/cl_mm_gmmc_model=>tt_sag.
    DATA lt_srclst TYPE /rb4r/cl_mm_gmmc_model=>tt_scrlist.
    DATA lt_stxh TYPE gtt_stxh.
    DATA: lv_item_num TYPE /rb4r/mm_requestitem.

    IF it_data IS INITIAL.
      RETURN.
    ENDIF.

    lt_data = it_data.
    MOVE-CORRESPONDING lt_data TO lt_data_ext.
    " Update some fields before fill data

    DATA lt_lines TYPE TABLE OF tline.


    calc_upload_yearvalue( EXPORTING "it_data       = it_data
                                     iv_is_draft      = iv_is_draft
                                     iv_requestnumber = iv_requestnumber
                                     is_header        = is_header
                           CHANGING  ct_data          = lt_data_ext
                                     ct_matnrvh       = lt_matnrvh
                                     ct_vendorvh      = lt_vendor
                                     ct_selc          = ls_scheagree_selection
                                     ct_ir            = lt_ir
                                     ct_sag           = lt_sag
                                     ct_srclst        = lt_srclst
                                     ct_konm          = lt_konm
                                     ct_stxh          = lt_stxh ).

    LOOP AT lt_data_ext ASSIGNING FIELD-SYMBOL(<fs_att>).

***  Fill request number + request item
      IF lv_item_num IS INITIAL.
        lv_item_num = '0000000001'.
      ELSE.
        lv_item_num = lv_item_num + 1.
      ENDIF.
      <fs_att>-requestno = iv_requestnumber.
      <fs_att>-requestitem = COND /rb4r/mm_requestitem( WHEN lv_item_num IS INITIAL
                                                        THEN '0000000001'
                                                        ELSE lv_item_num
                                                        ).
***  Plant will get from Header
      <fs_att>-plant = is_header-plant.

      DATA(ls_matnrvh) = VALUE #( lt_matnrvh[ materialnumber = <fs_att>-materialno
                                              plant          = is_header-plant ] DEFAULT VALUE #( ) ).
      IF ls_matnrvh-materialnumber IS NOT INITIAL.
        <fs_att>-priceuom      = ls_matnrvh-materialbaseuom."<fs_att>-orderuom.
        <fs_att>-preconsumflag = ls_matnrvh-preconsumflag.
        <fs_att>-preconsum     = ls_matnrvh-consumption.
        <fs_att>-materialtype  = ls_matnrvh-materialtype.
        <fs_att>-baseuom       = ls_matnrvh-materialbaseuom.
      ENDIF.

      DATA(ls_ir) = VALUE #( lt_ir[ materialnumber = <fs_att>-materialno
                                    creditornumber = <fs_att>-creditornumber
                                    purchorg       = <fs_att>-purchorg ]
                             DEFAULT VALUE #( ) ).
      IF ls_ir IS INITIAL.
        CONTINUE.
      ENDIF.

      <fs_att>-inforecord    = ls_ir-purchasinginforecord.
      <fs_att>-preconsumflag = ls_ir-consumptionflag.

      IF <fs_att>-plandeliverytime IS INITIAL.
        <fs_att>-plandeliverytime = ls_ir-plandeliverytime.
      ENDIF.

      IF <fs_att>-standardquantity IS INITIAL.
        <fs_att>-standardquantity = ls_ir-standardquantity.
      ENDIF.

      IF <fs_att>-ponumber IS INITIAL.
        <fs_att>-ponumber = ls_ir-purchaseorderno.
      ENDIF.

      IF <fs_att>-confctrlkey IS INITIAL.
        <fs_att>-confctrlkey = ls_ir-confirmationcontrol.
      ENDIF.

      IF <fs_att>-acknowledgreq IS INITIAL.
        <fs_att>-acknowledgreq = ls_ir-acknowledgerequired.
      ENDIF.

      IF <fs_att>-taxcode IS INITIAL.
        <fs_att>-taxcode = ls_ir-taxcode.
      ENDIF.

      IF <fs_att>-minquantity IS INITIAL.
        <fs_att>-minquantity = ls_ir-minquantity.
      ENDIF.


*       "Calculating value for RecordYearlyVol field based on excel input of PricePerItem, ConsumptionValue, PriceUnit
      IF ls_ir-priceunit IS NOT INITIAL.
        <fs_att>-yearlyvolume = ls_ir-priceperitem / ls_ir-priceunit * <fs_att>-estconsumperyear.
      ENDIF.

      DATA(ls_srclst) = VALUE #( lt_srclst[ material       = ls_ir-materialnumber
                                            plant          = ls_ir-plant
                                            purorg         = ls_ir-purchorg
                                            creditornumber = ls_ir-creditornumber ] DEFAULT VALUE #( ) ).
      IF ls_srclst IS NOT INITIAL.
        <fs_att>-isexistingsourcelist = ls_srclst-srclstcheckbox.
        <fs_att>-srclstno             = ls_srclst-srclstnumber.
      ENDIF.


      DATA(ls_sag) = VALUE #( lt_sag[ creditornumber = ls_ir-creditornumber
                                      material       = ls_ir-materialnumber
                                      purchorg       = ls_ir-purchorg
                                      plant          = ls_ir-plant ] DEFAULT VALUE #( ) ).
      IF ls_sag-sagnumber IS INITIAL.
        <fs_att>-isexistingsa = abap_false.
      ELSE.
        <fs_att>-isexistingsa          = abap_true.
        <fs_att>-schedulingagreementno = ls_sag-sagnumber.
      ENDIF.
*      LOOP AT lt_sag INTO ls_sag.
*
*      ENDLOOP.

      " Get IR text: PO text
      LOOP AT lt_stxh INTO DATA(ls_stxh) WHERE purchasinginforecord = ls_ir-purchasinginforecord.
        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = ls_stxh-tdid      "'BT'
            language                = ls_stxh-tdspras   "'E'
            name                    = ls_stxh-tdname
            object                  = ls_stxh-tdobject  "'EINE'
          TABLES
            lines                   = lt_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7
            OTHERS                  = 8.

        IF sy-subrc = 0.
          LOOP AT lt_lines INTO DATA(ls_line_potxt).
            IF ls_line_potxt-tdformat = '*'.
              ls_pot_cre-text = |{ ls_pot_cre-text }{ cl_abap_char_utilities=>newline }|.
            ENDIF.
            ls_pot_cre-text = |{ ls_pot_cre-text }{ ls_line_potxt-tdline }|.
          ENDLOOP.
        ENDIF.

        ls_pot_cre-requestnumber = <fs_att>-inforecord ."<fs_att>-RequestNo. " not have rq item or number yet using ir number to sync data when have rq number
*        ls_pot_cre-RequestItem   = <fs_att>-RequestItem.
        ls_pot_cre-language      = ls_stxh-tdspras.
        APPEND ls_pot_cre TO lt_pot_cre.
      ENDLOOP.

      IF ls_ir-baseuom IS NOT INITIAL.
        <fs_att>-baseuom      = ls_ir-baseuom.
      ENDIF.
      IF ls_ir-orderuom IS NOT INITIAL.
        <fs_att>-orderuom     = ls_ir-orderuom.
      ENDIF.
      IF ls_ir-priceuom IS NOT INITIAL.
        <fs_att>-priceuom     = ls_ir-priceuom.
      ENDIF.
      IF ls_ir-baseuomunit IS NOT INITIAL.
        <fs_att>-baseuomunit  = ls_ir-baseuomunit.
      ENDIF.
      IF ls_ir-orderuomunit IS NOT INITIAL.
        <fs_att>-orderuomunit = ls_ir-orderuomunit.
      ENDIF.
      "<fs_att>-preconsum    = ls_matnrVH-Consumption.
      <fs_att>-inforecordtype = ls_ir-inforecordtype.

    ENDLOOP.
*** validation -> append import log + remove error log from draft/save
    validate_excel(
      EXPORTING
        iv_requestnumber = iv_requestnumber
      CHANGING
        ct_data          = lt_data_ext ).

    IF lines( lt_data_ext ) > 0.
      upl_create_rq( EXPORTING iv_requestnumber = iv_requestnumber
                               it_scales        = it_scales
                               iv_is_draft      = iv_is_draft
                               is_header        = is_header
                               ct_selc          = ls_scheagree_selection
                     CHANGING  ct_data          = lt_data_ext
                               ct_po            = lt_pot_cre ).
    ENDIF.

  ENDMETHOD.


  METHOD store_the_data_to_entities_a3.
    TYPES: BEGIN OF lty_exceldata.
             INCLUDE  TYPE /rb4r/mm_s_gmmc_excel_upl_ap3.
    TYPES:   isexistingsourcelist  TYPE flag,
             isexistingsa          TYPE flag,
             schedulingagreementno TYPE evrtn,
             preconsumflag         TYPE flag,
             srclstno              TYPE char5,
             priceuom              TYPE kmein,
             preconsum             TYPE vbwrt,
             materialtype          TYPE mtart,
             baseuomunit           TYPE umbsz,
             orderuomunit          TYPE umbsn,
             materialgroup         TYPE matkl,
             inforecordtype        TYPE esokz,
             estconsumperyear      TYPE vbwrt,
             priceperitem          TYPE char11,
             yearlyvolume          TYPE float,
             priceunit             TYPE char1,
             currency              TYPE waers,
             orderuom              TYPE meins,
             standardquantity      TYPE char13,
             ponumber              TYPE ebeln,
             taxcode               TYPE mwskz,
             isexistingscale       TYPE flag,
           END OF lty_exceldata,

           ltt_exceldata TYPE TABLE OF lty_exceldata.

    DATA lt_requestitem_create  TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestheader\_requestitem.
    DATA lt_sourcelist_create     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_sourcelist.
    DATA lt_sourcelist_create_run     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_sourcelist.

    DATA lt_scaleprice_create     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_scaleprice_create_run     TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_sourcelist_cre        TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_sourcelist.
    DATA lt_sag_cre                TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_schedulingagreement.
    DATA lt_potext_cre            TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_potext.

    DATA: lt_data TYPE tt_exceldata_a3.
    DATA: lt_data_ext TYPE gtt_exceldata." ltt_exceldata.
    DATA: ls_src_selection         TYPE /rb9x/rb0m_s_ind_prefl_srchsel.
    DATA: ls_scheagree_selection   TYPE gty_selection.

    DATA lrs_plant  TYPE gty_selection-plant.
    DATA lrs_matnr  TYPE gty_selection-material.
    DATA lrs_lifnr  TYPE gty_selection-creditornumber.
    DATA lrs_purorg TYPE gty_selection-purchorg.
    DATA lv_item                  TYPE i.

    DATA lt_scl_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_sourcelist.
    DATA ls_scl_cre               TYPE /rb4r/mm_i_gmmc_sourcelist.
    DATA lt_sca_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_scaleprice.
    DATA ls_sca_cre               TYPE /rb4r/mm_i_gmmc_scaleprice.
    DATA lt_pot_cre               TYPE TABLE OF /rb4r/mm_i_gmmc_potext.
    DATA ls_pot_cre               TYPE /rb4r/mm_i_gmmc_potext.
    DATA lt_sa_cre TYPE TABLE OF /rb4r/mm_i_gmmc_mmsa.

    DATA lt_matnrvh TYPE gtt_matnrvh.
    DATA lt_vendor TYPE gtt_vendorvh.

    DATA lt_ir TYPE /rb4r/cl_mm_gmmc_model=>tt_ir.
    DATA lt_konm TYPE /rb4r/cl_mm_gmmc_model=>tt_konm.
    DATA lt_sag TYPE /rb4r/cl_mm_gmmc_model=>tt_sag.
    DATA lt_srclst TYPE /rb4r/cl_mm_gmmc_model=>tt_scrlist.
    DATA lt_stxh TYPE gtt_stxh.
    DATA: lv_item_num TYPE /rb4r/mm_requestitem.

    IF it_data IS INITIAL.
      RETURN.
    ENDIF.

    lt_data = it_data.
    MOVE-CORRESPONDING lt_data TO lt_data_ext.

    DATA lt_lines TYPE TABLE OF tline.


    calc_upload_yearvalue( EXPORTING "it_data       = it_data
                                     iv_is_draft      = iv_is_draft
                                     iv_requestnumber = iv_requestnumber
                                     is_header        = is_header
                           CHANGING  ct_data          = lt_data_ext
                                     ct_matnrvh       = lt_matnrvh
                                     ct_vendorvh      = lt_vendor
                                     ct_selc          = ls_scheagree_selection
                                     ct_ir            = lt_ir
                                     ct_sag           = lt_sag
                                     ct_srclst        = lt_srclst
                                     ct_konm          = lt_konm
                                     ct_stxh          = lt_stxh ).

    LOOP AT lt_data_ext ASSIGNING FIELD-SYMBOL(<fs_att>).

***  Fill request number + request item
      IF lv_item_num IS INITIAL.
        lv_item_num = '0000000001'.
      ELSE.
        lv_item_num = lv_item_num + 1.
      ENDIF.
      <fs_att>-requestno = iv_requestnumber.
      <fs_att>-requestitem = COND /rb4r/mm_requestitem( WHEN lv_item_num IS INITIAL
                                                        THEN '0000000001'
                                                        ELSE lv_item_num
                                                        ).
***  Plant will get from Header
      <fs_att>-plant = is_header-plant.

      DATA(ls_ir) = VALUE #( lt_ir[ materialnumber = <fs_att>-materialno
                                    creditornumber = <fs_att>-creditornumber
                                    purchorg       = <fs_att>-purchorg ]
                             DEFAULT VALUE #( ) ).
      IF ls_ir IS INITIAL.
        CONTINUE.
      ENDIF.

      DATA(ls_matnrvh) = VALUE #( lt_matnrvh[ materialnumber = <fs_att>-materialno
                                              plant          = is_header-plant ] DEFAULT VALUE #( ) ).

      IF ls_matnrvh-materialnumber IS NOT INITIAL.
        <fs_att>-priceuom      = ls_matnrvh-materialbaseuom.
        <fs_att>-preconsumflag = ls_matnrvh-preconsumflag.
        <fs_att>-preconsum     = ls_matnrvh-consumption.
        <fs_att>-materialtype  = ls_matnrvh-materialtype.
        <fs_att>-baseuom       = ls_matnrvh-materialbaseuom.
      ENDIF.
      <fs_att>-inforecordtype = ls_ir-inforecordtype.
      IF ls_ir-baseuom IS NOT INITIAL.
        <fs_att>-baseuom        = ls_ir-baseuom.
      ENDIF.
      IF ls_ir-orderuom IS NOT INITIAL.
        <fs_att>-orderuom       = ls_ir-orderuom.
      ENDIF.
      IF ls_ir-priceuom IS NOT INITIAL.
        <fs_att>-priceuom       = ls_ir-priceuom.
      ENDIF.
      IF ls_ir-baseuomunit IS NOT INITIAL.
        <fs_att>-baseuomunit    = ls_ir-baseuomunit.
      ENDIF.
      IF ls_ir-orderuomunit IS NOT INITIAL.
        <fs_att>-orderuomunit   = ls_ir-orderuomunit.
      ENDIF.
      IF ls_ir-materialgroup IS NOT INITIAL.
        <fs_att>-materialgroup  = ls_ir-materialgroup.
      ELSEIF ls_matnrvh-materialgroup IS NOT INITIAL.
        <fs_att>-materialgroup  = ls_matnrvh-materialgroup.
      ENDIF.

      <fs_att>-inforecord    = ls_ir-purchasinginforecord.
      <fs_att>-preconsumflag = ls_ir-consumptionflag.
      <fs_att>-creditorname = ls_ir-creditorname.
      <fs_att>-priceperitem = ls_ir-priceperitem.
      <fs_att>-currency = ls_ir-currency.
      <fs_att>-partnumber = ls_ir-partnumber.
      <fs_att>-inforecordtype = ls_ir-inforecordtype.
      <fs_att>-standardquantity = ls_ir-standardquantity.
      <fs_att>-priceunit = ls_ir-priceunit.
      <fs_att>-purchaseorderno = ls_ir-purchaseorderno.
      <fs_att>-taxcode = ls_ir-taxcode.
      <fs_att>-externalproductid = ls_ir-extid.
      <fs_att>-contract = ls_ir-contract.

      IF <fs_att>-confirmationcontrolkey IS INITIAL.
        <fs_att>-confirmationcontrolkey = ls_ir-confirmationcontrol.
      ENDIF.
      IF <fs_att>-plandeliverytime IS INITIAL.
        <fs_att>-plandeliverytime = ls_ir-plandeliverytime.
      ENDIF.

      IF <fs_att>-plandeliverytime IS INITIAL.
        <fs_att>-plandeliverytime = ls_ir-plandeliverytime.
      ENDIF.

      IF <fs_att>-confctrlkey IS INITIAL.
        <fs_att>-confctrlkey = ls_ir-confirmationcontrol.
      ENDIF.

      IF <fs_att>-acknowledgreq IS INITIAL.
        <fs_att>-acknowledgreq = ls_ir-acknowledgerequired.
      ENDIF.

      IF <fs_att>-minquantity IS INITIAL.
        <fs_att>-minquantity = ls_ir-minquantity.
      ENDIF.

      IF <fs_att>-blockingflag IS INITIAL.
        <fs_att>-blockingflag = ls_ir-blockingflag.
      ENDIF.

      IF NOT <fs_att>-isexistingsa = abap_true.

        lv_item = 1.
        <fs_att>-isexistingsa = ls_ir-isexistingscale.
        LOOP AT lt_konm INTO DATA(ls_konm) WHERE creditornumber = ls_ir-creditornumber
                                     AND  material       = ls_ir-materialnumber
                                     AND  purchorg       = ls_ir-purchorg
                                     AND plant          = ls_ir-plant.
          ls_sca_cre-requestnumber = <fs_att>-requestno.
          ls_sca_cre-requestitem   = <fs_att>-requestitem.
          ls_sca_cre-scaleitem     = lv_item. lv_item += 1.
          ls_sca_cre-amount        = ls_konm-amount.

          ls_sca_cre-quantity      = ls_konm-quantity.
          ls_sca_cre-unitofmeasure = ls_konm-meins.
          APPEND ls_sca_cre TO lt_sca_cre.
          CLEAR ls_sca_cre.
        ENDLOOP.
      ENDIF.

*       "Calculating value for RecordYearlyVol field based on excel input of PricePerItem, ConsumptionValue, PriceUnit
      IF ls_ir-priceunit IS NOT INITIAL.
        <fs_att>-yearlyvolume = ls_ir-priceperitem / ls_ir-priceunit * <fs_att>-estconsumperyear.
      ENDIF.

      DATA(ls_sag) = VALUE #( lt_sag[ creditornumber = ls_ir-creditornumber
                                      material       = ls_ir-materialnumber
                                      purchorg       = ls_ir-purchorg
                                      plant          = ls_ir-plant ] DEFAULT VALUE #( ) ).
      IF ls_sag-sagnumber IS INITIAL.
        <fs_att>-isexistingsa = abap_false.
      ELSE.
        <fs_att>-isexistingsa          = abap_true.
        <fs_att>-schedulingagreementno = ls_sag-sagnumber.
      ENDIF.

      " Get IR text: PO text
      LOOP AT lt_stxh INTO DATA(ls_stxh) WHERE purchasinginforecord = ls_ir-purchasinginforecord.
        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            client                  = sy-mandt
            id                      = ls_stxh-tdid      "'BT'
            language                = ls_stxh-tdspras   "'E'
            name                    = ls_stxh-tdname
            object                  = ls_stxh-tdobject  "'EINE'
          TABLES
            lines                   = lt_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7
            OTHERS                  = 8.

        IF sy-subrc = 0.
          LOOP AT lt_lines INTO DATA(ls_line_potxt).
            IF ls_line_potxt-tdformat = '*'.
              ls_pot_cre-text = |{ ls_pot_cre-text }{ cl_abap_char_utilities=>newline }|.
            ENDIF.
            ls_pot_cre-text = |{ ls_pot_cre-text }{ ls_line_potxt-tdline }|.
          ENDLOOP.
        ENDIF.

        ls_pot_cre-requestnumber = <fs_att>-requestno. " not have rq item or number yet using ir number to sync data when have rq number
        ls_pot_cre-requestitem   = <fs_att>-requestitem.
        ls_pot_cre-language      = ls_stxh-tdspras.
        APPEND ls_pot_cre TO lt_pot_cre.
      ENDLOOP.

    ENDLOOP.

*** validation -> append import log + remove error log from draft/save
    validate_excel(
      EXPORTING
        iv_requestnumber = iv_requestnumber
      CHANGING
        ct_data          = lt_data_ext ).

    IF lines( lt_data_ext ) > 0.
      DATA: lt_scales TYPE TABLE OF /rb4r/mm_s_gmmc_excel_scales.
      upl_create_rq( EXPORTING iv_requestnumber = iv_requestnumber
                               it_scales        = lt_scales
                               iv_is_draft      = iv_is_draft
                               is_header        = is_header
                               ct_selc          = ls_scheagree_selection
                     CHANGING  ct_data          = lt_data_ext
                               ct_po            = lt_pot_cre ).
    ENDIF.

  ENDMETHOD.


  METHOD calc_upload_yearvalue.
    DATA lrs_plant  TYPE LINE OF gty_selection-plant.
    DATA lrs_matnr  TYPE LINE OF gty_selection-material.
    DATA lrs_lifnr  TYPE LINE OF gty_selection-creditornumber.
    DATA lrs_purorg TYPE LINE OF gty_selection-purchorg.

    IF ct_data IS INITIAL.
      RETURN.
    ENDIF.

    DATA(lo_model) = NEW /rb4r/cl_mm_gmmc_model( ).

    DATA(lr_matnr) = VALUE lo_model->tr_matnr( FOR ls_data IN ct_data
                                               ( option = 'EQ'
                                                 sign   = 'I'
                                                 low    = ls_data-materialno ) ).
    DATA(lr_werks) = VALUE lo_model->tr_werks( option = 'EQ'
                                               sign   = 'I'
                                               ( low = is_header-plant ) ).

    DATA(lr_ir) = VALUE lo_model->tr_ir( ).
    DATA(lr_vendor) = VALUE lo_model->tr_vendor( FOR ls_data IN ct_data
                                                 ( option = 'EQ'
                                                   sign   = 'I'
                                                   low    = ls_data-creditornumber ) ).
    DATA(lr_purorg) = VALUE lo_model->tr_purorg( FOR ls_data IN ct_data
                                                 ( option = 'EQ'
                                                   sign   = 'I'
                                                   low    = ls_data-purchorg ) ).

    lo_model->prepare_irsearch( EXPORTING iv_ir      = lr_ir
                                          iv_matnr   = lr_matnr
                                          iv_werks   = lr_werks
                                          iv_vendor  = lr_vendor
                                          iv_purorg  = lr_purorg
                                          iv_reqtype = is_header-requesttype
                                IMPORTING et_data    = ct_ir
                                          et_konm    = ct_konm
                                          et_srclst  = ct_srclst
                                          et_sag     = ct_sag ).
    IF ct_ir IS NOT INITIAL.
***  1. add leading zero for ct_ir
      DATA: lv_string TYPE string.
      LOOP AT ct_ir ASSIGNING FIELD-SYMBOL(<fs_ir>).
        CLEAR: lv_string.
        lv_string = <fs_ir>-creditornumber.
        IF lv_string CO '0123456789'.
          DATA(lv_check) = 'X'.
        ENDIF.
        <fs_ir>-creditornumber = COND lifnr( WHEN lv_check = 'X'
                                             AND strlen( <fs_ir>-creditornumber ) < 10
                                             THEN |{ <fs_ir>-creditornumber PAD = '0' ALIGN = RIGHT WIDTH = 10 }|
                                             ELSE <fs_ir>-creditornumber ).
        CLEAR: lv_check.
      ENDLOOP.
      " Get creator language
      SELECT t1~purchasinginforecord,
             concat( t1~purchasinginforecord, concat( t1~purchorg, concat( '0', t1~plant ) ) ) AS tdname
      FROM @ct_ir AS t1
      WHERE plant = @is_header-plant
      INTO TABLE @DATA(lt_potext).        "#EC CI_NOWHERE ##EC CI_SUBRC
      IF sy-subrc = 0.
        SORT lt_potext ASCENDING BY purchasinginforecord.
      ENDIF.

      IF lt_potext IS NOT INITIAL.
        SELECT t1~tdobject,
               t1~tdname,
               t1~tdid,
               t1~tdspras,
               t2~purchasinginforecord
          FROM stxh                  AS t1
               INNER JOIN @lt_potext AS t2
               ON t1~tdname = t2~tdname
          WHERE tdobject = 'EINE'
            AND tdid     = 'BT'
          INTO TABLE @ct_stxh.            "#EC CI_NOWHERE ##EC CI_SUBRC
        IF sy-subrc = 0.
          SORT ct_stxh ASCENDING BY purchasinginforecord.
        ENDIF.
      ENDIF.
    ENDIF.

*    SELECT MaterialNumber,
*           MaterialType,
*           MaterialGroup,
*           Plant,
*           MaterialBaseUoM,
*           Consumption,
*           PreconsumFlag
*      FROM /RB4R/MM_I_GMMC_Material_VH
*      FOR ALL ENTRIES IN @ct_data
*      WHERE plant          = @is_header-Plant
*        AND MaterialNumber = @ct_data-materialno
*      INTO TABLE @ct_matnrVH.
    lo_model->prepare_materialvh( EXPORTING iv_skip  = 0
                                            iv_top   = 1000
                                            iv_matnr = lr_matnr
                                            iv_werks = lr_werks
                                  IMPORTING et_data  = DATA(lt_matnr_vh) ).
    ct_matnrvh = CORRESPONDING #( lt_matnr_vh ).
    IF sy-subrc = 0.
      SORT ct_matnrvh ASCENDING BY materialnumber.
    ENDIF.

    SELECT  creditornumber,
            creditorname,
            purchorg,
            plant,
            region,
            sortfield,
            street,
            city,
            postal_code,
            land1
      FROM /rb4r/mm_tf_gmmc_vendor_vh
      FOR ALL ENTRIES IN @ct_data
      WHERE creditornumber = @ct_data-creditornumber
      INTO TABLE @ct_vendorvh.
    IF sy-subrc = 0.
      SORT ct_vendorvh BY creditornumber ASCENDING.
    ENDIF.
    ct_data = ct_data.

    LOOP AT ct_data ASSIGNING FIELD-SYMBOL(<fs_att>).

      IF <fs_att>-plant IS INITIAL.
        <fs_att>-plant = is_header-plant.
      ENDIF.

      " 2 Prepare data for Request Item before creating or updating
      IF line_exists( ct_vendorvh[ creditornumber = <fs_att>-creditornumber ] ).
        <fs_att>-creditorname = ct_vendorvh[ creditornumber = <fs_att>-creditornumber ]-creditorname.
      ENDIF.

      " 9 Add new field in Request item isExistingScale = true if scale price of this requestItem is maintanced in Excel file
      IF <fs_att>-price1 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price1 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price2 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price2 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price3 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price3 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price4 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price4 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price5 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price5 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price6 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price6 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price7 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price7 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price8 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price8 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price9 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price9 / <fs_att>-priceunit.
        ENDIF.
      ELSEIF <fs_att>-price10 <> 0.
        <fs_att>-isexistingscale = abap_true.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-price10 / <fs_att>-priceunit.
        ENDIF.
      ENDIF.

      " 8   Calculating value for RecordYearlyVol field based on excel input of PricePerItem, ConsumptionValue, PriceUnit
      "     If No scale price mantained in excel   RecordYearlyVol = PricePerItem/ PriceUnit* ConsumptionValue
      IF <fs_att>-isexistingscale = abap_false.
        IF <fs_att>-priceunit <> 0.
          <fs_att>-yearlyvolume = <fs_att>-estconsumperyear * <fs_att>-priceperitem / <fs_att>-priceunit.
        ENDIF.

      ENDIF.

      lrs_plant-option = 'EQ'.
      lrs_plant-sign   = 'I'.
      lrs_plant-low    = <fs_att>-plant.
      IF NOT line_exists( ct_selc-plant[ low = lrs_plant-low ] ).
        APPEND lrs_plant TO ct_selc-plant.
      ENDIF.
      lrs_matnr-option = 'EQ'.
      lrs_matnr-sign   = 'I'.
      lrs_matnr-low    = <fs_att>-materialno.
      IF NOT line_exists( ct_selc-material[ low = lrs_matnr-low ] ).
        APPEND lrs_matnr TO ct_selc-material.
      ENDIF.
      lrs_lifnr-option = 'EQ'.
      lrs_lifnr-sign   = 'I'.
      lrs_lifnr-low    = <fs_att>-creditornumber.
      IF NOT line_exists( ct_selc-creditornumber[ low = lrs_lifnr-low ] ).
        APPEND lrs_lifnr TO ct_selc-creditornumber.
      ENDIF.

      lrs_purorg-option = 'EQ'.
      lrs_purorg-sign   = 'I'.
      lrs_purorg-low    = <fs_att>-purchorg.
      IF NOT line_exists( ct_selc-purchorg[ low = lrs_purorg-low ] ).
        APPEND lrs_purorg TO ct_selc-purchorg.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.


  METHOD upl_create_rq.
    DATA:
      lt_requestitem_create TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestheader\_requestitem,
      lt_requestitem_update TYPE TABLE FOR UPDATE /rb4r/mm_i_gmmc_requestheader\\requestitem.
    DATA lt_scaleprice_create_run TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
    DATA lt_sourcelist_cre        TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_sourcelist.
    DATA lt_sag_cre               TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_schedulingagreement.
    DATA lt_potext_cre            TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_potext.

*** Check decimal for currency
    DATA: lr_currency TYPE RANGE OF tcurx-currkey.
    lr_currency = VALUE #( FOR ls_curr IN ct_data
                         ( sign = 'I'
                           option = 'EQ'
                           low = ls_curr-currency ) ).
    SELECT *
      FROM tcurx
      INTO TABLE @DATA(lt_curr)
      WHERE currkey IN @lr_currency.
    IF sy-subrc = 0.
      SORT lt_curr.

      LOOP AT ct_data ASSIGNING FIELD-SYMBOL(<fs_curr>).

        DATA(ls_currx) = VALUE #( lt_curr[ currkey = <fs_curr>-currency ] OPTIONAL ).

        IF line_exists( lt_curr[ currkey = <fs_curr>-currency ] ).
          DATA(lv_dec) = 2 - ls_currx-currdec.
          <fs_curr>-priceperitem = COND kbetr_kond( WHEN ls_currx IS NOT INITIAL
                                                     AND ls_currx-currdec < 2
                                                     AND lv_dec = 1
                                                    THEN <fs_curr>-priceperitem / 10
                                                    WHEN ls_currx IS NOT INITIAL
                                                     AND ls_currx-currdec < 2
                                                     AND lv_dec = 2
                                                    THEN <fs_curr>-priceperitem / 100
                                                    ELSE <fs_curr>-priceperitem ).
        ENDIF.

      ENDLOOP.

    ENDIF.

    lt_requestitem_create = VALUE #(
        ( %is_draft     = iv_is_draft
          requestnumber = iv_requestnumber
          %target       = VALUE #( FOR ls_data IN ct_data
                           ( %is_draft              = iv_is_draft
                             materialnumber         = ls_data-materialno
                             materialgroup          = ls_data-materialgroup
                             inforecordtype         = ls_data-inforecordtype
                             creditorname           = ls_data-creditorname
                             creditornumber         = ls_data-creditornumber
                             purchorg               = ls_data-purchorg
                             plant                  = ls_data-plant
                             priceperitem           = ls_data-priceperitem
                             priceunit              = ls_data-priceunit
                             currency               = ls_data-currency
                             orderuom               = ls_data-orderuom
                             baseuom                = ls_data-baseuom
                             priceuom               = ls_data-priceuom
                             baseuomunit            = ls_data-baseuomunit
                             orderuomunit           = ls_data-orderuomunit
                             standardquantity       = ls_data-standardquantity
                             plandeliverytime       = ls_data-plandeliverytime
                             consumptionvalue       = ls_data-estconsumperyear
                             purchaseorderno        = ls_data-ponumber
                             confirmationcontrolkey = ls_data-confctrlkey
                             acknowledgmentreq      = ls_data-acknowledgreq
                             taxcode                = ls_data-taxcode
                             minimumpoquantity      = ls_data-minquantity
                             inforecord             = ls_data-inforecord
                             isexistingscale        = ls_data-isexistingscale
                             isexistingsourcelist   = ls_data-isexistingsourcelist
                             isexistingsa           = ls_data-isexistingsa
                             preconsumflag          = ls_data-preconsumflag
                             preconsum              = ls_data-preconsum
                             materialtype           = ls_data-materialtype
                             recordyearlyvol        = ls_data-yearlyvolume
                             schedulingagreementno  = ls_data-schedulingagreementno
                             linecomment            = ls_data-linecomment
                             srclstno               = ls_data-srclstno
                             contract               = ls_data-contract
                             partnumber             = ls_data-partnumber
                             externalproductid      = ls_data-externalproductid
                             %control               = VALUE #(
                                               materialnumber         = if_abap_behv=>mk-on
                                               materialgroup          = if_abap_behv=>mk-on
                                               inforecordtype         = if_abap_behv=>mk-on
                                               creditorname           = if_abap_behv=>mk-on
                                               creditornumber         = if_abap_behv=>mk-on
                                               purchorg               = if_abap_behv=>mk-on
                                               plant                  = if_abap_behv=>mk-on
                                               priceperitem           = if_abap_behv=>mk-on
                                               priceunit              = if_abap_behv=>mk-on
                                               currency               = if_abap_behv=>mk-on
                                               baseuom                = if_abap_behv=>mk-on
                                               orderuom               = if_abap_behv=>mk-on
                                               priceuom               = if_abap_behv=>mk-on
                                               standardquantity       = if_abap_behv=>mk-on
                                               plandeliverytime       = if_abap_behv=>mk-on
                                               consumptionvalue       = if_abap_behv=>mk-on
                                               purchaseorderno        = if_abap_behv=>mk-on
                                               confirmationcontrolkey = if_abap_behv=>mk-on
                                               acknowledgmentreq      = if_abap_behv=>mk-on
                                               taxcode                = if_abap_behv=>mk-on
                                               minimumpoquantity      = if_abap_behv=>mk-on
                                               isexistingscale        = if_abap_behv=>mk-on
                                               isexistingsourcelist   = if_abap_behv=>mk-on
                                               isexistingsa           = if_abap_behv=>mk-on
                                               inforecord             = if_abap_behv=>mk-on
                                               preconsumflag          = if_abap_behv=>mk-on
                                               preconsum              = if_abap_behv=>mk-on
                                               materialtype           = if_abap_behv=>mk-on
                                               baseuomunit            = if_abap_behv=>mk-on
                                               orderuomunit           = if_abap_behv=>mk-on
                                               schedulingagreementno  = if_abap_behv=>mk-on
                                               srclstno               = if_abap_behv=>mk-on
                                               linecomment            = if_abap_behv=>mk-on
                                               contract               = if_abap_behv=>mk-on
                                               partnumber             = if_abap_behv=>mk-on
                                               externalproductid      = if_abap_behv=>mk-on
                                               recordyearlyvol        = if_abap_behv=>mk-on ) ) ) ) ).

    MODIFY ENTITY /rb4r/mm_i_gmmc_requestheader
    CREATE BY \_requestitem AUTO FILL CID
    WITH lt_requestitem_create
    FAILED DATA(ls_failed_crt)
    REPORTED DATA(ls_reported_crt)
    MAPPED DATA(ls_mapped_crt).

    " 3 Prepare data for Scale Price before creating or updating base on Request Item
    DATA lt_scaleprice_excel TYPE gtt_exceldata.

    LOOP AT ct_data INTO DATA(ls_data_excel).
      DATA(ls_mapped_item) = ls_mapped_crt-requestitem[ sy-tabix ].
      ls_data_excel-requestno   = ls_mapped_item-requestnumber.
      ls_data_excel-requestitem = ls_mapped_item-requestitem.
      lt_scaleprice_excel = VALUE #( BASE lt_scaleprice_excel
                               FOR ls_scales IN it_scales
                               WHERE ( materialno = ls_data_excel-materialno )
                               LET ls_currx1 = VALUE #( lt_curr[ currkey = ls_data_excel-currency ] OPTIONAL )
                                   lv_dec1 = 2 - ls_currx1-currdec
                               IN
                             ( requestno = ls_mapped_item-requestnumber
                               requestitem = ls_mapped_item-requestitem
                               qty1 = ls_scales-qty
                               price1 = COND kbetr_kond( WHEN ls_currx1 IS NOT INITIAL
                                                          AND ls_currx1-currdec < 2
                                                          AND lv_dec1 = 1
                                                         THEN ls_scales-price / 10
                                                         WHEN ls_currx1 IS NOT INITIAL
                                                          AND ls_currx1-currdec < 2
                                                          AND lv_dec1 = 2
                                                         THEN ls_scales-price / 100
                                                         ELSE ls_scales-price )
                               baseuom = ls_data_excel-baseuom
                               currency = ls_data_excel-currency
                               priceunit = ls_data_excel-priceunit ) ).
    ENDLOOP.

    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestheader
    BY \_requestitem
    ALL FIELDS
    WITH CORRESPONDING #( ls_mapped_crt-requestitem )
    RESULT DATA(lt_requestitem)
    FAILED DATA(lt_rs_faild).

    LOOP AT ls_mapped_crt-requestitem INTO DATA(ls_request_item_mapped).

      DATA(ls_rqitem) = VALUE #( lt_requestitem[ KEY entity
                                 requestnumber = ls_request_item_mapped-requestnumber
                                 requestitem   = ls_request_item_mapped-requestitem ] DEFAULT VALUE #( ) ).

      LOOP AT ct_po ASSIGNING FIELD-SYMBOL(<fs_pot>) WHERE requestnumber = ls_rqitem-inforecord.
        ls_mapped_item = ls_mapped_crt-requestitem[ sy-tabix ].
        <fs_pot>-requestnumber = ls_rqitem-requestnumber.
        <fs_pot>-requestitem   = ls_rqitem-requestitem.
      ENDLOOP.

      lt_scaleprice_create_run = VALUE #(
          ( %is_draft     = ls_request_item_mapped-%is_draft
            requestnumber = ls_request_item_mapped-requestnumber
            requestitem   = ls_request_item_mapped-requestitem
            %target       = VALUE #( FOR ls_data_ext IN lt_scaleprice_excel WHERE ( requestno     = ls_request_item_mapped-requestnumber AND requestitem = ls_request_item_mapped-requestitem )
                                                                                  ( %is_draft     = ls_request_item_mapped-%is_draft
                                                                                    quantity      = ls_data_ext-qty1
                                                                                    amount        = ls_data_ext-price1
                                                                                    unitofmeasure = ls_data_ext-orderuom
                                                                                    currency      = ls_data_ext-currency
                                                                                    priceunit     = ls_data_ext-priceunit
                                                                                    updateflag    = 'C'
                                                                                    %control      = VALUE #( quantity      = if_abap_behv=>mk-on
                                                                                                             amount        = if_abap_behv=>mk-on
                                                                                                             unitofmeasure = if_abap_behv=>mk-on
                                                                                                             currency      = if_abap_behv=>mk-on
                                                                                                             priceunit     = if_abap_behv=>mk-on
                                                                                                             updateflag    = if_abap_behv=>mk-on ) ) ) ) ).

      IF lt_scaleprice_create_run IS INITIAL AND ls_rqitem-isexistingscale = abap_true.
        /rb4r/cl_mm_gmmc_model=>prepare_inforscalepricesearch( EXPORTING is_src_selection = ct_selc
                                                                         iv_skip          = 0
                                                                         iv_top           = 100
                                                               IMPORTING et_data          = DATA(lt_scalprice) ).

        lt_scaleprice_create_run = VALUE #(
            ( %is_draft     = ls_request_item_mapped-%is_draft
              requestnumber = ls_request_item_mapped-requestnumber
              requestitem   = ls_request_item_mapped-requestitem
              %target       = VALUE #( FOR ls_scal_cre IN lt_scalprice
                                       "WHERE ( requestnumber = ls_request_item_mapped-RequestNumber AND requestitem = ls_request_item_mapped-RequestItem )
                                       WHERE ( creditornumber = ls_rqitem-creditornumber AND
                                               purchorg       = ls_rqitem-purchorg AND
                                               plant          = ls_rqitem-plant AND
                                               material       = ls_rqitem-materialnumber )
                                             ( %is_draft      = ls_request_item_mapped-%is_draft
                                               requestnumber  = ls_request_item_mapped-requestnumber
                                               requestitem    = ls_request_item_mapped-requestitem
*                                         Quantity      = ls_scal_cre-Quantity
                                               amount         = ls_scal_cre-amount
                                               unitofmeasure  = ls_scal_cre-baseuom
                                               currency       = ls_scal_cre-currency
*                                         PriceUnit     = ls_scal_cre-PriceUnit
                                               updateflag     = 'U'
                                               %control       = VALUE #( "Quantity      = if_abap_behv=>mk-on
                                                   requestnumber = if_abap_behv=>mk-on
                                                   requestitem   = if_abap_behv=>mk-on
                                                   amount        = if_abap_behv=>mk-on
                                                   unitofmeasure = if_abap_behv=>mk-on
                                                   currency      = if_abap_behv=>mk-on
                                                   priceunit     = if_abap_behv=>mk-on
                                                   updateflag    = if_abap_behv=>mk-on ) ) ) ) ).
      ENDIF.

      IF lt_scaleprice_create_run IS NOT INITIAL.
        MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader
               ENTITY requestitem CREATE BY \_materialscaleprice
               AUTO FILL CID
               WITH lt_scaleprice_create_run
               " TODO: variable is assigned but never used (ABAP cleaner)
               FAILED DATA(ls_failed_scp_crt)
               " TODO: variable is assigned but never used (ABAP cleaner)
               REPORTED DATA(ls_reported_scp_crt)
               " TODO: variable is assigned but never used (ABAP cleaner)
               MAPPED DATA(ls_mapped_scp_crt).
      ENDIF.

      CLEAR lt_scaleprice_create_run.

      IF ls_rqitem-isexistingsourcelist = abap_true.
        /rb4r/cl_mm_gmmc_model=>prepare_sourcelistsearch( EXPORTING is_src_selection = ct_selc
                                                                    iv_skip          = 0
                                                                    iv_top           = 100
                                                          IMPORTING et_data          = DATA(lt_sourcelist) ).

        lt_sourcelist_cre = VALUE #(
            ( %is_draft     = ls_request_item_mapped-%is_draft
              requestnumber = ls_request_item_mapped-requestnumber
              requestitem   = ls_request_item_mapped-requestitem
              %target       = VALUE #( FOR ls_sourcel_cre IN lt_sourcelist
*                                       WHERE ( requestnumber = ls_request_item_mapped-RequestNumber AND requestitem = ls_request_item_mapped-RequestItem )
                                       WHERE ( creditornumber                = ls_rqitem-creditornumber AND
                                               purchorg                      = ls_rqitem-purchorg AND
                                               plant                         = ls_rqitem-plant AND
                                               material                      = ls_rqitem-materialnumber )
                                             ( %is_draft                     = ls_request_item_mapped-%is_draft
                                               requestnumber                 = ls_request_item_mapped-requestnumber
                                               requestitem                   = ls_request_item_mapped-requestitem
                                               plant                         = ls_sourcel_cre-plant
                                               createdon                     = ls_sourcel_cre-createdon
                                               createdby                     = ls_sourcel_cre-createdby
                                               validstart                    = ls_sourcel_cre-validfrom
                                               validend                      = ls_sourcel_cre-validto
                                               vendornumber                  = ls_sourcel_cre-creditornumber
                                               fixedsupplier                 = ls_sourcel_cre-fixedvendor
                                               agreementnumber               = ls_sourcel_cre-sagnumber
                                               agreementitem                 = ls_sourcel_cre-sagitem
                                               purchasingorganization        = ls_sourcel_cre-purchorg
                                               purchasingdocumentcategory    = ls_sourcel_cre-purchdoccategory
                                               unitofmeasure                 = ls_sourcel_cre-po_uom
                                               blockedsourcesupply           = ls_sourcel_cre-blockedsrcsupply
                                               fixedoutagreementitem         = ls_sourcel_cre-fixedagreementitem
                                               sourcelistinmaterialsplanning = ls_sourcel_cre-srclistmrp
                                               logicalsystem                 = ls_sourcel_cre-logicalsystem
                                               specialstockindicator         = ls_sourcel_cre-specialstockindicator
                                               centralcontract               = ls_sourcel_cre-srmcontractid
                                               centralcontractitem           = ls_sourcel_cre-srmcontractitm
                                               updateflag                    = ''
                                               %control                      = VALUE #(
                                                   requestnumber                 = if_abap_behv=>mk-on
                                                   requestitem                   = if_abap_behv=>mk-on
                                                   plant                         = if_abap_behv=>mk-on
                                                   createdon                     = if_abap_behv=>mk-on
                                                   createdby                     = if_abap_behv=>mk-on
                                                   validstart                    = if_abap_behv=>mk-on
                                                   validend                      = if_abap_behv=>mk-on
                                                   vendornumber                  = if_abap_behv=>mk-on
                                                   fixedsupplier                 = if_abap_behv=>mk-on
                                                   agreementnumber               = if_abap_behv=>mk-on
                                                   agreementitem                 = if_abap_behv=>mk-on
                                                   purchasingorganization        = if_abap_behv=>mk-on
                                                   purchasingdocumentcategory    = if_abap_behv=>mk-on
                                                   unitofmeasure                 = if_abap_behv=>mk-on
                                                   blockedsourcesupply           = if_abap_behv=>mk-on
                                                   fixedoutagreementitem         = if_abap_behv=>mk-on
                                                   sourcelistinmaterialsplanning = if_abap_behv=>mk-on
                                                   logicalsystem                 = if_abap_behv=>mk-on
                                                   specialstockindicator         = if_abap_behv=>mk-on
                                                   centralcontract               = if_abap_behv=>mk-on
                                                   centralcontractitem           = if_abap_behv=>mk-on
                                                   updateflag                    = if_abap_behv=>mk-on ) ) ) ) ).

        IF lt_sourcelist_cre IS NOT INITIAL.
          MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
                 ENTITY requestitem CREATE BY \_sourcelist
                 AUTO FILL CID
                 WITH lt_sourcelist_cre
                 " TODO: variable is assigned but never used (ABAP cleaner)
                 FAILED DATA(ls_failed_slst_crt)
                 " TODO: variable is assigned but never used (ABAP cleaner)
                 REPORTED DATA(ls_reported_slist_crt)
                 " TODO: variable is assigned but never used (ABAP cleaner)
                 MAPPED DATA(ls_mapped_slist_crt).
        ENDIF.
        CLEAR lt_sourcelist_cre.
      ENDIF.

      lt_potext_cre = VALUE #(
          ( %is_draft     = ls_request_item_mapped-%is_draft
            requestnumber = ls_request_item_mapped-requestnumber
            requestitem   = ls_request_item_mapped-requestitem
            %target       = VALUE #( FOR ls_potxt_cre IN ct_po
                                     WHERE ( requestnumber = ls_request_item_mapped-requestnumber AND requestitem = ls_request_item_mapped-requestitem )
                                           ( %is_draft     = ls_request_item_mapped-%is_draft
                                             language      = ls_potxt_cre-language
                                             text          = ls_potxt_cre-text
                                             updateflag    = ''
                                             %control      = VALUE #( language   = if_abap_behv=>mk-on
                                                                      text       = if_abap_behv=>mk-on
                                                                      updateflag = if_abap_behv=>mk-on ) ) ) ) ).

      IF lt_potext_cre IS NOT INITIAL.
        MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
               ENTITY requestitem CREATE BY \_potext
               AUTO FILL CID
               WITH lt_potext_cre
               " TODO: variable is assigned but never used (ABAP cleaner)
               FAILED DATA(ls_failed_potxt_crt)
               " TODO: variable is assigned but never used (ABAP cleaner)
               REPORTED DATA(ls_reported_potxt_crt)
               " TODO: variable is assigned but never used (ABAP cleaner)
               MAPPED DATA(ls_mapped_potxt_crt).
      ENDIF.
      CLEAR lt_potext_cre.

      IF ls_rqitem-isexistingsa = abap_true.

        /rb4r/cl_mm_gmmc_model=>prepare_scheagree( EXPORTING is_src_selection = ct_selc
                                                             iv_skip          = 0
                                                             iv_top           = 100
                                                   IMPORTING et_data          = DATA(lt_mmsa) ).

        lt_sag_cre = VALUE #( ( %is_draft     = ls_request_item_mapped-%is_draft
                                requestnumber = ls_request_item_mapped-requestnumber
                                requestitem   = ls_request_item_mapped-requestitem
                                %target       = VALUE #( FOR ls_sacre IN lt_mmsa
*                                       WHERE ( requestnumber = ls_request_item_mapped-RequestNumber AND requestitem = ls_request_item_mapped-RequestItem )
                                                         WHERE ( creditornumber = ls_rqitem-creditornumber AND
                                                                 purchorg       = ls_rqitem-purchorg AND
                                                                 plant          = ls_rqitem-plant AND
                                                                 material       = ls_rqitem-materialnumber )
                                                               ( %is_draft      = ls_request_item_mapped-%is_draft
                                                                 requestnumber  = ls_request_item_mapped-requestnumber
                                                                 requestitem    = ls_request_item_mapped-requestitem
                                                                 sanumber       = ls_sacre-sagnumber
                                                                 satype         = ls_sacre-sagtype
                                                                 yearlyvolumme  = ls_sacre-yearlyvolume
                                                                 sacreateflg    = ls_sacre-sagcheckbox
                                                                 purdocnumber   = ls_sacre-ponumber
                                                                 confcontrlkey  = ls_sacre-confctrlkey
                                                                 ordackreq      = ls_sacre-acknowledgreq
                                                                 minquan        = ls_sacre-minquan
                                                                 shipinstr      = ls_sacre-shipinstr
                                                                 sloc           = ls_sacre-sagsloc
                                                                 savalidstart   = ls_sacre-sagvalidstart
                                                                 savalidend     = ls_sacre-sagvalidend
                                                                 accasscat      = ls_sacre-acctasscat
                                                                 updateflag     = ''
                                                                 relcreateprof  = ls_sacre-creationprofile
                                                                 addnumber      = ls_sacre-deliveryaddress
*                                                           UnloadPoint   = ls_sacre-UnloadPoint
                                                                 email          = ls_sacre-emailadress
                                                                 currcode       = ls_sacre-currency
*                                                           UnitCode      = ls_sacre-UnitCode
                                                                 %control       = VALUE #( sanumber      = if_abap_behv=>mk-on
                                                                                           satype        = if_abap_behv=>mk-on
                                                                                           requestnumber = if_abap_behv=>mk-on
                                                                                           requestitem   = if_abap_behv=>mk-on
                                                                                           yearlyvolumme = if_abap_behv=>mk-on
                                                                                           sacreateflg   = if_abap_behv=>mk-on
                                                                                           purdocnumber  = if_abap_behv=>mk-on
                                                                                           confcontrlkey = if_abap_behv=>mk-on
                                                                                           ordackreq     = if_abap_behv=>mk-on
                                                                                           minquan       = if_abap_behv=>mk-on
                                                                                           shipinstr     = if_abap_behv=>mk-on
                                                                                           sloc          = if_abap_behv=>mk-on
                                                                                           savalidstart  = if_abap_behv=>mk-on
                                                                                           savalidend    = if_abap_behv=>mk-on
                                                                                           accasscat     = if_abap_behv=>mk-on
                                                                                           updateflag    = if_abap_behv=>mk-on
                                                                                           relcreateprof = if_abap_behv=>mk-on
                                                                                           addnumber     = if_abap_behv=>mk-on
*                                                                                    UnloadPoint   = if_abap_behv=>mk-on
                                                                                           email         = if_abap_behv=>mk-on
                                                                                           currcode      = if_abap_behv=>mk-on
*                                                                                    UnitCode      = if_abap_behv=>mk-on
                                                                     ) ) ) ) ).
        IF lt_sag_cre IS NOT INITIAL.
          MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
               ENTITY requestitem CREATE BY \_schedulingagreement
               AUTO FILL CID
               WITH lt_sag_cre
               " TODO: variable is assigned but never used (ABAP cleaner)
               FAILED DATA(ls_failed_mmsa_crt)
               " TODO: variable is assigned but never used (ABAP cleaner)
               REPORTED DATA(ls_reported_mmsa_crt)
               " TODO: variable is assigned but never used (ABAP cleaner)
               MAPPED DATA(ls_mapped_mmsa_crt).
          CLEAR lt_sag_cre.
        ENDIF.
      ENDIF.

    ENDLOOP.

*** Final remove leading zero in vendor before display UI
    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestheader
    BY \_requestitem
    ALL FIELDS
    WITH CORRESPONDING #( ls_mapped_crt-requestitem )
    RESULT DATA(lt_requestitem1)
    FAILED DATA(lt_rs_faild1).

    IF lines( lt_requestitem1 ) > 0.

      LOOP AT lt_requestitem1 ASSIGNING FIELD-SYMBOL(<fs_reqitem>).
        <fs_reqitem>-creditornumber = |{ <fs_reqitem>-creditornumber ALPHA = OUT }|.
      ENDLOOP.

      MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
      ENTITY requestitem
      UPDATE FIELDS ( creditornumber )
      WITH VALUE #( FOR ls_items IN lt_requestitem1
                    ( %tky                    = ls_items-%tky
                      creditornumber          = ls_items-creditornumber
                      %control-creditornumber = if_abap_behv=>mk-on ) )
      FAILED DATA(ls_failed1)
      REPORTED DATA(ls_reported1).
      IF ls_failed1 IS NOT INITIAL.
        DATA(lv_failed1) = 'X'.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD transform_xml_to_abap.
    DATA: lt_data     TYPE STANDARD TABLE OF /rb4r/mm_s_gmmc_excel_upload,
          lv_req_type TYPE char1,
          lt_scales   TYPE TABLE OF /rb4r/mm_s_gmmc_excel_scales.
    DATA lo_shared_str_dom TYPE REF TO if_ixml_document.
    DATA lo_shared_str_nodeset TYPE REF TO if_ixml_node.
    DATA lv_shared_str_xml TYPE xstring.
    "We will pass the Sheet XML as XSL source and Shared XML as XSL Parameter
    "Sheet XML contains just the indexes
    "Using those indexes we need to fetch the real data from Shared String XML
    "To send the Shared String XML as a XSL parameter we need to remove the
    " - namespaces

    SELECT dcpfm
      FROM usr01
      INTO TABLE @DATA(lt_decimal)
      WHERE bname = @sy-uname.
    IF sy-subrc = 0.
      SORT lt_decimal.
      DATA(ls_decimal) = VALUE #( lt_decimal[ 1 ] ).
      CASE ls_decimal-dcpfm.
        WHEN 'X'.
          DATA(lv_dec1) = ','."|','|.
          DATA(lv_dec2) = '.'."|'.'|.
          DATA(lv_decimal) = 0.
        WHEN 'Y'.
          lv_dec1 = ''.
          lv_dec2 = ','."|','|.
          lv_decimal = 1.
        WHEN ''.
          lv_dec1 = '.'."|'.'| .
          lv_dec2 = ','."|','|.
          lv_decimal = 1.
      ENDCASE.
    ENDIF.

    TRY.
        CALL TRANSFORMATION /rb4r/mm_tr_xlsx_remove_namesp
        SOURCE XML iv_shared_data
        RESULT XML lv_shared_str_xml.
        "Create a nodeset from the shared XML
        CALL FUNCTION 'SDIXML_XML_TO_DOM'
          EXPORTING
            xml           = lv_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom->clone( ).
        ENDIF.
        IF iv_purchase IS INITIAL.
          lv_req_type = iv_requesttype.
          CASE iv_requesttype.

            WHEN gc_createmat.
              CALL TRANSFORMATION /rb4r/mm_tr_xlsx_sheet_import
               PARAMETERS p_shared_string = lo_shared_str_nodeset
                          p_decimal = lv_decimal
*                          p_dec2 = lv_dec2
                SOURCE XML iv_sheet_data
                RESULT lt_data = lt_data .
              MOVE lt_data TO et_data.
              LOOP AT et_data ASSIGNING FIELD-SYMBOL(<fs_data_a1>).
*              CONDENSE <fs_data_a1>-materialno.
*              CONDENSE <fs_data_a1>-materialgroup.
*              CONDENSE <fs_data_a1>-creditornumber.
*              CONDENSE <fs_data_a1>-purchorg.
*              CONDENSE <fs_data_a1>-plantuf1.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a1>-creditornumber
                  IMPORTING
                    output = <fs_data_a1>-creditornumber.

              ENDLOOP.

            WHEN gc_updateir .
              CALL TRANSFORMATION /rb4r/mm_tr_xlsx_app2_up_de "/rb4r/mm_tr_xlsx_sheet_app2_up "/RB4R/MM_TR_XLSX_APP2_UP_DE
               PARAMETERS p_shared_string = lo_shared_str_nodeset
                          p_decimal = lv_decimal
                SOURCE XML iv_sheet_data
                RESULT lt_data = et_data2up.
              IF et_data2up IS NOT INITIAL.
                DATA(lt_data2u) = et_data2up.
                SORT lt_data2u BY materialno  creditornumber  plant purchorg ASCENDING.
                DELETE ADJACENT DUPLICATES FROM lt_data2u COMPARING   materialno  creditornumber  plant purchorg.

                SELECT * FROM /rb4r/mm_i_gmmc_pir
                INTO TABLE @DATA(lt_inforecord)
                FOR ALL ENTRIES IN @lt_data2u
                WHERE materialnumber = @lt_data2u-materialno
                AND creditornumber = @lt_data2u-creditornumber
                AND  plant = @lt_data2u-plant
                AND  purchorg = @lt_data2u-purchorg.
                IF sy-subrc = 0.
                  SORT lt_inforecord BY inforecordtype ASCENDING.
                ENDIF.
              ENDIF.
              LOOP AT et_data2up ASSIGNING FIELD-SYMBOL(<fs_data_a2u>).
                IF line_exists( lt_inforecord[ materialnumber = <fs_data_a2u>-materialno creditornumber = <fs_data_a2u>-creditornumber  plant = <fs_data_a2u>-plant  purchorg = <fs_data_a2u>-purchorg ] ).
                  <fs_data_a2u>-inforecordtype = lt_inforecord[ materialnumber = <fs_data_a2u>-materialno creditornumber = <fs_data_a2u>-creditornumber  plant = <fs_data_a2u>-plant  purchorg = <fs_data_a2u>-purchorg ]-inforecordtype.

                ENDIF.
*              CONDENSE <fs_data_a1>-materialno.
*              CONDENSE <fs_data_a1>-materialgroup.
*              CONDENSE <fs_data_a1>-creditornumber.
*              CONDENSE <fs_data_a1>-purchorg.
*              CONDENSE <fs_data_a1>-plantuf1.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a2u>-creditornumber
                  IMPORTING
                    output = <fs_data_a2u>-creditornumber.
*              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input  = <fs_data_a2u>-materialno
                  IMPORTING
                    output = <fs_data_a2u>-materialno.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a2u>-plant
                  IMPORTING
                    output = <fs_data_a2u>-plant.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a2u>-confctrlkey
                  IMPORTING
                    output = <fs_data_a2u>-confctrlkey.
              ENDLOOP.


            WHEN gc_createir.

              CALL TRANSFORMATION  /rb4r/mm_tr_xlsx_sheet_app2
               PARAMETERS p_shared_string = lo_shared_str_nodeset
                          p_decimal = lv_decimal
                SOURCE XML iv_sheet_data
                RESULT lt_data = et_data2 .

              LOOP AT et_data2 ASSIGNING FIELD-SYMBOL(<fs_data_a2>).
*              CONDENSE <fs_data_a1>-materialno.
*              CONDENSE <fs_data_a1>-materialgroup.
*              CONDENSE <fs_data_a1>-creditornumber.
*              CONDENSE <fs_data_a1>-purchorg.
*              CONDENSE <fs_data_a1>-plantuf1.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a2>-creditornumber
                  IMPORTING
                    output = <fs_data_a2>-creditornumber.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input  = <fs_data_a2>-materialno
                  IMPORTING
                    output = <fs_data_a2>-materialno.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a2>-plant
                  IMPORTING
                    output = <fs_data_a2>-plant.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a2>-confctrlkey
                  IMPORTING
                    output = <fs_data_a2>-confctrlkey.
              ENDLOOP.


            WHEN gc_createwop .
              CALL TRANSFORMATION /rb4r/mm_tr_xlsx_sheet_app3
               PARAMETERS p_shared_string = lo_shared_str_nodeset
                SOURCE XML iv_sheet_data
                RESULT lt_data = et_data3.
              LOOP AT et_data3 ASSIGNING FIELD-SYMBOL(<fs_data_a3>).
*              CONDENSE <fs_data_a1>-materialno.
*              CONDENSE <fs_data_a1>-materialgroup.
*              CONDENSE <fs_data_a1>-creditornumber.
*              CONDENSE <fs_data_a1>-purchorg.
*              CONDENSE <fs_data_a1>-plantuf1.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a3>-creditornumber
                  IMPORTING
                    output = <fs_data_a3>-creditornumber.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input  = <fs_data_a3>-materialno
                  IMPORTING
                    output = <fs_data_a3>-materialno.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a3>-plant
                  IMPORTING
                    output = <fs_data_a3>-plant.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <fs_data_a3>-confctrlkey
                  IMPORTING
                    output = <fs_data_a3>-confctrlkey.
              ENDLOOP.

          ENDCASE.
        ELSE.
          lv_req_type = 'P'.
          CALL TRANSFORMATION /rb4r/mm_tr_xlsx_pur_up
           PARAMETERS p_shared_string = lo_shared_str_nodeset
            SOURCE XML iv_sheet_data
            RESULT lt_data = et_datapur.
          LOOP AT et_datapur ASSIGNING FIELD-SYMBOL(<fs_data_pur>).
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = <fs_data_pur>-creditornumber
              IMPORTING
                output = <fs_data_pur>-creditornumber.
            CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
              EXPORTING
                input  = <fs_data_pur>-materialno
              IMPORTING
                output = <fs_data_pur>-materialno.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = <fs_data_pur>-plant
              IMPORTING
                output = <fs_data_pur>-plant.
          ENDLOOP.
        ENDIF.

        CALL TRANSFORMATION /rb4r/mm_tr_xlsx_sheet_scale
               PARAMETERS p_shared_string = lo_shared_str_nodeset
                          p_req_type = lv_req_type
                SOURCE XML iv_sheet_data
                RESULT lt_data = lt_scales.
        IF lines( lt_scales ) > 0.
          LOOP AT lt_scales ASSIGNING FIELD-SYMBOL(<fs_scales>)
                            WHERE qty IS NOT INITIAL.
            CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
              EXPORTING
                input  = <fs_scales>-materialno
              IMPORTING
                output = <fs_scales>-materialno.
            APPEND <fs_scales> TO et_scales.
          ENDLOOP.
        ENDIF.

      CATCH cx_xslt_exception INTO DATA(lx) .
        DATA(lv_lx) = lx->get_text(  ).
    ENDTRY.
  ENDMETHOD.


  METHOD _req_exists.
    IF iv_requestno IS INITIAL.
      RETURN.
    ENDIF.

    IF iv_requestno = mv_requestno.
      rv_exists = mv_exists.
      RETURN.
    ENDIF.

    SELECT SINGLE @abap_true FROM /rb4r/mm_i_gmmc_requestheader
      WHERE requestnumber = @iv_requestno
      INTO @rv_exists.
    IF sy-subrc = 0 AND rv_exists = abap_true.
      mv_exists = abap_true.
      mv_requestno = iv_requestno.
    ENDIF.
  ENDMETHOD.


  METHOD validate_excel.
    TYPES: BEGIN OF lty_uom,
             meins TYPE t006-msehi,
           END OF lty_uom.
    TYPES: BEGIN OF lty_matkl,
             matkl TYPE matkl,
           END OF lty_matkl.
    TYPES: BEGIN OF lty_lifnr,
             lifnr0 TYPE lifnr,
             lifnr1 TYPE lifnr,
           END OF lty_lifnr.

    DATA lv_requestno       TYPE /rb4r/mm_requestno.
    DATA lt_uom             TYPE STANDARD TABLE OF lty_uom.
    DATA lt_termc_rnge      TYPE /rb9x/rb0m_t_ind_string_range.
    DATA ls_src_selection   TYPE /rb9x/rb0m_s_ind_prefl_srchsel.
    DATA lo_ind_mat_appl    TYPE REF TO /rb9x/rb0m_cl_ind_mat_appl.
    DATA gt_requestheader   TYPE TABLE OF /rb4r/mm_request.
    DATA gt_requestitem     TYPE TABLE OF /rb4r/mm_rqitem.
    DATA lt_reflist_res     TYPE /rb9x/rb0m_t_ind_preflist.
    DATA lt_req_validation  TYPE STANDARD TABLE OF /rb4r/mm_i_gmmc_reqvalidation.
    DATA lt_name_value      TYPE abap_parmbind_tab.
    DATA ls_name_value      TYPE abap_parmbind.
    DATA lv_purch_mat_grp   TYPE if_fdt_types=>element_text.
    DATA lv_purch_plant     TYPE if_fdt_types=>element_text.
    DATA lv_n10a_matgrp     TYPE if_fdt_types=>element_text.
    DATA lt_super_purch_grp TYPE TABLE OF lty_matkl.
    DATA ls_super_purch_grp LIKE LINE OF lt_super_purch_grp.
    DATA lv_werks           TYPE if_fdt_types=>element_text.
    DATA lv_kostl           TYPE if_fdt_types=>element_text.
    DATA lt_plant_team      TYPE TABLE OF /rb4r/mm_s_gmmc_plant_agent.
    DATA lt_pur_decision    TYPE TABLE OF /rb4r/mm_s_gmmc_purch_buyer.
    DATA lt_lifnr           TYPE TABLE OF lty_lifnr.

    DATA ls_pur_decision    TYPE /rb4r/mm_s_gmmc_purch_buyer.
    DATA lrt_material_type  TYPE RANGE OF mara-mtart.
    DATA ls_material_type  LIKE LINE OF lrt_material_type.

    /rb4r/cl_mm_gmmc_reqhead=>read_request( EXPORTING iv_requestnumber = iv_requestnumber
                                            IMPORTING et_requestheader = DATA(lt_req_header)
                                                      et_requestitem   = DATA(lt_req_item) ).

    " ---------------------------------------------------------------------

    gt_requestheader = VALUE #( FOR ls_entities IN lt_req_header
                                ( requestno             = ls_entities-requestnumber
                                  createdby             = ls_entities-createdby
                                  createddate           = ls_entities-createdon
                                  plant                 = ls_entities-plant
                                  status                = ls_entities-status
                                  systemid              = ls_entities-systemid
                                  workitemid            = ls_entities-workitemid
                                  product_type          = ls_entities-producttype
                                  req_type              = ls_entities-requesttype
                                  action                = ls_entities-action
                                  local_last_changed_at = sy-datum
                                  local_last_changed_on = sy-uzeit ) ).
    IF lines( ct_data ) > 0.
      gt_requestitem = VALUE #( FOR ls_item IN ct_data
                                ( requestno        = ls_item-requestno
                                  requestitem      = ls_item-requestitem
                                  materialno       = ls_item-materialno
                                  werks            = ls_item-plant
                                  creditorname     = ls_item-creditorname
                                  creditornumber   = ls_item-creditornumber
                                  partnumber       = ls_item-partnumber
                                 " typecode             = ls_item-typecode
                                  "ean                  = ls_item-ean
                                  baseuom          = ls_item-baseuom
                                  "mb                   = ls_item-reorderpoint
                                  materialgroup    = ls_item-materialgroup
                                  "typeshortdescription = ls_item-typeshortdescp
                                  "materialstatus       = ls_item-materialstatus
                                  materialtype     = ls_item-materialtype
                                  "termcode             = ls_item-termcode
                                  "user_status          = ls_item-userstatus
                                  "equnr                = ls_item-equipmentnumber
*                                  estconsumperyear = ls_item-estconsumperyear    "consumptionvalue
*                                  priceperitem     = ls_item-priceperitem "no need to validate
                                  priceunit        = ls_item-priceunit
                                  currency         = ls_item-currency
                                  "is_supplier          = ls_item-issupplier
                                  "is_manufactr         = ls_item-ismanufactr
                                  "repair_material      = ls_item-repairmaterial
                                  "storage_location     = ls_item-storagelocation
                                  purchorg         = ls_item-purchorg
                                  inforecord       = ls_item-inforecord
                                  inforecordtype   = ls_item-inforecordtype
                                  plandeliverytime = ls_item-plandeliverytime
                                  standardquantity = ls_item-standardquantity
                                  baseuomunit      = ls_item-baseuomunit
                                  orderuom         = ls_item-orderuom
                                  orderuomunit     = ls_item-orderuomunit
                                  priceuom         = ls_item-priceuom
                                  "mfrpartnumber        = ls_item-mfrpartnumber
                                  "mfrnumber            = ls_item-mfrnumber
                                  "class_id             = ls_item-classid
                                  yearlyvolume     = ls_item-yearlyvolume    "recordyearlyvol
                                  confctrlkey      = ls_item-confirmationcontrolkey
                                  acknowledgreq    = ls_item-acknowledgreq    "acknowledgmentreq
                                  minquan          = ls_item-minquantity    "minimumpoquantity
                                  "local_mat_text       = ls_item-localplantmaterialtext
                                  taxcode          = ls_item-taxcode
                                  contract         = ls_item-contract
                                  blockingflag     = ls_item-blockingflag
                                  be_blockingflag  = ls_item-blockingflag    "beblockingflag
                                  linecomment      = ls_item-linecomment
                                  "is_greatest_matgrp   = ls_item-isgreatestmatgrpflag
                                  "is_configuration     = ls_item-isconfiguration
                                  "is_fixed_supplsrc    = ls_item-isfixedsupplsrc
                                  preconsum        = ls_item-preconsum
                                  "termcddesc           = ls_item-termcodedesc
                                  "nodispoflg           = ls_item-nodispoflag
                                  preconsum_flg    = ls_item-preconsumflag
                                  "exstprtno_flg        = ls_item-existedpartnoflag
                                  "istakeover           = ls_item-istakeover
                                  extprodid        = ls_item-externalproductid
                                  purchaseorderno  = ls_item-purchaseorderno ) ).
    ENDIF.

    IF lines( ct_pur_data ) > 0.
      READ ENTITY /rb4r/mm_i_gmmc_requestheader
      BY \_requestitem  ALL FIELDS
      WITH VALUE #( ( %key-requestnumber = iv_requestnumber
                      %is_draft          = iv_is_draft
                    ) )
      RESULT DATA(lt_read_rba)
      LINK DATA(lt_link_table)
      FAILED DATA(ls_failed_rba).
      IF sy-subrc = 0.
        gt_requestitem = VALUE #( FOR ls_pur_data IN ct_pur_data
                                  LET ls_item1 = COND #( WHEN line_exists( lt_read_rba[ requestnumber = iv_requestnumber requestitem = ls_pur_data-requestitem ] )
                                THEN lt_read_rba[ requestnumber        = iv_requestnumber requestitem = ls_pur_data-requestitem ] )
                                  IN
                                (                 requestno            = ls_item1-requestnumber
                                                  requestitem          = ls_item1-requestitem
                                                  materialno           = ls_item1-materialnumber
                                                  werks                = ls_item1-plant
                                                  creditorname         = ls_item1-creditorname
                                                  creditornumber       = ls_item1-creditornumber
                                                  partnumber           = ls_item1-partnumber
                                                  typecode             = ls_item1-typecode
                                                  ean                  = ls_item1-ean
                                                  baseuom              = ls_item1-baseuom
                                                  mb                   = ls_item1-reorderpoint
                                                  materialgroup        = ls_item1-materialgroup
                                                  typeshortdescription = ls_item1-typeshortdescp
                                                  materialstatus       = ls_item1-materialstatus
                                                  materialtype         = ls_item1-materialtype
                                                  termcode             = ls_item1-termcode
                                                  user_status          = ls_item1-userstatus
                                                  equnr                = ls_item1-equipmentnumber
*                                                  estconsumperyear     = ls_item1-consumptionvalue "no need to validate
*                                                  priceperitem         = ls_item1-priceperitem "no need to validate
                                                  priceunit            = ls_item1-priceunit
                                                  currency             = ls_item1-currency
                                                  is_supplier          = ls_item1-issupplier
                                                  is_manufactr         = ls_item1-ismanufactr
                                                  repair_material      = ls_item1-repairmaterial
                                                  storage_location     = ls_item1-storagelocation
                                                  purchorg             = ls_item1-purchorg
                                                  inforecord           = ls_item1-inforecord
                                                  inforecordtype       = ls_item1-inforecordtype
                                                  plandeliverytime     = ls_item1-plandeliverytime
                                                  standardquantity     = ls_item1-standardquantity
                                                  baseuomunit          = ls_item1-baseuomunit
                                                  orderuom             = ls_item1-orderuom
                                                  orderuomunit         = ls_item1-orderuomunit
                                                  priceuom             = ls_item1-priceuom
                                                  mfrpartnumber        = ls_item1-mfrpartnumber
                                                  mfrnumber            = ls_item1-mfrnumber
                                                  class_id             = ls_item1-classid
                                                  yearlyvolume         = ls_item1-recordyearlyvol
                                                  confctrlkey          = ls_item1-confirmationcontrolkey
                                                  acknowledgreq        = ls_item1-acknowledgmentreq
                                                  minquan              = ls_item1-minimumpoquantity
                                                  local_mat_text       = ls_item1-localplantmaterialtext
                                                  taxcode              = ls_item1-taxcode
                                                  contract             = ls_item1-contract
                                                  blockingflag         = ls_item1-blockingflag
                                                  be_blockingflag      = ls_item1-beblockingflag
                                                  linecomment          = ls_item1-linecomment
                                                  is_greatest_matgrp   = ls_item1-isgreatestmatgrpflag
                                                  is_configuration     = ls_item1-isconfiguration
                                                  is_fixed_supplsrc    = ls_item1-isfixedsupplsrc
                                                  preconsum            = ls_item1-preconsum
                                                  termcddesc           = ls_item1-termcodedesc
                                                  nodispoflg           = ls_item1-nodispoflag
                                                  preconsum_flg        = ls_item1-preconsumflag
                                                  exstprtno_flg        = ls_item1-existedpartnoflag
                                                  istakeover           = ls_item1-istakeover
                                                  extprodid            = ls_item1-externalproductid
                                                  purchaseorderno      = ls_item1-purchaseorderno ) ).
      ENDIF.
    ENDIF.

    LOOP AT gt_requestitem ASSIGNING FIELD-SYMBOL(<ls_requestitem>).
      " Collect all UoM

      IF line_exists( lt_uom[ meins = <ls_requestitem>-baseuom ] ).
      ELSE.
        APPEND VALUE #( meins = <ls_requestitem>-baseuom ) TO lt_uom. "#EC CI_APPEND_OK
      ENDIF.

      IF line_exists( lt_uom[ meins = <ls_requestitem>-orderuom ] ).
      ELSE.
        APPEND VALUE #( meins = <ls_requestitem>-orderuom ) TO lt_uom. "#EC CI_APPEND_OK
      ENDIF.

      IF line_exists( lt_uom[ meins = <ls_requestitem>-priceuom ] ).
      ELSE.
        APPEND VALUE #( meins = <ls_requestitem>-priceuom ) TO lt_uom. "#EC CI_APPEND_OK
      ENDIF.

      " Collect term code
      IF line_exists( lt_termc_rnge[ low = <ls_requestitem>-termcode ] ).
      ELSE.
        APPEND VALUE #( sign   = 'I'
                        option = 'EQ'
                        low    = <ls_requestitem>-termcode ) TO lt_termc_rnge. "#EC CI_APPEND_OK
      ENDIF.

    ENDLOOP.

    " ----------------------------------------------------------------------
    " UOM validation
    " ----------------------------------------------------------------------
    DELETE ADJACENT DUPLICATES FROM lt_uom COMPARING meins.
    IF lt_uom IS NOT INITIAL.
      SELECT msehi AS meins,
             mseh3 AS meins_ex
        FROM t006a                   "#EC CI_GENBUFF  "#EC CI_SGLSELECT
        FOR ALL ENTRIES IN @lt_uom
        WHERE msehi = @lt_uom-meins
        INTO TABLE @DATA(lt_uom_valid).
      IF sy-subrc = 0.
        SORT lt_uom_valid BY meins_ex ASCENDING.
      ENDIF.
      SELECT msehi AS meins,
             mseh3 AS meins_ex
        FROM t006a                   "#EC CI_GENBUFF  "#EC CI_SGLSELECT
        FOR ALL ENTRIES IN @lt_uom
        WHERE mseh3 = @lt_uom-meins
        APPENDING TABLE @lt_uom_valid.
      IF sy-subrc = 0.
        SORT lt_uom_valid BY meins_ex ASCENDING.
      ENDIF.

    ENDIF.

    " ----------------------------------------------------------------------
    " Creditor validation
    " ----------------------------------------------------------------------
    IF lines( gt_requestitem ) > 0.
      " ----------------------------------------------------------------------
      " Start add zero number lead
      " ----------------------------------------------------------------------
      DATA: lv_string TYPE string.
      LOOP AT gt_requestitem ASSIGNING FIELD-SYMBOL(<ls_req_zero>).
        CLEAR:lv_string.
        lv_string = <ls_req_zero>-creditornumber.
        IF lv_string CO '0123456789'.
          DATA(lv_check) = 'X'.
        ENDIF.
        <ls_req_zero>-creditornumber = COND lifnr( WHEN lv_check = 'X' "<ls_req_zero>-creditornumber CO '0123456789'
                                                    AND strlen( <ls_req_zero>-creditornumber ) < 10
                                                   THEN |{ <ls_req_zero>-creditornumber PAD = '0' ALIGN = RIGHT WIDTH = 10 }|
                                                   ELSE <ls_req_zero>-creditornumber ).
        CLEAR:lv_string.
        lv_string = <ls_req_zero>-mfrnumber.
        IF <ls_req_zero>-mfrnumber IS NOT INITIAL.
          IF lv_string CO '0123456789'.
            DATA(lv_check_mfr) = 'X'.
          ENDIF.
          <ls_req_zero>-mfrnumber      = COND lifnr( WHEN lv_check_mfr = 'X' "<ls_req_zero>-mfrnumber CO '0123456789'
                                                      AND strlen( <ls_req_zero>-mfrnumber ) < 10
                                                     THEN |{ <ls_req_zero>-mfrnumber PAD = '0' ALIGN = RIGHT WIDTH = 10 }|
                                                     ELSE <ls_req_zero>-mfrnumber ).
        ENDIF.
        CLEAR: lv_check, lv_check_mfr, lv_string.
        IF <ls_req_zero>-equnr IS NOT INITIAL.
          lv_string = <ls_req_zero>-equnr .
          IF lv_string CO '0123456789' AND strlen( <ls_req_zero>-equnr ) < 18.
            lv_check = 'X'.
          ENDIF.
          <ls_req_zero>-equnr = COND equnr( WHEN lv_check = 'X' "<ls_req_zero>-creditornumber CO '0123456789'
                                            AND strlen( <ls_req_zero>-equnr ) < 18
                                            AND <ls_req_zero>-equnr IS NOT INITIAL
                                            THEN |{ <ls_req_zero>-equnr PAD = '0' ALIGN = RIGHT WIDTH = 18 }|
                                            ELSE <ls_req_zero>-equnr ).
        ENDIF.
        CLEAR: lv_check, lv_string.
      ENDLOOP.
      lt_lifnr = VALUE #(
          FOR <fs_item> IN gt_requestitem
          ( lifnr0 = <fs_item>-creditornumber
            lifnr1 = <fs_item>-mfrnumber ) ).
      IF lines( lt_lifnr ) > 0.
        SORT lt_lifnr BY lifnr0
                         lifnr1.
        DELETE ADJACENT DUPLICATES FROM lt_lifnr COMPARING lifnr0 lifnr1.
      ENDIF.
    ENDIF.

    IF lt_lifnr IS NOT INITIAL.
      SELECT lifnr AS creditornumber,
             sperm AS lfa1_block,
             loevm AS lfa1_delete
        FROM lfa1
        INTO TABLE @DATA(lt_creditor)
*          FOR ALL ENTRIES IN @gt_requestitem
*          WHERE lifnr = @gt_requestitem-creditornumber
*             OR lifnr = @gt_requestitem-mfrnumber.
        FOR ALL ENTRIES IN @lt_lifnr
        WHERE lifnr = @lt_lifnr-lifnr0
           OR lifnr = @lt_lifnr-lifnr1.

      IF sy-subrc = 0.
        SORT lt_creditor BY creditornumber ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_creditor COMPARING creditornumber.

        SELECT lifnr AS creditornumber,
               ekorg AS purchorg,
               sperm AS lfm1_block,
               loevm AS lfm1_delete
          FROM lfm1
          INTO TABLE @DATA(lt_lfm1)
          FOR ALL ENTRIES IN @lt_creditor
          WHERE lifnr = @lt_creditor-creditornumber.

        IF sy-subrc = 0.
          SORT lt_lfm1 BY creditornumber ASCENDING
                          purchorg ASCENDING.
          DELETE ADJACENT DUPLICATES FROM lt_lfm1 COMPARING creditornumber
                                                            purchorg.

          SELECT lifnr AS creditornumber,
                 ekorg AS purchorg,
                 werks AS plant,
                 sperm AS lfm2_block,
                 loevm AS lfm2_delete
            FROM lfm2
            INTO TABLE @DATA(lt_lfm2)
            FOR ALL ENTRIES IN @lt_creditor
            WHERE lifnr = @lt_creditor-creditornumber.
          IF sy-subrc = 0.
            SORT lt_lfm2 BY creditornumber ASCENDING
                            purchorg ASCENDING
                            plant ASCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_lfm2 COMPARING creditornumber
                                                              purchorg
                                                              plant.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    " ----------------------------------------------------------------------
    " Inforecord validation
    " ----------------------------------------------------------------------
    SELECT infnr AS inforecord,               "#EC CI_FAE_LINES_ENSURED
           loekz AS eina_delete
      FROM eina
      INTO TABLE @DATA(lt_eina)
      FOR ALL ENTRIES IN @gt_requestitem
      WHERE infnr = @gt_requestitem-inforecord.

    IF sy-subrc = 0.
      SORT lt_eina BY inforecord ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_eina COMPARING inforecord.

      SELECT a~infnr         AS inforecord,
             a~ekorg         AS purchorg,
             a~werks         AS plant,
             a~loekz         AS eine_delete,
             b~ext_productid AS extid
        FROM eine                       AS a
             LEFT JOIN /rb4r/mm_pir_add AS b
             ON  a~infnr = b~infnr
     AND a~ekorg = b~ekorg
     AND a~esokz = b~esokz
     AND a~werks = b~werks
        INTO TABLE @DATA(lt_eine)
        FOR ALL ENTRIES IN @lt_eina
        WHERE a~infnr = @lt_eina-inforecord.

      IF sy-subrc = 0.
        SORT lt_eine BY inforecord ASCENDING
                        purchorg ASCENDING
                        plant ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_eine COMPARING inforecord
                                                          purchorg
                                                          plant.
      ENDIF.
    ENDIF.

    " Get duplicate inforecord
    SELECT t1~infnr AS inforecord,            "#EC CI_FAE_LINES_ENSURED
           t1~matnr AS materialno,    " Material
           t1~lifnr AS creditornumber, " Supplier/Manufacture Number
           t1~meins AS orderuom,      " Order UOM
           t2~ekorg AS purchorg,      " Purchasing org
           t2~werks AS plant,         " Plant
           t1~loekz AS eina_delete,
           t2~loekz AS eine_delete
      FROM eina            AS t1
           INNER JOIN eine AS t2
           ON t1~infnr = t2~infnr
      FOR ALL ENTRIES IN @gt_requestitem
      WHERE t1~lifnr = @gt_requestitem-creditornumber
        AND t1~matnr = @gt_requestitem-materialno
        AND t2~werks = @gt_requestitem-werks
      INTO TABLE @DATA(lt_infor_dup).

    IF sy-subrc = 0.
      SORT lt_infor_dup BY materialno ASCENDING
                           creditornumber ASCENDING
                           plant ASCENDING
                           purchorg ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_infor_dup COMPARING materialno
                                                             creditornumber
                                                             plant
                                                             purchorg.
    ENDIF.

    " ----------------------------------------------------------------------
    " Material data
    " ----------------------------------------------------------------------
    SELECT t1~matnr AS materialno,    " Material "#EC CI_FAE_LINES_ENSURED
           t2~werks AS plant,         " Plant
           t2~lvorm AS marc_delete,
           t2~mmsta AS mat_plant_status,
           t1~mtart AS materialtype
      FROM mara            AS t1
           INNER JOIN marc AS t2
           ON t1~matnr = t2~matnr
      FOR ALL ENTRIES IN @gt_requestitem
      WHERE t1~matnr = @gt_requestitem-materialno
        AND t2~werks = @gt_requestitem-werks
      INTO TABLE @DATA(lt_mara).

    IF sy-subrc = 0.
      SORT lt_mara BY materialno ASCENDING
                      plant ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_mara COMPARING materialno plant.

      " Check if material number have accounting view or not
      SELECT matnr
        FROM mbewh
        FOR ALL ENTRIES IN @lt_mara
        WHERE matnr = @lt_mara-materialno
        INTO TABLE @DATA(lt_mbewh).
      IF sy-subrc = 0.
        SORT lt_mbewh BY matnr.
      ENDIF.
    ENDIF.
    " ----------------------------------------------------------------------
    " Equipment validation
    " ----------------------------------------------------------------------
    DATA: lr_equipment TYPE RANGE OF equi-equnr.
    lr_equipment = VALUE #( FOR ls_item2 IN gt_requestitem
                            WHERE ( equnr IS NOT INITIAL )
                            LET lv_string1 = ls_item2-equnr IN
                          ( sign   = 'I'
                            option = 'EQ'
                            low    = ls_item2-equnr ) ).
    SELECT equnr,
           spras,
           eqktx,
           kostl AS costcenter,
           objnr  " GINA-942++
      FROM v_equi
      INTO TABLE @DATA(lt_equi)
*          FOR ALL ENTRIES IN @gt_requestitem
      WHERE equnr  IN @lr_equipment
        AND datbi >= @sy-datum
        AND datab <= @sy-datum.

    IF sy-subrc = 0.
      SORT lt_equi BY equnr ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_equi COMPARING equnr.
    ENDIF.

    " ----------------------------------------------------------------------
    " Currency validation
    " ----------------------------------------------------------------------
    SELECT waers FROM tcurc                   "#EC CI_FAE_LINES_ENSURED
      INTO TABLE @DATA(lt_curr)
      FOR ALL ENTRIES IN @gt_requestitem
      WHERE waers = @gt_requestitem-currency.

    IF sy-subrc = 0.
      SORT lt_curr BY waers ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_curr COMPARING waers.
    ENDIF.

    " ----------------------------------------------------------------------
    " Purchasing View existence validation
    " ----------------------------------------------------------------------
*        SELECT matnr, statm, zhler, werks, ersda, ernam, laeda, aenam
*          FROM msta
*          INTO TABLE @DATA(lt_msta)
*          FOR ALL ENTRIES IN @gt_requestitem
*          WHERE matnr = @gt_requestitem-materialno
*            AND statm = 'E'.
*
*        IF sy-subrc = 0.
*          SORT lt_msta BY matnr
*                          werks ASCENDING.
*        ENDIF.

    SELECT matnr,                             "#EC CI_FAE_LINES_ENSURED
           werks
    FROM marc
    INTO TABLE @DATA(lt_msta)
    FOR ALL ENTRIES IN @gt_requestitem
    WHERE matnr = @gt_requestitem-materialno
        AND   pstat LIKE '%E%'.

    IF sy-subrc = 0.
      SORT lt_msta BY matnr
                      werks ASCENDING.
    ENDIF.

    " ----------------------------------------------------------------------
    " Termcode validation
    " ----------------------------------------------------------------------

    IF lt_termc_rnge IS NOT INITIAL.
      ls_src_selection-termc = lt_termc_rnge.

      /rb9x/rb0m_cl_ind_mat_appl=>get_instance( IMPORTING eo_instance = lo_ind_mat_appl ).

      TRY.
          lt_reflist_res = lo_ind_mat_appl->get_preflist_4_trmc_matgr_clas(
            is_preflist_searchsel = ls_src_selection ).
        CATCH /rb9x/cx_rb0m_ind_ex_system.
          CLEAR lt_reflist_res. " VF CP
      ENDTRY.
    ENDIF.

    " ----------------------------------------------------------------------
    " Material status & Material type validation
    " ----------------------------------------------------------------------
    " Get material status
    DATA lrt_mat_stat TYPE RANGE OF marc-mmsta.
    CLEAR lrt_mat_stat.

    DATA(lv_plant) = gt_requestheader[ 1 ]-plant.
    DATA(lv_product_type) = gt_requestheader[ 1 ]-product_type.
    DATA(lv_request_type) = gt_requestheader[ 1 ]-req_type.
    DATA(lv_longvl) = |%{ lv_plant }%|.
    SELECT 'I'   AS sign,
           'EQ'  AS option,
           value AS low
      FROM /rb4r/mm_bscst
      INTO CORRESPONDING FIELDS OF TABLE @lrt_mat_stat
      WHERE vari = 'GINA_MAT_STATUS'
        AND ( longvalue LIKE @lv_longvl OR longvalue = @space ).
    IF sy-subrc = 0.
      SORT lrt_mat_stat ASCENDING.
    ENDIF.
    " Get material type
    DATA lrt_mat_type TYPE RANGE OF mara-mtart.
    CLEAR lrt_mat_type.
    SELECT 'I'   AS sign,
           'EQ'  AS option,
           value AS low
      FROM /rb4r/mm_bscst
      INTO CORRESPONDING FIELDS OF TABLE @lrt_mat_type
      WHERE vari = 'GINA_MAT_TYPE'.
    IF sy-subrc = 0.
      SORT lrt_mat_type ASCENDING.
    ENDIF.
    " Get material type WP2
    DATA lrt_mat_type_wp2 TYPE RANGE OF mara-mtart.
    CLEAR lrt_mat_type.
    SELECT 'I'   AS sign,
           'EQ'  AS option,
           value AS low
      FROM /rb4r/mm_bscst
      INTO CORRESPONDING FIELDS OF TABLE @lrt_mat_type_wp2
      WHERE vari = 'GINA_MAT_TYPE_WP2'.
    IF sy-subrc = 0.
      SORT lrt_mat_type_wp2 ASCENDING.
    ENDIF.
    IF lv_request_type = 'C'.  " Only mode Create will create material view
      SELECT plant,
             product_type,
             material_type
        FROM /rb4r/mm_hview
        INTO TABLE @DATA(lt_hview)
        WHERE plant        = @lv_plant
          AND product_type = @lv_product_type.
      IF sy-subrc = 0.
        SORT lt_hview BY plant
                         product_type
                         material_type ASCENDING.
      ENDIF.
    ENDIF.

    " ----------------------------------------------------------------------
    " Material Group
    " ----------------------------------------------------------------------

    SELECT sub_matroup,                       "#EC CI_FAE_LINES_ENSURED
           material_group
    FROM /rb4r/mm_subpgr
    FOR ALL ENTRIES IN @gt_requestitem
    WHERE  sub_matroup = @gt_requestitem-materialgroup
    INTO TABLE @DATA(lt_subpgr).                          "#EC CI_SUBRC
    IF sy-subrc = 0.
      SORT lt_subpgr ASCENDING BY sub_matroup.
    ENDIF.

    SELECT plant,                             "#EC CI_FAE_LINES_ENSURED
           material_group,
           approver,
           value_limit,
           currency
    FROM /rb4r/mm_purch
    FOR ALL ENTRIES IN @gt_requestitem
    WHERE   plant = @gt_requestitem-werks
*        AND     material_group = @gt_requestitem-materialgroup
    INTO TABLE @DATA(lt_purch).                           "#EC CI_SUBRC
    IF sy-subrc = 0.
      SORT lt_purch ASCENDING BY plant
                                 material_group.
    ENDIF.

    " ----------------------------------------------------------------------
    " Plant Approver
    " ----------------------------------------------------------------------

    DATA lt_plnt_in TYPE /rb4r/cl_mm_gmmc_auxiliary=>gtt_plntapp.
    DATA lt_plntapp TYPE /rb4r/cl_mm_gmmc_auxiliary=>gtt_plntapp.

    lt_plnt_in = VALUE #( FOR ls_rqitm IN gt_requestitem
                          ( plant = ls_rqitm-werks ) ).
    SORT lt_plnt_in ASCENDING BY plant.
    DELETE ADJACENT DUPLICATES FROM lt_plnt_in COMPARING plant.

    /rb4r/cl_mm_gmmc_auxiliary=>plntapp( EXPORTING it_plnt = lt_plnt_in
                                         IMPORTING et_plnt = lt_plntapp ).
    IF lt_plntapp IS NOT INITIAL.
      SORT lt_plntapp ASCENDING BY plant
                                   costcenter.
    ENDIF.

    " ----------------------------------------------------------------------
    " Document List validation
    " ----------------------------------------------------------------------
    SELECT requestnumber,"requestno, "#EC CI_FAE_LINES_ENSURED
           requestitem,
           documentlineitem,"docitem,
           attachment,
           filetype,
*               dirnumber,
           mimetype,
           filename,
           createdby"local_created_by
*          FROM  /rb4r/mm_docls
      FROM /rb4r/mm_ddocmnt
      FOR ALL ENTRIES IN @gt_requestitem
*          WHERE requestno = @gt_requestitem-requestno
      WHERE requestnumber = @gt_requestitem-requestno
      AND   requestitem = @gt_requestitem-requestitem
      AND    draftentityoperationcode <> 'L'
      AND    draftentityoperationcode <> 'D'
      INTO TABLE @DATA(lt_docls).
    IF sy-subrc = 0.
*          SORT lt_docls ASCENDING BY requestno requestitem docitem.
      SORT lt_docls ASCENDING BY requestnumber
                                 requestitem
                                 documentlineitem.
      ls_material_type-sign   = 'I'.
      ls_material_type-option = 'EQ'.
      ls_material_type-low    = 'VERP'.
      APPEND ls_material_type TO lrt_material_type.
      ls_material_type-low = 'VHIB'.
      APPEND ls_material_type TO lrt_material_type.
      ls_material_type-low = 'MWEG'.
      APPEND ls_material_type TO lrt_material_type.
      CLEAR: ls_material_type.
    ENDIF.

    " ----------------------------------------------------------------------
    " Start validation
    " ----------------------------------------------------------------------
    DATA(lt_requestitem_tmp) = gt_requestitem. " For duplicated record check
    LOOP AT gt_requestitem ASSIGNING FIELD-SYMBOL(<ls_materialvalidation>).
      "GET rs Header
      DATA(ls_header) = VALUE #( gt_requestheader[ requestno = <ls_materialvalidation>-requestno ] DEFAULT VALUE #( ) ).


      " ----------------------------------------------------------------------
      " Check if the same record is entered
      " ----------------------------------------------------------------------
      LOOP AT lt_requestitem_tmp INTO DATA(ls_validmaterial)
           WHERE requestitem <> <ls_materialvalidation>-requestitem.
        IF NOT (     ls_validmaterial-materialno     = <ls_materialvalidation>-materialno
                 AND ls_validmaterial-creditornumber = <ls_materialvalidation>-creditornumber
                 AND ls_validmaterial-purchorg       = <ls_materialvalidation>-purchorg ).
          CONTINUE.
        ENDIF.

        MESSAGE s023(/rb4r/mm_gmmc_msgs) WITH |{ ls_validmaterial-requestitem ALPHA = OUT }|
                INTO DATA(lv_msgtext).
        APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                        requestitem = <ls_materialvalidation>-requestitem
                        msgid       = '/RB4R/MM_GMMC_MSGS'
                        msgno       = '023'
                        msgv1       = |{ ls_validmaterial-requestitem ALPHA = OUT }|
                        msgty       = if_abap_behv_message=>severity-error
                        msgtext     = lv_msgtext )
               TO lt_req_validation.

        CLEAR lv_msgtext.
        MESSAGE s011(/rb4r/mm_gmmc_msgs) WITH ls_validmaterial-materialno
                                              | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                                              ls_validmaterial-purchorg
                                              ls_validmaterial-werks
                INTO lv_msgtext.
        APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                        requestitem = <ls_materialvalidation>-requestitem
                        msgid       = '/RB4R/MM_GMMC_MSGS'
                        msgno       = '011'
                        msgv1       = ls_validmaterial-materialno
                        msgv2       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                        msgv3       = ls_validmaterial-purchorg
                        msgv4       = ls_validmaterial-werks
                        msgty       = if_abap_behv_message=>severity-error
                        msgtext     = lv_msgtext )
               TO lt_req_validation.
      ENDLOOP.

      " ----------------------------------------------------------------------
      " Creditor validation
      " ----------------------------------------------------------------------
      READ TABLE lt_creditor INTO DATA(ls_creditor) BINARY SEARCH
           WITH KEY creditornumber = <ls_materialvalidation>-creditornumber.
      IF sy-subrc = 0.
        IF ls_creditor-lfa1_block IS NOT INITIAL.
          " Supplier is blocked at purchasing level'.

          CLEAR: lv_msgtext.
          MESSAGE s002(/rb4r/mm_gmmc_msgs) WITH |{ <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'CreditorNumber'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '002'
                          msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT } |
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ENDIF.

        IF ls_creditor-lfa1_delete IS NOT INITIAL.
          "<ls_materialvalidation>-creditornumber_s = abap_false.
          " Supplier is marked as deleted'.
          CLEAR lv_msgtext.
          MESSAGE s003(/rb4r/mm_gmmc_msgs) WITH |{ <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'CreditorNumber'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '003'
                          msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ENDIF.

        READ TABLE lt_lfm1 INTO DATA(ls_lfm1) BINARY SEARCH
             WITH KEY creditornumber = <ls_materialvalidation>-creditornumber
                      purchorg       = <ls_materialvalidation>-purchorg.
        IF sy-subrc = 0.
          IF ls_lfm1-lfm1_block IS NOT INITIAL.
            "<ls_materialvalidation>-creditornumber_s = abap_false.
            " Supplier is blocked at purchasing organization level'.
            CLEAR lv_msgtext.
            MESSAGE s004(/rb4r/mm_gmmc_msgs) WITH | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'CreditorNumber'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '004'
                            msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ENDIF.

          IF ls_lfm1-lfm1_delete IS NOT INITIAL.
            " <ls_materialvalidation>-creditornumber_s = abap_false.
            " Supplier is marked as deleted at purchasing level'.
            CLEAR lv_msgtext.
            MESSAGE s005(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-purchorg
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'CreditorNumber'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '005'
                            msgv1       = <ls_materialvalidation>-purchorg
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ENDIF.
        ELSE.
          "<ls_materialvalidation>-creditornumber_s = abap_false.
          " Vendor &1 is not assigned to purchasing org. &2'.
          CLEAR lv_msgtext.
          MESSAGE s031(/rb4r/mm_gmmc_msgs) WITH |{ <ls_materialvalidation>-creditornumber ALPHA = OUT }| <ls_materialvalidation>-purchorg
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'CreditorNumber'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '031'
                          msgv1       = |{ <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                          msgv2       = <ls_materialvalidation>-purchorg
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ENDIF.

        READ TABLE lt_lfm2 INTO DATA(ls_lfm2) BINARY SEARCH
             WITH KEY creditornumber = <ls_materialvalidation>-creditornumber
                      purchorg       = <ls_materialvalidation>-purchorg
                      plant          = <ls_materialvalidation>-werks.
        IF sy-subrc = 0.
          IF ls_lfm2-lfm2_block IS NOT INITIAL.
            " Supplier is blocked at purchasing organization level'.
            CLEAR lv_msgtext.
            MESSAGE s006(/rb4r/mm_gmmc_msgs) WITH
                                             | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                                            <ls_materialvalidation>-purchorg
                                            <ls_materialvalidation>-werks
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'CreditorNumber'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '006'
                            msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                            msgv2       = <ls_materialvalidation>-purchorg
                            msgv3       = <ls_materialvalidation>-werks
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ENDIF.

          IF ls_lfm2-lfm2_delete IS NOT INITIAL.
            " Supplier is marked as deleted at purchasing level'.
            CLEAR lv_msgtext.
            MESSAGE s007(/rb4r/mm_gmmc_msgs) WITH
                                             | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                                            <ls_materialvalidation>-purchorg
                                            <ls_materialvalidation>-werks
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'CreditorNumber'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '007'
                            msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                            msgv2       = <ls_materialvalidation>-purchorg
                            msgv3       = <ls_materialvalidation>-werks
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ENDIF.
        ELSE.
*              CLEAR lv_msgtext.
*              MESSAGE s001(/rb4r/mm_gmmc_msgs) WITH
*                                               | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
*                                              <ls_materialvalidation>-purchorg
*                                              <ls_materialvalidation>-werks
*                      INTO lv_msgtext.
*              lv_msgtext = | { lv_msgtext } in Plant "{ <ls_materialvalidation>-werks }"|.
*              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
*                              requestitem = <ls_materialvalidation>-requestitem
*                              fname       = 'CreditorNumber'
*                              msgid       = '/RB4R/MM_GMMC_MSGS'
*                              msgno       = '001'
*                              msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
*                              msgv2       = <ls_materialvalidation>-purchorg
*                              msgv3       = <ls_materialvalidation>-werks
*                              msgty       = if_abap_behv_message=>severity-error
*                              msgtext     = lv_msgtext )
*                     TO lt_req_validation.
        ENDIF.
      ELSE.
        " Supplier does not exist'.
        CLEAR lv_msgtext.
        MESSAGE s001(/rb4r/mm_gmmc_msgs) WITH
                                             | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                INTO lv_msgtext.
        APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                        requestitem = <ls_materialvalidation>-requestitem
                        fname       = 'CreditorNumber'
                        msgid       = '/RB4R/MM_GMMC_MSGS'
                        msgno       = '001'
                        msgv1       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                        msgty       = if_abap_behv_message=>severity-error
                        msgtext     = lv_msgtext )
               TO lt_req_validation.
      ENDIF.

      " ----------------------------------------------------------------------
      " Inforecord validation
      " ----------------------------------------------------------------------
      READ TABLE lt_eina INTO DATA(ls_eina) BINARY SEARCH
           WITH KEY inforecord = <ls_materialvalidation>-inforecord.
      IF sy-subrc = 0.
        IF ls_eina-eina_delete IS NOT INITIAL.
          CLEAR lv_msgtext.
          MESSAGE s008(/rb4r/mm_gmmc_msgs) WITH
                                         <ls_materialvalidation>-inforecord
                  INTO lv_msgtext.
          " Inforecord is marked as deleted'.

          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'InfoRecord'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '008'
                          msgv1       = <ls_materialvalidation>-inforecord
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ENDIF.

        READ TABLE lt_eine INTO DATA(ls_eine) BINARY SEARCH
             WITH KEY inforecord = <ls_materialvalidation>-inforecord
                      purchorg   = <ls_materialvalidation>-purchorg
                      plant      = <ls_materialvalidation>-werks.
        IF sy-subrc = 0.
          IF ls_eine-eine_delete IS NOT INITIAL AND NOT lv_request_type = 'W'.
            CLEAR lv_msgtext.
            MESSAGE s009(/rb4r/mm_gmmc_msgs) WITH
                                           <ls_materialvalidation>-inforecord
                                           <ls_materialvalidation>-purchorg
                                            <ls_materialvalidation>-werks
                    INTO lv_msgtext.
            " Inforecord is marked as deleted at purchasing level'.
            " App3 get bold delete and not delete at item level

            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'InfoRecord'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '009'
                            msgv1       = <ls_materialvalidation>-inforecord
                            msgv2       = <ls_materialvalidation>-purchorg
                            msgv3       = <ls_materialvalidation>-werks
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ENDIF.
        ENDIF.
      ELSE.
        IF lv_request_type = 'U' AND <ls_materialvalidation>-inforecord IS NOT INITIAL.
          " Inforecord &1 does not exist'.
          CLEAR lv_msgtext.
          MESSAGE s017(/rb4r/mm_gmmc_msgs) WITH
                                         <ls_materialvalidation>-inforecord
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'InfoRecord'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '017'
                          msgv1       = <ls_materialvalidation>-inforecord
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ENDIF.
      ENDIF.

      " Check duplicate inforecord
      READ TABLE lt_infor_dup INTO DATA(ls_infor_dup) BINARY SEARCH
           WITH KEY materialno     = <ls_materialvalidation>-materialno
                    creditornumber = <ls_materialvalidation>-creditornumber
                    plant          = <ls_materialvalidation>-werks
                    purchorg       = <ls_materialvalidation>-purchorg.
      IF sy-subrc = 0.
        IF    ls_infor_dup-eina_delete = abap_true " Inforecord exists but marked as deleted
           OR ( ls_infor_dup-eine_delete = abap_true  AND NOT lv_request_type = 'W' ).
          " Inforecord &1 is existing and blocked/set for deletion'.
          CLEAR lv_msgtext.
          MESSAGE s013(/rb4r/mm_gmmc_msgs) WITH ls_infor_dup-inforecord
*                                             <ls_materialvalidation>-inforecord
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'InfoRecord'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '013'
                          msgv1       = ls_infor_dup-inforecord "<ls_materialvalidation>-inforecord
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ELSEIF lv_request_type = 'C' OR lv_request_type = 'N'." Only request create will show that message
          " Inforecord is duplicate with'.
          CLEAR lv_msgtext.
          MESSAGE s010(/rb4r/mm_gmmc_msgs) WITH ls_infor_dup-inforecord
*                                             <ls_materialvalidation>-inforecord
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'InfoRecord'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '010'
                          msgv1       = ls_infor_dup-inforecord "<ls_materialvalidation>-inforecord
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
          CLEAR lv_msgtext.
          MESSAGE s011(/rb4r/mm_gmmc_msgs) WITH
                                         <ls_materialvalidation>-materialno
                                          | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                                          <ls_materialvalidation>-purchorg
                                          <ls_materialvalidation>-werks

                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'InfoRecord'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '011'
                          msgv1       = <ls_materialvalidation>-materialno
                          msgv2       = | { <ls_materialvalidation>-creditornumber ALPHA = OUT }|
                          msgv3       = <ls_materialvalidation>-purchorg
                          msgv4       = <ls_materialvalidation>-werks
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                 TO lt_req_validation.
        ENDIF.
      ENDIF.

      " Check inforecord existed -> Order UOM should be the same
      LOOP AT lt_infor_dup INTO ls_infor_dup WHERE     materialno     = <ls_materialvalidation>-materialno
                                                   AND creditornumber = <ls_materialvalidation>-creditornumber
                                                   AND plant          = <ls_materialvalidation>-werks.
        IF    ls_infor_dup-eina_delete = abap_true " Inforecord exists but marked as deleted
           OR ls_infor_dup-eine_delete = abap_true.
        ELSE.
          IF     ls_infor_dup-orderuom IS NOT INITIAL
             AND ls_infor_dup-orderuom <> <ls_materialvalidation>-orderuom.

            DATA lv_meins_char TYPE char5.
            DATA lv_meins      TYPE meins.
            " Order UoM should be &1 the same with IR &2 &3 &4'.
            CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
              EXPORTING
                input          = ls_infor_dup-orderuom
              IMPORTING
                output         = lv_meins
              EXCEPTIONS
                unit_not_found = 1
                OTHERS         = 2.
            IF sy-subrc = 0.
              lv_meins_char = lv_meins.
              lv_meins_char = condense( lv_meins_char ).
              CLEAR lv_meins.
              CLEAR lv_msgtext.
              MESSAGE s014(/rb4r/mm_gmmc_msgs) WITH
                                            lv_meins_char
*                                                <ls_materialvalidation>-inforecord
                                            ls_infor_dup-inforecord
                                            <ls_materialvalidation>-werks
                                            <ls_materialvalidation>-purchorg

                      INTO lv_msgtext.
              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                              requestitem = <ls_materialvalidation>-requestitem
                              fname       = 'OrderUOM'
                              msgid       = '/RB4R/MM_GMMC_MSGS'
                              msgno       = '014'
                              msgv1       = lv_meins_char
                              msgv2       = ls_infor_dup-inforecord
                              msgv3       = ls_infor_dup-plant
                              msgv4       = ls_infor_dup-purchorg
                              msgty       = if_abap_behv_message=>severity-error
                              msgtext     = lv_msgtext )
                     TO lt_req_validation.

              EXIT. " Exit from this loop as error already occurred
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      " Check validation between Standard Quantity and Minimum Quantity
      IF <ls_materialvalidation>-minquan NE 0 OR <ls_materialvalidation>-standardquantity NE 0.
        IF <ls_materialvalidation>-standardquantity LT <ls_materialvalidation>-minquan.
          MESSAGE s006(appl_mm_pur_inforec) WITH <ls_materialvalidation>-minquan
          INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '000'
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext )
                                   TO lt_req_validation.
        ENDIF.
      ENDIF.
      " ----------------------------------------------------------------------
      " Material group validation
      " ----------------------------------------------------------------------
      READ TABLE lt_eine INTO ls_eine BINARY SEARCH
           WITH KEY inforecord = <ls_materialvalidation>-inforecord
                    purchorg   = <ls_materialvalidation>-purchorg
                    plant      = lv_plant.
      IF sy-subrc <> 0 OR ( sy-subrc = 0 AND ls_eine-extid IS INITIAL ).
        IF NOT line_exists( lt_purch[ plant          = <ls_materialvalidation>-werks
                                      material_group = <ls_materialvalidation>-materialgroup ] ).

          IF NOT line_exists( lt_subpgr[ sub_matroup = <ls_materialvalidation>-materialgroup ] ).
            " 'Material group &1 is not maintained in the table for purchasing routing'.
            CLEAR lv_msgtext.
            MESSAGE s012(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialgroup
                    INTO lv_msgtext.
            lv_msgtext = condense( lv_msgtext ).

            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'MaterialGroup'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '012'
                            msgv1       = <ls_materialvalidation>-materialgroup
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ELSEIF NOT line_exists( lt_subpgr[ material_group = <ls_materialvalidation>-materialgroup ] ).
            " 'Material group &1 is not maintained in the table for purchasing routing'.
            CLEAR lv_msgtext.
            MESSAGE s012(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialgroup
                    INTO lv_msgtext.
            lv_msgtext = condense( lv_msgtext ).

            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'MaterialGroup'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '012'
                            msgv1       = <ls_materialvalidation>-materialgroup
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ELSEIF NOT line_exists(
              lt_purch[
                  plant          = <ls_materialvalidation>-werks
                  material_group = lt_subpgr[
                                       material_group = <ls_materialvalidation>-materialgroup ]-material_group ] ).
            " 'Material group &1 is not maintained in the table for purchasing routing'.
            CLEAR lv_msgtext.
            MESSAGE s012(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialgroup
                    INTO lv_msgtext.
            lv_msgtext = condense( lv_msgtext ).

            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'MaterialGroup'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '012'
                            msgv1       = <ls_materialvalidation>-materialgroup
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext )
                   TO lt_req_validation.
          ENDIF.
        ENDIF.

*            TRY.
*                " ---------------------------------------------------------------------
*                " Temporary keep old logic => to be replace later after cPLM PoC
*                CONSTANTS lc_function_user        TYPE if_fdt_types=>id VALUE 'FE4428BFAA021EDB99C82E53BBD20B8D'. " BRF+ Central Refactor
*                CONSTANTS lc_function_suppergroup TYPE if_fdt_types=>id VALUE 'CEF1E7E773401EEC9686D16C471C8ECB'. " BRF+ Central Refactor
*                CONSTANTS lc_function_equi        TYPE if_fdt_types=>id VALUE 'FE4428BFAA021EDB8EA3A7AE7F648272'. " BRF+ Central Refactor
*                DATA lv_func_purch_approver TYPE fdt_uuid.
*                DATA lv_func_subpgr         TYPE fdt_uuid.
*                DATA lv_func_plant_approver TYPE fdt_uuid.
*
*                " DATA(lv_func_purch_approver) = /rb4r/gmmc_cl_utilities=>get_brf_function_id( /rb4r/gmmc_cl_constants=>mc_brf_function_name-function_purch_approver ).
*
*                IF lv_func_purch_approver IS INITIAL.
*                  lv_func_purch_approver = lc_function_user.
*                ENDIF.
*
*                " DATA(lv_func_subpgr) = /rb4r/gmmc_cl_utilities=>get_brf_function_id( /rb4r/gmmc_cl_constants=>mc_brf_function_name-function_subpgr ).
*
*                IF lv_func_subpgr IS INITIAL.
*                  lv_func_subpgr = lc_function_suppergroup.
*                ENDIF.
*
*                " DATA(lv_func_plant_approver) = /rb4r/gmmc_cl_utilities=>get_brf_function_id( /rb4r/gmmc_cl_constants=>mc_brf_function_name-function_plant_approver ).
*
*            GET TIME STAMP FIELD DATA(lv_timestamp).
*            ls_name_value-name = 'PURCH_MAT_GRP'.
*            lv_purch_mat_grp = <ls_materialvalidation>-materialgroup.
*            GET REFERENCE OF lv_purch_mat_grp INTO DATA(lo_data).
*            ls_name_value-value = lo_data.
*            INSERT ls_name_value INTO TABLE lt_name_value.
*
*            ls_name_value-name = 'PURCH_PLANT'.
*            lv_purch_plant = lv_plant.
*            GET REFERENCE OF lv_purch_plant INTO lo_data.
*            ls_name_value-value = lo_data.
*            INSERT ls_name_value INTO TABLE lt_name_value.
*
*                IF lv_func_plant_approver IS INITIAL.
*                  lv_func_plant_approver = lc_function_equi.
*                ENDIF.
*                cl_fdt_function_process=>process( EXPORTING iv_function_id = lv_func_purch_approver
*                                                            iv_timestamp   = lv_timestamp
*                                                  IMPORTING ea_result      = lt_pur_decision
*                                                  CHANGING  ct_name_value  = lt_name_value ).
*                READ TABLE lt_pur_decision INTO ls_pur_decision INDEX 1.
*                IF sy-subrc <> 0.
*                  " In case this is the sub material group, fetch data from the supper group
*                  CLEAR: ls_name_value,
*                         lt_name_value.
*                  GET TIME STAMP FIELD lv_timestamp.
*                  ls_name_value-name = 'N10A_MATGRP'.
*                  lv_n10a_matgrp = <ls_materialvalidation>-materialgroup.
*                  GET REFERENCE OF lv_n10a_matgrp INTO lo_data.
*                  ls_name_value-value = lo_data.
*                  INSERT ls_name_value INTO TABLE lt_name_value.
*
*                  TRY.
*                      cl_fdt_function_process=>process( EXPORTING iv_function_id = lv_func_subpgr
*                                                                  iv_timestamp   = lv_timestamp
*                                                        IMPORTING ea_result      = lt_super_purch_grp
*                                                        CHANGING  ct_name_value  = lt_name_value ).
*                      READ TABLE lt_super_purch_grp INTO ls_super_purch_grp INDEX 1.
*                      IF sy-subrc <> 0.
*                        " 'Material group &1 is not maintained in the table for purchasing routing'.
*                        CLEAR lv_msgtext.
*                        MESSAGE s012(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialgroup
*                                INTO lv_msgtext.
*                        lv_msgtext = condense( lv_msgtext ).
*
*                        APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
*                                        requestitem = <ls_materialvalidation>-requestitem
*                                        fname       = 'MaterialGroup'
*                                        msgid       = '/RB4R/MM_GMMC_MSGS'
*                                        msgno       = '012'
*                                        msgv1       = <ls_materialvalidation>-materialgroup
*                                        msgty       = if_abap_behv_message=>severity-error
*                                        msgtext     = lv_msgtext )
*                               TO lt_req_validation.
*                      ELSE.
*                        " Get purchasing data based on the supper purchasing group
*                        CLEAR: ls_name_value,
*                               lt_name_value.
*                        GET TIME STAMP FIELD lv_timestamp.
*                        ls_name_value-name = 'PURCH_MAT_GRP'.
*                        lv_purch_mat_grp = ls_super_purch_grp-matkl.
*                        GET REFERENCE OF lv_purch_mat_grp INTO lo_data.
*                        ls_name_value-value = lo_data.
*                        INSERT ls_name_value INTO TABLE lt_name_value.
*
*                        ls_name_value-name = 'PURCH_PLANT'.
*                        lv_purch_plant = lv_plant.
*                        GET REFERENCE OF lv_purch_plant INTO lo_data.
*                        ls_name_value-value = lo_data.
*                        INSERT ls_name_value INTO TABLE lt_name_value.
*
*                        TRY.
*                            cl_fdt_function_process=>process( EXPORTING iv_function_id = lv_func_purch_approver
*                                                                        iv_timestamp   = lv_timestamp
*                                                              IMPORTING ea_result      = lt_pur_decision
*                                                              CHANGING  ct_name_value  = lt_name_value ).
*                            READ TABLE lt_pur_decision INTO ls_pur_decision INDEX 1.
*                            IF sy-subrc <> 0.
*                              " 'Material group &1 is not maintained in the table for purchasing routing'.
*                              CLEAR lv_msgtext.
*                              MESSAGE s012(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialgroup
*                                      INTO lv_msgtext.
*                              lv_msgtext = condense( lv_msgtext ).
*                              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
*                                              requestitem = <ls_materialvalidation>-requestitem
*                                              fname       = 'MaterialGroup'
*                                              msgid       = '/RB4R/MM_GMMC_MSGS'
*                                              msgno       = '012'
*                                              msgv1       = <ls_materialvalidation>-materialgroup
*                                              msgty       = if_abap_behv_message=>severity-error
*                                              msgtext     = lv_msgtext ) TO lt_req_validation.
*                            ELSE.
*                            ENDIF.
*                          CATCH cx_fdt INTO DATA(lo_cx_fdt). " TODO: variable is assigned but never used (ABAP cleaner)
*                        ENDTRY.
*                      ENDIF.
*                    CATCH cx_fdt INTO lo_cx_fdt.
*                  ENDTRY.
*                ENDIF.
*              CATCH cx_fdt INTO lo_cx_fdt.
*            ENDTRY.
        CLEAR: ls_name_value,
               lt_name_value.
      ELSE.
      ENDIF.

      " ----------------------------------------------------------------------
      " Material validation
      " ----------------------------------------------------------------------
      READ TABLE lt_mara INTO DATA(ls_mara) BINARY SEARCH
           WITH KEY materialno = <ls_materialvalidation>-materialno
                    plant      = lv_plant.
      IF sy-subrc = 0.
        IF ls_mara-marc_delete IS NOT INITIAL.

          " 'Material &1 is marked as deleted for plant &2'.
          CLEAR lv_msgtext.
          MESSAGE s016(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialno
                                                lv_plant
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'MaterialNumber'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '016'
                          msgv1       = <ls_materialvalidation>-materialno
                          msgv2       = lv_plant
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.
        IF ls_mara-mat_plant_status NOT IN lrt_mat_stat.

          " 'Material &1 is marked as deleted for plant &2'.
          MESSAGE s052(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialno
                                                lv_plant
                                                ls_mara-mat_plant_status
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'MaterialNumber'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '052'
                          msgv1       = <ls_materialvalidation>-materialno
                          msgv2       = lv_plant
                          msgv3       = ls_mara-mat_plant_status
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.
        IF ls_header-req_type = 'N'.
          IF line_exists( lt_mbewh[ matnr = ls_mara-materialno ] ).
            DATA(ls_mbewh) = VALUE #( lt_mbewh[ matnr = ls_mara-materialno ] OPTIONAL ).
          ELSE.
            MESSAGE s047(me) WITH <ls_materialvalidation>-materialno
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'MaterialNumber'
                            msgid       = 'ME'
                            msgno       = '047'
                            msgv1       = <ls_materialvalidation>-materialno
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.
      ELSE.

        " 'Material &1 does not exist for plant &2'.
        CLEAR lv_msgtext.
        MESSAGE s015(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-materialno
                                              lv_plant
                INTO lv_msgtext.
        APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                        requestitem = <ls_materialvalidation>-requestitem
                        fname       = 'MaterialNumber'
                        msgid       = '/RB4R/MM_GMMC_MSGS'
                        msgno       = '015'
                        msgv1       = <ls_materialvalidation>-materialno
                        msgv2       = lv_plant
                        msgty       = if_abap_behv_message=>severity-error
                        msgtext     = lv_msgtext ) TO lt_req_validation.
      ENDIF.

      " no validate for UOM and Currency when Request Type = 'W' ( App 3 )
      IF NOT lv_request_type = 'W'.
        " ----------------------------------------------------------------------
        " UoM validation
        " ----------------------------------------------------------------------
        READ TABLE lt_uom_valid TRANSPORTING NO FIELDS BINARY SEARCH
             WITH KEY meins_ex = <ls_materialvalidation>-baseuom.
        IF sy-subrc <> 0.
          IF NOT line_exists( lt_uom_valid[ meins = <ls_materialvalidation>-baseuom ] ).
            lv_meins_char = <ls_materialvalidation>-baseuom.
            lv_meins_char = condense( lv_meins_char ).
            " 'Base unit of measure &1 is not valid'.
            CLEAR lv_msgtext.
            MESSAGE s020(/rb4r/mm_gmmc_msgs) WITH lv_meins_char sy-langu
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'BaseUomUnit'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '020'
                            msgv1       = lv_meins_char
                            msgv2       = sy-langu
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.

        READ TABLE lt_uom_valid TRANSPORTING NO FIELDS BINARY SEARCH
             WITH KEY meins_ex = <ls_materialvalidation>-orderuom.
        IF sy-subrc <> 0.
          IF NOT line_exists( lt_uom_valid[ meins = <ls_materialvalidation>-orderuom ] ).
            CLEAR lv_msgtext.
            lv_meins_char = <ls_materialvalidation>-orderuom.
            lv_meins_char = condense( lv_meins_char ).
            " 'ORDERUOM &1 is not valid'.
            MESSAGE s021(/rb4r/mm_gmmc_msgs) WITH lv_meins_char sy-langu
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'OrderUomUnit'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '021'
                            msgv1       = lv_meins_char
                            msgv2       = sy-langu
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.

        READ TABLE lt_uom_valid TRANSPORTING NO FIELDS BINARY SEARCH
             WITH KEY meins_ex = <ls_materialvalidation>-priceuom.
        IF sy-subrc <> 0.
          IF NOT line_exists( lt_uom_valid[ meins = <ls_materialvalidation>-priceuom ] ).
            CLEAR lv_msgtext.
            lv_meins_char = <ls_materialvalidation>-priceuom.
            lv_meins_char = condense( lv_meins_char ).
            " 'PRICEUOM &1 is not valid'.
            MESSAGE s022(/rb4r/mm_gmmc_msgs) WITH lv_meins_char sy-langu
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'PriceUoM'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '022'
                            msgv1       = lv_meins_char
                            msgv2       = sy-langu
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.

        " ----------------------------------------------------------------------
        " Currency validation
        " ----------------------------------------------------------------------
        READ TABLE lt_curr TRANSPORTING NO FIELDS BINARY SEARCH
             WITH KEY waers = <ls_materialvalidation>-currency.
        IF sy-subrc = 0.
        ELSE.
          " 'Currency &1 does not exist'.
          CLEAR lv_msgtext.
          MESSAGE s040(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-currency
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'PriceUoM'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '040'
                          msgv1       = <ls_materialvalidation>-currency
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.

      ENDIF.
      " Only validate for Material creation request
      IF lv_request_type = 'C'.
        " ----------------------------------------------------------------------
        " Equipment validation
        " ----------------------------------------------------------------------
        IF <ls_materialvalidation>-materialtype <> 'HIBE'.
          READ TABLE lt_equi INTO DATA(ls_equi) BINARY SEARCH
               WITH KEY equnr = <ls_materialvalidation>-equnr.
          IF sy-subrc = 0.
            " Check if this equipement is valid for equipement BOM

            " Filter equipment by status
            " Equipment Status
            DATA lt_jstat TYPE STANDARD TABLE OF jstat.
            CONSTANTS lc_status_delete   TYPE tj02t-istat VALUE 'I0076'.
            CONSTANTS lc_status_inactive TYPE tj02t-istat VALUE 'I1105'.
            CONSTANTS lc_status_deactive TYPE tj02t-istat VALUE 'I0320'.

            CLEAR lt_jstat.
            CALL FUNCTION 'STATUS_READ'
              EXPORTING
                objnr            = ls_equi-objnr
              TABLES
                status           = lt_jstat
              EXCEPTIONS
                object_not_found = 1
                OTHERS           = 2.
            IF sy-subrc <> 0.
              CLEAR lt_jstat.
            ENDIF.

            DATA lv_error TYPE boolean.

            lv_error = abap_false.
            LOOP AT lt_jstat REFERENCE INTO DATA(lr_jstat) WHERE inact IS INITIAL.
              " Status Check
              IF    lr_jstat->stat = lc_status_delete
                 OR lr_jstat->stat = lc_status_deactive
                 OR lr_jstat->stat = lc_status_inactive.

                lv_error = abap_true.
                EXIT.
              ENDIF.
            ENDLOOP.

            " If error => skip this equipment
            IF lv_error = abap_true.
              CLEAR lv_msgtext.
              MESSAGE s057(/rb4r/mm_gmmc_msgs) WITH |{ <ls_materialvalidation>-equnr ALPHA = OUT }|
                      INTO lv_msgtext.
              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                              requestitem = <ls_materialvalidation>-requestitem
                              fname       = 'EquipmentNumber'
                              msgid       = '/RB4R/MM_GMMC_MSGS'
                              msgno       = '057'
                              msgv1       = |{ <ls_materialvalidation>-equnr ALPHA = OUT }|
                              msgty       = if_abap_behv_message=>severity-error
                              msgtext     = lv_msgtext ) TO lt_req_validation.
            ENDIF.

            IF NOT line_exists( lt_plntapp[ plant      = lv_plant
                                            costcenter = ls_equi-costcenter ] )
            AND NOT line_exists( lt_plntapp[ plant = lv_plant ] ).
              CLEAR lv_msgtext.
              " Cost center for equipment &1 is not maintained in customizing table.

              MESSAGE s041(/rb4r/mm_gmmc_msgs) WITH |{ <ls_materialvalidation>-equnr ALPHA = OUT }|
                      INTO lv_msgtext.
              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                              requestitem = <ls_materialvalidation>-requestitem
                              fname       = 'EquipmentNumber'
                              msgid       = '/RB4R/MM_GMMC_MSGS'
                              msgno       = '041'
                              msgv1       = |{ <ls_materialvalidation>-equnr ALPHA = OUT }|
                              msgty       = if_abap_behv_message=>severity-error
                              msgtext     = lv_msgtext ) TO lt_req_validation.
            ENDIF.

          ELSE.
            " 'Equipment &1 does not exist'.
            CLEAR lv_msgtext.
            MESSAGE s018(/rb4r/mm_gmmc_msgs) WITH |{ <ls_materialvalidation>-equnr ALPHA = OUT }|
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'EquipmentNumber'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '018'
                            msgv1       = |{ <ls_materialvalidation>-equnr ALPHA = OUT }|
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.
        " ----------------------------------------------------------------------
        " Termcode validation
        " ----------------------------------------------------------------------
        READ TABLE lt_reflist_res TRANSPORTING NO FIELDS BINARY SEARCH
             WITH KEY termc = <ls_materialvalidation>-termcode.
        IF sy-subrc = 0.
        ELSE.
          " 'Termcode &1 does not exist'.
          CLEAR lv_msgtext.
          MESSAGE s019(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-termcode
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'EquipmentNumber'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '019'
                          msgv1       = <ls_materialvalidation>-termcode
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.

        " ----------------------------------------------------------------------
        " Manufacturer validation
        " ----------------------------------------------------------------------
        IF <ls_materialvalidation>-mfrnumber IS NOT INITIAL.
          READ TABLE lt_creditor INTO ls_creditor BINARY SEARCH
               WITH KEY creditornumber = <ls_materialvalidation>-mfrnumber.
          IF sy-subrc = 0.
            IF ls_creditor-lfa1_block IS NOT INITIAL.
              " 'Supplier is blocked at purchasing level'.
              CLEAR lv_msgtext.
              MESSAGE s025(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber
                      INTO lv_msgtext.
              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                              requestitem = <ls_materialvalidation>-requestitem
                              fname       = 'MFRNumber'
                              msgid       = '/RB4R/MM_GMMC_MSGS'
                              msgno       = '025'
                              msgv1       = <ls_materialvalidation>-mfrnumber
                              msgty       = if_abap_behv_message=>severity-error
                              msgtext     = lv_msgtext ) TO lt_req_validation.
            ENDIF.

            IF ls_creditor-lfa1_delete IS NOT INITIAL.

              " 'Supplier is marked as deleted'.
              CLEAR lv_msgtext.
              MESSAGE s026(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber
                      INTO lv_msgtext.
              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                              requestitem = <ls_materialvalidation>-requestitem
                              fname       = 'MFRNumber'
                              msgid       = '/RB4R/MM_GMMC_MSGS'
                              msgno       = '026'
                              msgv1       = <ls_materialvalidation>-mfrnumber
                              msgty       = if_abap_behv_message=>severity-error
                              msgtext     = lv_msgtext ) TO lt_req_validation.
            ENDIF.

            READ TABLE lt_lfm1 INTO ls_lfm1 BINARY SEARCH
                 WITH KEY creditornumber = <ls_materialvalidation>-mfrnumber
                          purchorg       = <ls_materialvalidation>-purchorg.
            IF sy-subrc = 0.
              IF ls_lfm1-lfm1_block IS NOT INITIAL.

                " 'Supplier is blocked at purchasing organization level'.
                CLEAR lv_msgtext.
                MESSAGE s027(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber <ls_materialvalidation>-purchorg
                        INTO lv_msgtext.
                APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                                requestitem = <ls_materialvalidation>-requestitem
                                fname       = 'MFRNumber'
                                msgid       = '/RB4R/MM_GMMC_MSGS'
                                msgno       = '027'
                                msgv1       = <ls_materialvalidation>-mfrnumber
                                msgv2       = <ls_materialvalidation>-purchorg
                                msgty       = if_abap_behv_message=>severity-error
                                msgtext     = lv_msgtext ) TO lt_req_validation.
              ENDIF.

              IF ls_lfm1-lfm1_delete IS NOT INITIAL.

                " 'Supplier is marked as deleted at purchasing level'.
                CLEAR lv_msgtext.
                MESSAGE s028(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber <ls_materialvalidation>-purchorg
                        INTO lv_msgtext.
                APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                                requestitem = <ls_materialvalidation>-requestitem
                                fname       = 'MFRNumber'
                                msgid       = '/RB4R/MM_GMMC_MSGS'
                                msgno       = '028'
                                msgv1       = <ls_materialvalidation>-mfrnumber
                                msgv2       = <ls_materialvalidation>-purchorg
                                msgty       = if_abap_behv_message=>severity-error
                                msgtext     = lv_msgtext ) TO lt_req_validation.
              ENDIF.
            ENDIF.

            READ TABLE lt_lfm2 INTO ls_lfm2 BINARY SEARCH
                 WITH KEY creditornumber = <ls_materialvalidation>-mfrnumber
                          purchorg       = <ls_materialvalidation>-purchorg
                          plant          = lv_plant.
            IF sy-subrc = 0.
              IF ls_lfm2-lfm2_block IS NOT INITIAL.

                " 'Supplier is blocked at purchasing organization level'.
                CLEAR lv_msgtext.
                MESSAGE s029(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber <ls_materialvalidation>-purchorg
                        INTO lv_msgtext.
                APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                                requestitem = <ls_materialvalidation>-requestitem
                                fname       = 'MFRNumber'
                                msgid       = '/RB4R/MM_GMMC_MSGS'
                                msgno       = '029'
                                msgv1       = <ls_materialvalidation>-mfrnumber
                                msgv2       = <ls_materialvalidation>-purchorg
                                msgty       = if_abap_behv_message=>severity-error
                                msgtext     = lv_msgtext ) TO lt_req_validation.
              ENDIF.

              IF ls_lfm2-lfm2_delete IS NOT INITIAL.

                " 'Supplier is marked as deleted at purchasing level'.
                CLEAR lv_msgtext.
                MESSAGE s027(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber <ls_materialvalidation>-purchorg lv_plant
                        INTO lv_msgtext.
                APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                                requestitem = <ls_materialvalidation>-requestitem
                                fname       = 'MFRNumber'
                                msgid       = '/RB4R/MM_GMMC_MSGS'
                                msgno       = '030'
                                msgv1       = <ls_materialvalidation>-mfrnumber
                                msgv2       = <ls_materialvalidation>-purchorg
                                msgv3       = lv_plant
                                msgty       = if_abap_behv_message=>severity-error
                                msgtext     = lv_msgtext ) TO lt_req_validation.
              ENDIF.
            ENDIF.
          ELSE.
            " 'Supplier does not exist'.
            CLEAR lv_msgtext.
            MESSAGE s024(/rb4r/mm_gmmc_msgs) WITH <ls_materialvalidation>-mfrnumber
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'MFRNumber'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '030'
                            msgv1       = <ls_materialvalidation>-mfrnumber
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.
        " ----------------------------------------------------------------------
        " Material Type validation
        " ----------------------------------------------------------------------
        CLEAR ls_mara.
        READ TABLE lt_mara INTO ls_mara BINARY SEARCH
             WITH KEY materialno = <ls_materialvalidation>-materialno
                      plant      = lv_plant.
        IF sy-subrc = 0 AND ls_mara-materialtype IS NOT INITIAL.
          IF ls_mara-materialtype IN lrt_mat_type_wp2.
          ELSE.
            " Material type &1 is not available in GMMC.

            CLEAR lv_msgtext.
            MESSAGE s054(/rb4r/mm_gmmc_msgs) WITH ls_mara-materialtype
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
                            fname       = 'MaterialType'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '054'
                            msgv1       = ls_mara-materialtype
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ENDIF.
      ENDIF.

      " ----------------------------------------------------------------------
      " Material Type validation
      " ----------------------------------------------------------------------
      CLEAR ls_mara.
      READ TABLE lt_mara INTO ls_mara BINARY SEARCH
           WITH KEY materialno = <ls_materialvalidation>-materialno
                    plant      = lv_plant.
      IF sy-subrc = 0 AND ls_mara-materialtype IS NOT INITIAL.
        IF ls_mara-materialtype IN lrt_mat_type.
        ELSE.
          " Material type &1 is not available in GMMC.
          CLEAR lv_msgtext.
          MESSAGE s054(/rb4r/mm_gmmc_msgs) WITH ls_mara-materialtype
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'MaterialType'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '054'
                          msgv1       = ls_mara-materialtype
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.
      ENDIF.

      IF lv_request_type = 'C'.
        " TODO: variable is assigned but never used (ABAP cleaner)
        READ TABLE lt_hview INTO DATA(ls_hview) WITH KEY plant         = lv_plant
                                                         product_type  = lv_product_type
                                                         material_type = <ls_materialvalidation>-materialtype.
        IF sy-subrc <> 0.
          " Could not create Mat.View for Plant &1 - Prod.Type &2 - Mat.Type &3
          CLEAR lv_msgtext.
          MESSAGE s056(/rb4r/mm_gmmc_msgs) WITH lv_plant
                                          lv_product_type
                                          ls_mara-materialtype
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'MaterialType'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '056'
                          msgv1       = lv_plant
                          msgv2       = lv_product_type
                          msgv3       = ls_mara-materialtype
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.
      ENDIF.

      " ----------------------------------------------------------------------
      "   Purchasing View existence validation
      " ----------------------------------------------------------------------
      IF lv_request_type = 'C'.
      ELSE.
        " TODO: variable is assigned but never used (ABAP cleaner)
        READ TABLE lt_msta INTO DATA(ls_msta) WITH KEY matnr = <ls_materialvalidation>-materialno
                                                       werks = lv_plant.
        IF sy-subrc <> 0.
          " Could not create Mat.View for Plant &1 - Prod.Type &2 - Mat.Type &3
          CLEAR lv_msgtext.
          MESSAGE s000(/rb4r/mm_gmmc_msgs) WITH |Material|
                                            <ls_materialvalidation>-materialno
                                            |does not have Purchasing View|
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
                          fname       = 'PurchasingView'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '000'
                          msgv1       = <ls_materialvalidation>-materialno
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.
      ENDIF.

      " ----------------------------------------------------------------------
      " Document List validation
      " ----------------------------------------------------------------------
*          DATA(ls_docls) = VALUE #( lt_docls[ requestno = <ls_materialvalidation>-requestno requestitem = <ls_materialvalidation>-requestitem ] DEFAULT VALUE #( ) ).
      IF line_exists( lt_docls[ requestnumber = <ls_materialvalidation>-requestno
                                requestitem   = <ls_materialvalidation>-requestitem ] ).
        DATA(lv_doc_exist) = 'X'.
      ENDIF.
*          IF ls_docls IS INITIAL AND <ls_materialvalidation>-extprodid IS NOT INITIAL.
      IF lv_doc_exist IS INITIAL AND <ls_materialvalidation>-extprodid IS NOT INITIAL.
        " DO nothing
      ELSEIF lv_doc_exist IS INITIAL AND <ls_materialvalidation>-extprodid IS INITIAL.
        IF lv_request_type = 'W'.
          IF <ls_materialvalidation>-be_blockingflag = abap_true AND <ls_materialvalidation>-blockingflag = abap_false.
            CLEAR lv_msgtext.
            MESSAGE e068(/rb4r/mm_gmmc_msgs)
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
*                                fname       = 'PurchasingView'
                            fname       = 'Attachment'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '068'
                            "msgv1       = <ls_materialvalidation>-materialno
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ELSEIF lv_request_type = 'C'.
          IF <ls_materialvalidation>-is_fixed_supplsrc = abap_false AND <ls_materialvalidation>-nodispoflg = abap_false.
            CLEAR lv_msgtext.
            MESSAGE e068(/rb4r/mm_gmmc_msgs)
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
*                              fname       = 'PurchasingView'
                            fname       = 'Attachment'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '068'
                            "msgv1       = <ls_materialvalidation>-materialno
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
        ELSE.
          CLEAR lv_msgtext.
          MESSAGE e068(/rb4r/mm_gmmc_msgs)
                  INTO lv_msgtext.
          APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                          requestitem = <ls_materialvalidation>-requestitem
*                              fname       = 'PurchasingView'
                          fname       = 'Attachment'
                          msgid       = '/RB4R/MM_GMMC_MSGS'
                          msgno       = '068'
                          "msgv1       = <ls_materialvalidation>-materialno
                          msgty       = if_abap_behv_message=>severity-error
                          msgtext     = lv_msgtext ) TO lt_req_validation.
        ENDIF.
      ENDIF.
      IF lv_doc_exist IS NOT INITIAL.
*          IF ls_docls-filetype = 'AED' AND <ls_materialvalidation>-extprodid IS INITIAL.
        IF NOT line_exists( lt_docls[ requestnumber = <ls_materialvalidation>-requestno
                                      requestitem   = <ls_materialvalidation>-requestitem
                                      filetype      = 'AED' ] )
           AND <ls_materialvalidation>-extprodid IS INITIAL.
*            IF ( lv_request_type = 'C' AND <ls_materialvalidation>-isexistingsourcelist = abap_false )
          IF ( lv_request_type = 'C' AND <ls_materialvalidation>-is_fixed_supplsrc = abap_false
               AND <ls_materialvalidation>-nodispoflg = abap_false )
          OR lv_request_type = 'N'
*            OR lv_request_type = 'U'and <ls_materialvalidation>-contract is not initial
          OR ( lv_request_type = 'W' AND <ls_materialvalidation>-be_blockingflag = abap_true AND <ls_materialvalidation>-blockingflag = abap_false ).
            CLEAR lv_msgtext.
            MESSAGE e068(/rb4r/mm_gmmc_msgs)
                    INTO lv_msgtext.
            APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                            requestitem = <ls_materialvalidation>-requestitem
*                                fname       = 'PurchasingView'
                            fname       = 'Attachment'
                            msgid       = '/RB4R/MM_GMMC_MSGS'
                            msgno       = '068'
                            "msgv1       = <ls_materialvalidation>-materialno
                            msgty       = if_abap_behv_message=>severity-error
                            msgtext     = lv_msgtext ) TO lt_req_validation.
          ENDIF.
          IF lv_request_type = 'U'.
            IF ( <ls_materialvalidation>-contract IS NOT INITIAL AND
                 <ls_materialvalidation>-materialtype IN lrt_material_type ).
              "Do no thing
            ELSE.
              CLEAR lv_msgtext.
              MESSAGE e068(/rb4r/mm_gmmc_msgs)
                      INTO lv_msgtext.
              APPEND VALUE #( requestno   = <ls_materialvalidation>-requestno
                              requestitem = <ls_materialvalidation>-requestitem
*                                  fname       = 'PurchasingView'
                              fname       = 'Attachment'
                              msgid       = '/RB4R/MM_GMMC_MSGS'
                              msgno       = '068'
                              "msgv1       = <ls_materialvalidation>-materialno
                              msgty       = if_abap_behv_message=>severity-error
                              msgtext     = lv_msgtext ) TO lt_req_validation.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      CLEAR: lv_doc_exist.
    ENDLOOP.

*** Test new validation
    /rb4r/cl_mm_gmmc_auxiliary=>validation( EXPORTING it_header         = gt_requestheader
                                                      it_item           = gt_requestitem
                                            IMPORTING et_req_validation = DATA(lt_new_validation) ).

*** Remove error item from import
    TYPES: BEGIN OF lty_error_itm,
             requestnumber TYPE /rb4r/mm_requestno,
             requestitem   TYPE /rb4r/mm_requestitem,
             allow         TYPE char1,
             message       TYPE /rb4r/mm_msgtext,
             fullmessage   TYPE /rb4r/mm_msgtext,
           END OF lty_error_itm,
           BEGIN OF lty_error,
             sign   TYPE sign,
             option TYPE option,
             low    TYPE /rb4r/mm_requestitem,
             high   TYPE /rb4r/mm_requestitem,
             " reqitem   TYPE <your_type>, " same type as reqitem
             " requestitem   TYPE requestitem,
           END OF lty_error.
    DATA: lt_error_itm   TYPE STANDARD TABLE OF lty_error_itm,
          it_remove_itm  TYPE /rb4r/if_mm_gmmc_reqhead~tt_resulttem,
          ls_import_log  TYPE /rb4r/mm_import,
          lt_import_log  TYPE STANDARD TABLE OF /rb4r/mm_import,
          lt_import_log0 TYPE STANDARD TABLE OF /rb4r/mm_import,
          lt_import_log1 TYPE STANDARD TABLE OF /rb4r/mm_import,
          lt_import_log2 TYPE STANDARD TABLE OF /rb4r/mm_import,
          lt_error       TYPE STANDARD TABLE OF lty_error,
          lt_mess        TYPE STANDARD TABLE OF lty_error.

    IF lines( lt_req_validation ) > 0.
      SORT lt_req_validation BY requestitem ASCENDING.

      lt_error_itm = VALUE #( FOR ls_valid IN lt_req_validation
                              ( requestnumber = ls_valid-requestno
                                requestitem   = ls_valid-requestitem
                                allow         = COND char1( WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'InfoRecord'
                                                            THEN 'X'
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'OrderUOM'
                                                            THEN 'X'
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'MaterialGroup'
                                                            THEN 'X'
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'EquipmentNumber'
                                                            THEN 'X'
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'C' AND ls_valid-fname = 'EquipmentNumber'
                                                            THEN 'X'
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'MFRNumber'
                                                            THEN 'X'
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'PriceUoM'
                                                            THEN 'X'
                                                            WHEN                                                     ls_valid-fname = 'Attachment'
                                                            THEN 'X'
                                                            ELSE '' )
                                message       = COND /rb4r/mm_msgtext( WHEN                                          ls_valid-fname = 'Attachment'
                                                            THEN ''
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'InfoRecord'
                                                            THEN ''
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'MFRNumber'
                                                            THEN ''
                                                            WHEN gt_requestheader[ 1                                 ]-req_type     = 'U' AND ls_valid-fname = 'PriceUoM'
                                                            THEN ''
                                                            ELSE ls_valid-msgtext && |.| )
                                fullmessage   = ls_valid-msgtext
                            ) ).
      it_remove_itm = VALUE #( FOR ls_error_itm IN lt_error_itm WHERE
                               ( allow <> 'X' )
                             ( requestitem = ls_error_itm-requestitem
                             ) ).

*** insert import log
      SORT lt_error_itm BY requestnumber requestitem.

      lt_import_log0 = VALUE #( FOR GROUPS <group> OF ls_error0 IN lt_error_itm
                                GROUP BY ls_error0-requestitem
                                ( requestno     = iv_requestnumber
                                  requestitem   = <group>
                                  status        = COND char10( WHEN line_exists( it_remove_itm[ requestitem = <group> ] )
                                                                           THEN 'E'
                                                                           ELSE 'S' )
                                  message       = REDUCE /rb4r/mm_msgtext( INIT txt TYPE string
                                                                           FOR <entry> IN GROUP <group>
                                                                           WHERE ( message <> '' )
                                                                           NEXT                 txt       = COND string( WHEN txt IS NOT INITIAL
                                                                                 THEN txt && |  | && <entry>-message
                                                                                 ELSE <entry>-message ) )
                                  materialno    = COND matnr( WHEN line_exists( gt_requestitem[ requestno   = iv_requestnumber requestitem = <group> ] )
                                                                           THEN gt_requestitem[ requestno = iv_requestnumber requestitem = <group> ]-materialno
                                                                           ELSE '' )
                                  materialgroup = COND matkl( WHEN line_exists( gt_requestitem[ requestno   = iv_requestnumber requestitem = <group> ] )
                                                                           THEN gt_requestitem[ requestno = iv_requestnumber requestitem = <group> ]-materialgroup
                                                                           ELSE '' )
                                  inforecord    = COND infnr( WHEN line_exists( gt_requestitem[ requestno   = iv_requestnumber requestitem = <group> ] )
                                                                           THEN gt_requestitem[ requestno = iv_requestnumber requestitem = <group> ]-inforecord
                                                                           ELSE '' )
                                  purchorg      = COND ekorg( WHEN line_exists( gt_requestitem[ requestno   = iv_requestnumber requestitem = <group> ] )
                                                                           THEN gt_requestitem[ requestno = iv_requestnumber requestitem = <group> ]-purchorg
                                                                           ELSE '' )
                                  vendornum     = COND lifnr( WHEN line_exists( gt_requestitem[ requestno   = iv_requestnumber requestitem = <group> ] )
                                                                           THEN gt_requestitem[ requestno = iv_requestnumber requestitem = <group> ]-creditornumber
                                                                           ELSE '' )
                                  fullmessage   = REDUCE /rb4r/mm_msgtext( INIT txt1 TYPE string
                                                                           FOR <entry> IN GROUP <group>
                                                                           NEXT                 txt1      = COND string( WHEN txt1 IS NOT INITIAL
                                                                                 THEN txt1 && |  | && <entry>-fullmessage
                                                                                 ELSE <entry>-fullmessage ) )
                              ) ).

      IF lines( it_remove_itm ) > 0.
        SORT it_remove_itm BY requestitem.
        DELETE ADJACENT DUPLICATES FROM it_remove_itm COMPARING requestitem.

        DATA: lt_data   TYPE gtt_exceldata,
              lt_nomess TYPE gtt_exceldata.

        lt_error = VALUE #( FOR ls_error IN it_remove_itm
                            ( sign   = 'I'
                              option = 'EQ'
                              low    = ls_error-requestitem
                            ) ).

        lt_data = VALUE #( FOR ls_data IN ct_data
                           WHERE ( requestitem NOT IN lt_error )
                         ( ls_data ) ).

        CLEAR: ct_data.

        ct_data = CORRESPONDING #( lt_data ). "after remove error import from excel put imported to request

      ENDIF.

***   Collect line with no message to import log as succcess
      lt_mess = VALUE #( FOR ls_mess IN lt_error_itm
                         ( sign   = 'I'
                           option = 'EQ'
                           low    = ls_mess-requestitem
                         ) ).

      lt_nomess = VALUE #( FOR ls_data IN ct_data
                           WHERE ( requestitem NOT IN lt_mess )
                        ( ls_data ) ).

      IF lines(  lt_nomess ) > 0. " exist item without error

        lt_import_log1 = VALUE #( FOR ls_itm IN lt_nomess
                                  ( requestno     = iv_requestnumber
                                    requestitem   = ls_itm-requestitem
                                    status        = 'S'
                                    message       = ''
                                    materialno    = COND matnr( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ] )
                                                                THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ]-materialno
                                                                ELSE '' )
                                    materialgroup = COND matkl( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ] )
                                                                THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ]-materialgroup
                                                                ELSE '' )
                                    inforecord    = COND infnr( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ] )
                                                                THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ]-inforecord
                                                                ELSE '' )
                                    purchorg      = COND ekorg( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ] )
                                                                THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ]-purchorg
                                                                ELSE '' )
                                    vendornum     = COND lifnr( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ] )
                                                                THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm-requestitem ]-creditornumber
                                                                ELSE '' )
                                    fullmessage   = '' )
        ).

      ENDIF.

      IF lines( lt_import_log0 ) > 0.

        LOOP AT lt_import_log0 INTO DATA(ls_import0).
          APPEND ls_import0 TO lt_import_log.
        ENDLOOP.

      ENDIF.

      IF lines( lt_import_log1 ) > 0.

        LOOP AT lt_import_log1 INTO DATA(ls_import1).
          APPEND ls_import1 TO lt_import_log.
        ENDLOOP.

      ENDIF.

    ELSE. " in case no error in excel validation
      lt_import_log = VALUE #( FOR ls_itm1 IN gt_requestitem
                               ( requestno     = iv_requestnumber
                                 requestitem   = ls_itm1-requestitem
                                 status        = 'S'
                                 message       = ''
                                 materialno    = COND matnr( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ] )
                                                             THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ]-materialno
                                                             ELSE '' )
                                 materialgroup = COND matkl( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ] )
                                                             THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ]-materialgroup
                                                             ELSE '' )
                                 inforecord    = COND infnr( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ] )
                                                             THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ]-inforecord
                                                             ELSE '' )
                                 purchorg      = COND ekorg( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ] )
                                                             THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ]-purchorg
                                                             ELSE '' )
                                 vendornum     = COND lifnr( WHEN line_exists( gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ] )
                                                             THEN gt_requestitem[ requestno = iv_requestnumber requestitem = ls_itm1-requestitem ]-creditornumber
                                                             ELSE '' )
                                 fullmessage   = '' )
                             ).
    ENDIF.

    IF lines( lt_import_log ) > 0.
      MODIFY /rb4r/mm_import FROM TABLE lt_import_log.
      IF sy-subrc = 0.
        DATA(lv_subrc) = 'X'.
        "reset_item_before_upload(
        "    iv_requestnumber = iv_requestnumber
        "    iv_up_import     = 'X'
        "    ).
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD store_the_data_to_update_pur.
    DATA: lt_lifnr    TYPE RANGE OF lfa1-lifnr,
          lv_string0  TYPE string,
          lt_scales_c TYPE STANDARD TABLE OF /rb4r/mm_rqscl,
          lt_scales_u TYPE STANDARD TABLE OF /rb4r/mm_rqscl,
          lt_scales   TYPE STANDARD TABLE OF /rb4r/mm_rqscl,
          ls_scales   TYPE /rb4r/mm_rqscl.

    lt_lifnr = VALUE #( FOR ls_data0 IN it_data
                        WHERE ( creditornumber IS NOT INITIAL )
                        LET lv_string = COND string( WHEN ls_data0-creditornumber IS NOT INITIAL
                                THEN ls_data0-creditornumber
                                ELSE '' ) IN
                      ( sign   = 'I'
                        option = 'EQ'
                        low    = COND #( WHEN lv_string CO '0123456789'
                                         AND strlen( ls_data0-creditornumber ) < 10
                                         THEN |{ ls_data0-creditornumber PAD = '0' ALIGN = RIGHT WIDTH = 10 }|
                                         ELSE ls_data0-creditornumber )
                      ) ).

    SELECT lifnr,
           name1
      FROM lfa1
      INTO TABLE @DATA(lt_vendor)
      WHERE lifnr IN @lt_lifnr.
    IF sy-subrc = 0.
      SORT lt_vendor.
    ENDIF.
*** Get data for request item
    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestheader
    BY \_requestitem
    ALL FIELDS
    WITH VALUE #( ( %key-requestnumber = is_header-requestnumber
                    %is_draft          = iv_is_draft ) )
    RESULT DATA(lt_requestitem)
    FAILED DATA(lt_rs_faild).
*** Remove Scale price
    DATA: ld_task   TYPE char32 VALUE 'GMMC_DEL'.
*** Get scale price
    READ ENTITIES OF /rb4r/mm_i_gmmc_requestheader
    ENTITY requestitem
    BY \_materialscaleprice
    ALL FIELDS
    WITH VALUE #( FOR ls_data1 IN it_data
                  ( %key-requestnumber = is_header-requestnumber
                    %key-requestitem   = ls_data1-requestitem
                    %is_draft          = iv_is_draft ) )
    RESULT DATA(lt_scaleprice)
    FAILED DATA(lt_scl_faild).
*** Check currency decimals
    DATA: lr_currency TYPE RANGE OF tcurx-currkey.
    lr_currency = VALUE #( FOR ls_curr IN it_data
                         ( sign = 'I'
                           option = 'EQ'
                           low = ls_curr-currency ) ).
    SELECT *
      FROM tcurx
      INTO TABLE @DATA(lt_currx)
      WHERE currkey IN @lr_currency.
    IF sy-subrc = 0.
      SORT lt_currx.

      LOOP AT it_data ASSIGNING FIELD-SYMBOL(<fs_curr>).

        DATA(ls_currx) = VALUE #( lt_currx[ currkey = <fs_curr>-currency ] OPTIONAL ).

        IF line_exists( lt_currx[ currkey = <fs_curr>-currency ] ).
          DATA(lv_dec) = 2 - ls_currx-currdec.
          <fs_curr>-priceperitem = COND kbetr_kond( WHEN ls_currx IS NOT INITIAL
                                                     AND ls_currx-currdec < 2
                                                     AND lv_dec = 1
                                                    THEN <fs_curr>-priceperitem / 10
                                                    WHEN ls_currx IS NOT INITIAL
                                                     AND ls_currx-currdec < 2
                                                     AND lv_dec = 2
                                                    THEN <fs_curr>-priceperitem / 100
                                                    ELSE <fs_curr>-priceperitem ).
        ENDIF.

      ENDLOOP.

    ENDIF.

    LOOP AT lt_requestitem ASSIGNING FIELD-SYMBOL(<fs_item>).
      CALL FUNCTION '/RB4R/MM_GMMC_REMOVE'
        STARTING NEW TASK ld_task
        EXPORTING
          iv_requestnumber = iv_requestnumber
          iv_requestitem   = <fs_item>-requestitem
          iv_flag          = 'X'.

      DATA(ls_data) = VALUE #( it_data[ requestno = is_header-requestnumber requestitem = <fs_item>-requestitem ] OPTIONAL ).
      IF ls_data IS NOT INITIAL.
        IF is_header-requesttype <> 'U'.
          <fs_item>-creditornumber = |{ ls_data-creditornumber ALPHA = OUT }|.

          lv_string0 = ls_data-creditornumber.
          IF lv_string0 CO '0123456789' AND strlen( ls_data-creditornumber ) < 10.
            ls_data-creditornumber =  |{ ls_data-creditornumber PAD = '0' ALIGN = RIGHT WIDTH = 10 }|.
          ENDIF.
          DATA(ls_vendor) = VALUE #( lt_vendor[ lifnr = ls_data-creditornumber ] OPTIONAL ).

          IF ls_vendor-name1 IS NOT INITIAL.
            <fs_item>-creditorname = ls_vendor-name1.
          ENDIF.

          IF ls_data-unitofmeasure IS NOT INITIAL.
            <fs_item>-orderuom = ls_data-unitofmeasure.
          ENDIF.
        ENDIF.

        <fs_item>-partnumber = ls_data-partnumber.
        <fs_item>-priceperitem = ls_data-priceperitem.
        <fs_item>-currency = ls_data-currency.
        <fs_item>-priceunit = ls_data-priceunit.
        IF ls_data-price1 IS NOT INITIAL.
          <fs_item>-preconsum = ls_data-estconsumperyear * ls_data-price1  / <fs_item>-priceunit.
        ENDIF.

        lt_scales = VALUE #( BASE lt_scales
                             FOR ls_scales0 IN it_scales
                             LET ls_currx1 = VALUE #( lt_currx[ currkey = ls_data-currency ] OPTIONAL )
                                 lv_dec1 = 2 - ls_currx1-currdec
                             IN
                           ( requestno = is_header-requestnumber
                             requestitem = <fs_item>-requestitem
                             scaleitem = |{ ls_scales0-columnid PAD = '0' ALIGN = RIGHT WIDTH = 5 }|
                             quantity  = ls_scales0-qty
                             amount    = COND kbetr_kond( WHEN ls_currx1 IS NOT INITIAL
                                                           AND ls_currx1-currdec < 2
                                                           AND lv_dec1 = 1
                                                          THEN ls_scales0-price / 10
                                                          WHEN ls_currx1 IS NOT INITIAL
                                                           AND ls_currx1-currdec < 2
                                                           AND lv_dec1 = 2
                                                          THEN ls_scales0-price / 100
                                                          ELSE ls_scales0-price )
                             meins     = ls_data-orderuom
                             waers     = ls_data-currency
                             priceunit = ls_data-priceunit
                             updateflag = COND #( WHEN line_exists( lt_scaleprice[ requestnumber = is_header-requestnumber
                                                                                   requestitem = <fs_item>-requestitem
                                                                                   scaleitem = |{ ls_scales0-columnid PAD = '0' ALIGN = RIGHT WIDTH = 5 }| ] )
                                                  THEN 'U'
                                                  ELSE 'C' ) ) ).


      ENDIF.

      CLEAR: ls_vendor, lv_string0, ls_data.
    ENDLOOP.

    IF lines( lt_scales ) > 0.
      CLEAR: lt_scales_c, lt_scales_u.
      lt_scales_c = VALUE #( BASE lt_scales_c FOR ls_scales1 IN lt_scales
                             WHERE ( updateflag = 'C' )
                           ( CORRESPONDING #( ls_scales1 ) ) ).
      lt_scales_u = VALUE #( BASE lt_scales_c FOR ls_scales2 IN lt_scales
                             WHERE ( updateflag = 'U' )
                           ( CORRESPONDING #( ls_scales2 ) ) ).
    ENDIF.

    IF is_header-requesttype <> 'U'.
      MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
      ENTITY requestitem
      UPDATE FIELDS ( creditornumber creditorname orderuom partnumber priceperitem currency priceunit )
      WITH VALUE #( FOR <fs_data> IN it_data "FOR ls_items IN lt_requestitem
                    LET ls_items           = COND #( WHEN line_exists( lt_requestitem[ requestnumber = is_header-requestnumber requestitem = <fs_data>-requestitem ] )
                                                     THEN lt_requestitem[ requestnumber = is_header-requestnumber requestitem = <fs_data>-requestitem ] )
                        lv_isexistingscale = COND #( WHEN line_exists( lt_scales_u[ requestno     = is_header-requestnumber
                                                                                    requestitem   = <fs_data>-requestitem ] )
                                                     OR line_exists( lt_scales_c[ requestno     = is_header-requestnumber
                                                                                  requestitem   = <fs_data>-requestitem ] )
                                                     THEN abap_true
                                                     ELSE abap_false )
                    IN
              (                                                           %tky                     = ls_items-%tky
                                                                          %is_draft                = iv_is_draft
                                                                          creditornumber           = ls_items-creditornumber
                                                                          creditorname             = ls_items-creditorname
                                                                          orderuom                 = ls_items-orderuom
                                                                          partnumber               = ls_items-partnumber
                                                                          priceperitem             = ls_items-priceperitem
                                                                          currency                 = ls_items-currency
                                                                          priceunit                = ls_items-priceunit
                                                                          isexistingscale          = lv_isexistingscale
                                                                          %control-creditornumber  = if_abap_behv=>mk-on
                                                                          %control-creditorname    = if_abap_behv=>mk-on
                                                                          %control-orderuom        = if_abap_behv=>mk-on
                                                                          %control-partnumber      = if_abap_behv=>mk-on
                                                                          %control-priceperitem    = if_abap_behv=>mk-on
                                                                          %control-currency        = if_abap_behv=>mk-on
                                                                          %control-priceunit       = if_abap_behv=>mk-on
                                                                          %control-isexistingscale = if_abap_behv=>mk-on ) )
      FAILED DATA(ls_failed1)
      REPORTED DATA(ls_reported1).
      IF ls_failed1 IS NOT INITIAL.
        DATA(lv_failed1) = 'X'.
      ENDIF.
    ELSE.
      MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader IN LOCAL MODE
      ENTITY requestitem
      UPDATE FIELDS ( creditornumber creditorname orderuom partnumber priceperitem currency priceunit )
      WITH VALUE #( FOR <fs_data> IN it_data "FOR ls_items IN lt_requestitem
                    LET ls_items           = COND #( WHEN line_exists( lt_requestitem[                                    requestnumber = is_header-requestnumber requestitem = <fs_data>-requestitem ] )
                                                     THEN lt_requestitem[ requestnumber            = is_header-requestnumber requestitem = <fs_data>-requestitem ] )
                        lv_isexistingscale = COND #( WHEN line_exists( lt_scales_u[                                       requestno     = is_header-requestnumber
                                                                                                                          requestitem   = <fs_data>-requestitem ] )
                                                     OR line_exists( lt_scales_c[                                         requestno     = is_header-requestnumber
                                                                                                                          requestitem   = <fs_data>-requestitem ] )
                                                     THEN abap_true
                                                     ELSE abap_false )
                    IN
              (                                                           %tky                     = ls_items-%tky
                                                                          %is_draft                = iv_is_draft
                                                                          partnumber               = ls_items-partnumber
                                                                          priceperitem             = ls_items-priceperitem
                                                                          currency                 = ls_items-currency
                                                                          priceunit                = ls_items-priceunit
                                                                          isexistingscale          = lv_isexistingscale
                                                                          %control-partnumber      = if_abap_behv=>mk-on
                                                                          %control-priceperitem    = if_abap_behv=>mk-on
                                                                          %control-currency        = if_abap_behv=>mk-on
                                                                          %control-priceunit       = if_abap_behv=>mk-on
                                                                          %control-isexistingscale = if_abap_behv=>mk-on ) )
      FAILED DATA(ls_failed2)
      REPORTED DATA(ls_reported2).
    ENDIF.


    IF lines( lt_scales_u ) > 0.
      MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader
             ENTITY scaleprice
             UPDATE FIELDS ( quantity amount unitofmeasure currency priceunit actionflag updateflag )
             WITH VALUE #( FOR ls_scale_u IN lt_scaleprice
                           ( %tky                   = ls_scale_u-%tky
                             %is_draft              = iv_is_draft
                             quantity               = COND meng15( WHEN line_exists( lt_scales_u[ requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN lt_scales_u[ requestno   = is_header-requestnumber
                                                                                     requestitem = ls_scale_u-requestitem
                                                                                     scaleitem   = ls_scale_u-scaleitem ]-quantity
                                                                   ELSE ls_scale_u-quantity )
                             amount                 = COND kbetr( WHEN line_exists( lt_scales_u[  requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN lt_scales_u[ requestno   = is_header-requestnumber
                                                                                     requestitem = ls_scale_u-requestitem
                                                                                     scaleitem   = ls_scale_u-scaleitem ]-amount
                                                                   ELSE ls_scale_u-amount )
                             unitofmeasure          = COND meins( WHEN line_exists( lt_scales_u[  requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN lt_scales_u[ requestno   = is_header-requestnumber
                                                                                     requestitem = ls_scale_u-requestitem
                                                                                     scaleitem   = ls_scale_u-scaleitem ]-meins
                                                                   ELSE ls_scale_u-unitofmeasure )
                             currency               = COND waers( WHEN line_exists( lt_scales_u[  requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN lt_scales_u[ requestno   = is_header-requestnumber
                                                                                     requestitem = ls_scale_u-requestitem
                                                                                     scaleitem   = ls_scale_u-scaleitem ]-waers
                                                                   ELSE ls_scale_u-currency )
                             priceunit              = COND epein( WHEN line_exists( lt_scales_u[  requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN lt_scales_u[ requestno   = is_header-requestnumber
                                                                                     requestitem = ls_scale_u-requestitem
                                                                                     scaleitem   = ls_scale_u-scaleitem ]-priceunit
                                                                   ELSE ls_scale_u-priceunit )
                             actionflag             = COND char1( WHEN line_exists( lt_scales_u[  requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN 'U'
                                                                   ELSE ls_scale_u-actionflag )
                             updateflag             = COND char1( WHEN line_exists( lt_scales_u[  requestno   = is_header-requestnumber
                                                                                                  requestitem = ls_scale_u-requestitem
                                                                                                  scaleitem   = ls_scale_u-scaleitem ] )
                                                                   THEN 'U'
                                                                   ELSE ls_scale_u-updateflag )
                             %control-quantity      = if_abap_behv=>mk-on
                             %control-unitofmeasure = if_abap_behv=>mk-on
                             %control-amount        = if_abap_behv=>mk-on
                             %control-currency      = if_abap_behv=>mk-on
                             %control-priceunit     = if_abap_behv=>mk-on
                             %control-actionflag    = if_abap_behv=>mk-on
                             %control-updateflag    = if_abap_behv=>mk-on ) )
        FAILED DATA(ls_failed3)
        REPORTED DATA(ls_reported3).

    ENDIF.

    IF lines( lt_scales_c ) > 0.
      DATA lt_scaleprice_create_run TYPE TABLE FOR CREATE /rb4r/mm_i_gmmc_requestheader\\requestitem\_materialscaleprice.
      LOOP AT it_data INTO DATA(ls_data2).
        lt_scaleprice_create_run = VALUE #(
             BASE lt_scaleprice_create_run
            ( %is_draft     = iv_is_draft
              requestnumber = ls_data2-requestno
              requestitem   = ls_data2-requestitem
              %target       = VALUE #( FOR ls_scales_c IN lt_scales_c WHERE
                                     ( requestno = ls_data2-requestno
                                   AND requestitem = ls_data2-requestitem
                                   AND quantity > 0 )
                                       ( %is_draft     = iv_is_draft
*                                         RequestNumber = ls_data2-Requestno
*                                         RequestItem   = ls_data2-RequestItem
*                                         ScaleItem     = ls_scales_c-scaleitem
                                         quantity      = ls_scales_c-quantity
                                         amount        = ls_scales_c-amount
                                         unitofmeasure = ls_scales_c-meins
                                         currency      = ls_scales_c-waers
                                         priceunit     = ls_scales_c-priceunit
                                         actionflag    = 'C'
                                         updateflag    = 'C'
                                         %control      = VALUE #(
*                                                                  requestnumber = if_abap_behv=>mk-on
*                                                                  requestitem   = if_abap_behv=>mk-on
*                                                                  ScaleItem     = if_abap_behv=>mk-on
                                                                  quantity      = if_abap_behv=>mk-on
                                                                  amount        = if_abap_behv=>mk-on
                                                                  unitofmeasure = if_abap_behv=>mk-on
                                                                  currency      = if_abap_behv=>mk-on
                                                                  priceunit     = if_abap_behv=>mk-on
                                                                  actionflag    = if_abap_behv=>mk-on
                       https://github.com/hugo2012/SAPABAP_CODE/tree/main//rb4r                                           updateflag    = if_abap_behv=>mk-on ) ) ) ) ).
      ENDLOOP.
      MODIFY ENTITIES OF /rb4r/mm_i_gmmc_requestheader
       ENTITY requestitem CREATE BY \_materialscaleprice
       AUTO FILL CID
       WITH lt_scaleprice_create_run
       FAILED DATA(ls_failed_scp_crt)
       REPORTED DATA(ls_reported_scp_crt)
       MAPPED DATA(ls_mapped_scp_crt).
    ENDIF.

*** validation -> append import log + remove error log from draft/save
    validate_excel(
      EXPORTING
        iv_requestnumber = iv_requestnumber
        iv_is_draft      = iv_is_draft
      CHANGING
        ct_pur_data      = it_data ).


  ENDMETHOD.
ENDCLASS.
